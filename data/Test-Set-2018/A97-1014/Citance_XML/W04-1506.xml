<PAPER>
  <S sid="0">Towards A Dependency Parser For Basque</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We present the Dependency Parser, for the linguistic processing of Basque, which can serve as a representative of agglutinative languages that are also characterized by the free order of its constituents.</S>
    <S sid="2" ssid="2">The Dependency syntactic model is applied to establish the dependency-based grammatical relations between the components within the clause.</S>
    <S sid="3" ssid="3">Such a deep analysis is used to improve the output of the shallow parsing where syntactic structure ambiguity is not fully and explicitly resolved.</S>
    <S sid="4" ssid="4">Previous to the completion of the grammar for the dependency parsing, the design of the Dependency Structure-based Scheme had to be accomplished; we concentrated on issues that must be resolved by any practical system that uses such models.</S>
    <S sid="5" ssid="5">This scheme was used both to the manual tagging of the corpus and to develop the parser.</S>
    <S sid="6" ssid="6">The manually tagged corpus has been used to evaluate the accuracy of the parser.</S>
    <S sid="7" ssid="7">We have evaluated the application of the grammar to corpus, measuring the linking of the verb with its dependents, with satisfactory results.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="8" ssid="1">This article describes the steps given for the construction of a dependency syntactic parser for Basque (Maxuxta).</S>
    <S sid="9" ssid="2">Our dependency analyser follows the constraint-based approach advocated by Karlsson (Karlsson, 1995).</S>
    <S sid="10" ssid="3">It takes as input the information obtained in the shallow parsing process (Abney, 1997).</S>
    <S sid="11" ssid="4">The shallow syntax refers to POS tagging and the chunking rules which group sequences of categories into structures (chunks) to facilitate the dependency analysis.</S>
    <S sid="12" ssid="5">The dependency parser is considered as the module involved in deep parsing (see Fig.</S>
    <S sid="13" ssid="6">1).</S>
    <S sid="14" ssid="7">In this approach, incomplete syntactic structures are produced and, thus, the process goes beyond shallow parsing to a deeper language analysis in an incremental fashion (Aduriz et al., 2004).</S>
    <S sid="15" ssid="8">This allows us to tackle unrestricted text parsing through descriptions that are organized in ordered modules, depending on the depth level of the analysis (see Fig.</S>
    <S sid="16" ssid="9">1).</S>
    <S sid="17" ssid="10">In agglutinative languages like Basque, it is difficult to separate morphology from syntax.</S>
    <S sid="18" ssid="11">That is why we consider morphosyntactic parsing for the first phase of the shallow syntactic analyser.</S>
    <S sid="19" ssid="12">The dependency parser has been performed in order to improve the syntactic analysis achieved so far, in the sense that, apart from the surface structural properties, we have added information about deeper structures by expressing the relation between the head and the dependent in an explicit manner.</S>
    <S sid="20" ssid="13">Additionally, we have adopted solutions to overcome problems that have emerged in doing this analysis (such as discontinuous constituents, subordinate clauses, etc.</S>
    <S sid="21" ssid="14">This approach has been used in several projects (J&#228;rvinen &amp; Tapanainen, 1998; Oflazer, 2003).</S>
    <S sid="22" ssid="15">Before carrying out the definition of the grammar for the parser, we established the syntactic tagging system in linguistic terms.</S>
    <S sid="23" ssid="16">We simultaneously have applied it to build the treebank for Basque (Eus3LB1) (Aduriz et al., 2003) as well as to define the Dependency Grammar.</S>
    <S sid="24" ssid="17">The treebank would serve to evaluate and improve the dependency parser.</S>
    <S sid="25" ssid="18">This will enable us to check how robust our grammar is.</S>
    <S sid="26" ssid="19">The dependency syntactic tagging system is based on the framework presented in Carroll et al., (1998, 1999): each sentence in the corpus is marked up with a set of grammatical relations (GRs), specifying the syntactic dependency which holds between each head and its dependent(s).</S>
    <S sid="27" ssid="20">However, there are certain differences: in our system, arguments that are not lexicalised may appear in grammatical relations (for example, the phonetically empty pro argument, which appears in the so-called pro-drop languages).</S>
    <S sid="28" ssid="21">The scheme is superficially similar to a syntactic dependency analysis in the style of Lin (1998).</S>
    <S sid="29" ssid="22">We annotate syntactically the Eus3LB corpus following the dependencybased formalism.</S>
    <S sid="30" ssid="23">The dependencies we have defined constitute a hierarchy (see Fig.</S>
    <S sid="31" ssid="24">2) that describes the theoretically and empirically relevant dependency tags employed in the analysis of the basic syntactic structures of Basque.</S>
    <S sid="32" ssid="25">This formalism is also used in the Prague Dependency Treebank for Czech (Hajic, 1998) and in NEGRA corpora for German (Brants et al., 2003) among others.</S>
    <S sid="33" ssid="26">Section 2 examines the main features of the language involved in the analysis in terms of dependency relations.</S>
    <S sid="34" ssid="27">Taking into account these features, we will explain the reasons for choosing the dependency-based formalism.</S>
    <S sid="35" ssid="28">In section 3 we briefly describe the general parsing system.</S>
    <S sid="36" ssid="29">Section 4 explains the dependency relations, the implementation of the dependency rules and a preliminary evaluation.</S>
    <S sid="37" ssid="30">Finally, some conclusions and objectives for future work are presented.</S>
    <S sid="38" ssid="31">2 A brief description of Basque in order to illustrate the adequacy of the adopted formalism Basque is an agglutinative language, that is, for the formation of words the dictionary entry independently takes each of the elements necessary for the different functions (syntactic case included).</S>
    <S sid="39" ssid="32">More specifically, the affixes corresponding to the determinant, number and declension case are taken in this order and independently of each other.</S>
    <S sid="40" ssid="33">These elements appear only after the last element in the noun phrase.</S>
    <S sid="41" ssid="34">One of the main characteristics of Basque is its declension system with numerous cases, which differentiates it from languages spoken in the surrounding countries.</S>
    <S sid="42" ssid="35">At sentence level, the verb appears as the last element in a neutral order.</S>
    <S sid="43" ssid="36">That is, given the language typology proposed by Greenberg, Basque is a Subject-Object-Verb (SOV) type language (Laka, 1998) or a final head type language.</S>
    <S sid="44" ssid="37">However, this corresponds to the neutral order, but in real sentences any order of the sentence elements (IVPs, PPs) around the verb is possible, that is, Basque can also be considered a language with free order of sentence constituents.</S>
    <S sid="45" ssid="38">These are the principal features that characterize the Basque language and, obviously, they have influenced us critically in our decision: either achieving dependency relations or transforming from dependency-trees to other modes of representation.</S>
    <S sid="46" ssid="39">We face the creation of a robust syntactic analyser by implementing it in sequential rule layers.</S>
    <S sid="47" ssid="40">In most of the cases, these layers are realized in grammars defined by the Constraint Grammar formalism (Karlsson et al., 1995; Tapanainen &amp; Voutilainen, 1994).</S>
    <S sid="48" ssid="41">Each analysis layer uses the output of the previous layer as its input and enriches it with further information.</S>
    <S sid="49" ssid="42">Rule layers are grouped into modules depending on the level of depth of their analysis.</S>
    <S sid="50" ssid="43">Modularity helps to maintain linguistic data and makes the system easily customisable or reusable.</S>
    <S sid="51" ssid="44">Figure 1 shows the architecture of the system, for more details, see Aduriz et al., 2004.</S>
    <S sid="52" ssid="45">The shallow parsing of the text begins with the morphosyntactic analysis and ends delimiting noun and verb chains.</S>
    <S sid="53" ssid="46">Finally, the deep analysis phase establishes the dependency-based grammatical relations between the components within the clause.</S>
    <S sid="54" ssid="47">The parsing system is based on finite state grammars.</S>
    <S sid="55" ssid="48">The Constraint Grammar (CG) formalism has been chosen in most cases because, on the one hand, it is suitable for treating unrestricted texts and, on the other hand, it provides a useful methodology and the tools to tackle morphosyntax as well as free order phrase components in a direct way.</S>
    <S sid="56" ssid="49">A series of grammars are implemented within the module of the shallow parsing which aim: The shallow or partial parsing analyser produces minimal and incomplete syntactic structures.</S>
    <S sid="57" ssid="50">The output of the shallow parser, as stated earlier, is the main base for the dependency parser.</S>
    <S sid="58" ssid="51">The shallow syntactic analyser includes the following modules: 1.</S>
    <S sid="59" ssid="52">The morphosyntactic analyser MORFEUS.</S>
    <S sid="60" ssid="53">The parsing process starts with the outcome of the morphosyntactic analyser MORFEUS (Alegria et al., 1996), which was created following a two-level morphology (Koskenniemi, 1983).</S>
    <S sid="61" ssid="54">It deals with the parsing of all the lexical units of a text, both simple words and multiword units as a Complex Lexical Unit (CLU).</S>
    <S sid="62" ssid="55">2.</S>
    <S sid="63" ssid="56">The morphosyntactic disambiguation module EUSLEM.</S>
    <S sid="64" ssid="57">From the obtained results, grammatical categories and lemmas are disambiguated.</S>
    <S sid="65" ssid="58">Once morphosyntactic disambiguation has been performed, this module assigns a single syntactic function to each word.</S>
    <S sid="66" ssid="59">3.</S>
    <S sid="67" ssid="60">The ckunk analysis module ZATIAK.</S>
    <S sid="68" ssid="61">This module identifies verb and noun chains based on the information about syntactic functions provided by each word-form.</S>
    <S sid="69" ssid="62">Entity names and postpositional phrases are also determined.</S>
    <S sid="70" ssid="63">We will focus on the last step of the shallow analysis because it contains the more appropriate information to make explicit the dependency relations.</S>
    <S sid="71" ssid="64">Basically, we use the syntactic functions and the chunks that are determined in the partial analysis.</S>
    <S sid="72" ssid="65">The syntactic functions that are determined in the partial analysis are based on those given in Aduriz et al., 2000.</S>
    <S sid="73" ssid="66">The syntactic functions employed basically follow the same approach to syntactic tags found in ENGCG (Voutilainen et al., 1992), although some decisions and a few changes were necessary.</S>
    <S sid="74" ssid="67">There are three types of syntactic functions: The distinction of these three groups is essential when designing the rules that assign the function tags for verb and noun chains detection.</S>
    <S sid="75" ssid="68">Chunker: verb chain and noun chains After the morphological analysis and the disambiguation are performed (see Figure 1), we have the corpus syntactically analysed following the CG syntax.</S>
    <S sid="76" ssid="69">In this syntactic representation there are not phrase units.</S>
    <S sid="77" ssid="70">But on the basis of this representation, the identification of various kinds of phrase units such as verb chains and noun chains is reasonably straightforward.</S>
    <S sid="78" ssid="71">Verb chains The identification of verb chains is based on both the verb function tags (@+FAUXV, @FAUXV, @-FMAINV, @+FMAINV, etc.) and some particles (the negative particle, modal particles, etc.).</S>
    <S sid="79" ssid="72">There are two types of verb chains: continuous and dispersed verb chains (the latter consisting of three components at most).</S>
    <S sid="80" ssid="73">The following function tags have been defined: Noun chains This module is based on the following assumption: any word having a modifier function tag has to be linked to some word or words with a main syntactic function tag.</S>
    <S sid="81" ssid="74">Moreover, a word with a main syntactic function tag can, by itself, constitute a phrase unit (for instance, noun phrases, adverbials and prepositional phrases).</S>
    <S sid="82" ssid="75">Taking into account this assumption, we recognise simple and coordinated noun chains, for which these three function tags have been established: Figure 3 shows part of the information obtained in the process of parsing the sentence Defentsako abokatuak desobedientzia zibilerako eskubidea aldarrikatu du epaiketan (The defense lawyer has claimed the right to civil disobedience in the trial) with its corresponding chains tags.</S>
    <S sid="83" ssid="76">Let us know the some syntactic tags used in fig.</S>
    <S sid="84" ssid="77">3: @NC&gt;: noun complement; @CM&gt;: modifier of the word carrying case in the noun chain; @-FMAINV: non finite main verb; @+FAUXV: finite auxiliary verb and @ADVL: adverbial. right The aim of the deep syntactic analysis is to make explicit the dependency relations between words or chunks.</S>
    <S sid="85" ssid="78">For this reason, we have designed a Dependency Grammar based on the Constraint Grammar Formalism.</S>
  </SECTION>
  <SECTION title="4 The Dependency Grammar for the Parser" number="2">
    <S sid="86" ssid="1">In this section we describe in more detail the dependency relations defined (see fig.</S>
    <S sid="87" ssid="2">2), the design of the rules and the results obtained.</S>
    <S sid="88" ssid="3">The results obtained in the deep parsing of sample sentence will help in providing a better understanding of the mentioned parsing process.</S>
    <S sid="89" ssid="4">This parsing process takes as basis the output of the shallow parser (see fig.</S>
    <S sid="90" ssid="5">3).</S>
    <S sid="91" ssid="6">The rules are implemented by means of the CG-2 parser (www.conexor.com).</S>
    <S sid="92" ssid="7">As Lin (2003) says a dependency relationship (Hays, 1964; Hudson, 1984; Mel&#8217;cuk, 1987; B&#246;mov&#225; et al., 2003) is an asymmetric binary relationship between a word called head (or governor, parent), and another word called modifier (or dependent, daughter).</S>
    <S sid="93" ssid="8">Dependency grammars represent sentence structures as a set of dependency relationships.</S>
    <S sid="94" ssid="9">Normally the dependency relationships form a tree that connects all the words in a sentence.</S>
    <S sid="95" ssid="10">A word in the sentence may have several modifiers, but each word may modify at most one word.</S>
    <S sid="96" ssid="11">The root of the dependency tree does not modify any word.</S>
    <S sid="97" ssid="12">It is also called the head of the sentence.</S>
    <S sid="98" ssid="13">For example, figure 4 describes the dependency structure of the example sentence.</S>
    <S sid="99" ssid="14">We use a list of tuples to represent a dependency tree.</S>
    <S sid="100" ssid="15">Each tuple represents one relation in the dependency tree.</S>
    <S sid="101" ssid="16">For example, a structurally case-marked complement when complements are nc (non-clausal, Noun Phrases, henceforth NP) has the following format: case: the case-mark by means of what the relation is established among the head and the modifier. head: the modified word head of NP/dependent: the modifier.</S>
    <S sid="102" ssid="17">In this case, the head of the NP. case-marked element within NP/dependent: the component of the dependent NP that carries the case. subj relationship: the label assigned to the dependency relationship.</S>
    <S sid="103" ssid="18">The syntactic dependencies between the components within the sentence are represented by tags starting with &#8220;&amp;&#8221;.</S>
    <S sid="104" ssid="19">The symbols &#8220;&gt;&#8221; and &#8220;&lt;&#8221; attached to each dependency-tag represent the direction in which we find the sentence component whose dependant is the target word.</S>
    <S sid="105" ssid="20">In the example we can see that the noun phrase defentsako abokatuak &#8216;the defense lawyer&#8217; depends on the verb aldarrikatu &#8216;to claim&#8217;, which is on its right side.</S>
    <S sid="106" ssid="21">A postprocess will make this link explicit.</S>
    <S sid="107" ssid="22">The dependency tree in fig 4 is represented by the following tuples: The grammar consists of 255 rules that have been defined and distributed in the following way: complements modifiers others nc2 cc3 det nc cm4 62 11 19 124 20 19 These rules were formulated, implemented, and tested using a part of the manually disambiguated corpus (24.000 words).</S>
    <S sid="108" ssid="23">For the moment, part of the rest of the corpus was used for testing.</S>
    <S sid="109" ssid="24">For more details of the rules, we describe some examples that illustrate how dependency rules can be written to define different types of linguistic relations.</S>
    <S sid="110" ssid="25">The following rule defines a verb-subject dependency relation between 2 words aldarrikatu (claimed) and abokatuak (lawyer) of the sentence in the previous example: The rule assigned the ncsubj tag to the noun abokatuak (lawyer) if the following conditions are satisfied: a) the noun is declined in ergative case; besides, it has assigned the @SUBJ syntactic function and, it is the last word of a noun chain; b) it has a non-finite main verb everywhere on its right before the punctuation mark.</S>
    <S sid="111" ssid="26">The following rule defines a complement subordinate clause dependency relation between a subordinate verb and a main verb.</S>
    <S sid="112" ssid="27">We illustrate this rule by means of an example in which the word egoten (usually stayed) is the verb of the complement subordinate clause linked to esan (told): Example: Lehenago aitona egoten zela ni EGOTEN naizen tokian esan dit amonak5.</S>
    <S sid="113" ssid="28">The rule assigned the CCOMP tag to the verb egoten (usually stayed) if the following conditions are satisfied: a) the verb is a nonfinite main verb and, it&#8217;s the first word-form of a verb chain; b) it has an auxiliary verb on its immediate right-side which has assigned the complement tag and appears as the last part of the verb chain.</S>
  </SECTION>
  <SECTION title="3." number="3">
    <S sid="114" ssid="1">The following rule defines that in the sentence Jonek Miren etortzea nahi du.</S>
    <S sid="115" ssid="2">(John wants to come Mary), etortzea (infinitive subordinate clause with object function, &amp;quot;to come&amp;quot;) is controled by the main verb nahi (&amp;quot;to want&amp;quot;).</S>
    <S sid="116" ssid="3">Taking into account, that etortzea is the controlled object of nahi, if there is another non-infinitive object Miren; then we will assign to it the subject dependency relation to the infinitive verb (&amp;quot;to come&amp;quot;).</S>
    <S sid="117" ssid="4">5 My grandmother told me my grandfather usually stayed where I am now The system has been manually tested on a corpus of newspaper articles (included in Eus3LB), containing 302 sentences (3266 words).</S>
    <S sid="118" ssid="5">We have evaluated the precision (correctly selected dependent / number of dependant returned) and the recall (correctly selected dependent / actual dependent in the sentence) of the subject (including coordinated subjects), and modifier dependency of verbs.</S>
    <S sid="119" ssid="6">For subject, precision and recall were respectively 67% and 69 %, while the figures for verb modifiers were 73 % and 95%.</S>
    <S sid="120" ssid="7">We have detected two main reasons for explaining these figures: 1) the analysis strategy is limited because we cannot make use of semantic or contextual information for resolving uncertainties at an early level; 2) errors in previous steps.</S>
    <S sid="121" ssid="8">These errors can be a) due either to an incorrect assignment of POS to word-forms or to the syncretism of case marks (@SUBJ, @OBJ); b) the presence of nonknown word-forms that increases the number of possible analysis.</S>
    <S sid="122" ssid="9">At this moment, the head and dependent slot fillers are, in all cases, the base forms of single head words, so for example, &#8216;multi-component&#8217; heads, such as names, are reduced to a single word; thus the slot filler corresponding to Xabier Arzallus would be Arzallus.</S>
  </SECTION>
  <SECTION title="5 Conclusions" number="4">
    <S sid="123" ssid="1">We have presented the application of the dependency grammar parser for the processing of Basque, which can serve as a representative of agglutinative languages with free order of constituents.</S>
    <S sid="124" ssid="2">We have shown how dependency grammar approach provides a good solution for deeper syntactic analysis, being at this moment the best alternative for morphologically complex languages.</S>
    <S sid="125" ssid="3">We have also evaluated the application of the grammar to corpus, measuring the linking of the verb with its dependents, with satisfactory results.</S>
    <S sid="126" ssid="4">However, the development of a full dependency syntactic analyser is still a matter of research.</S>
    <S sid="127" ssid="5">For instance, all kinds of constructions without a clear syntactic head are difficult to analyse: ellipses, sentences without a verb (e.g., copula-less predicative), and coordination.</S>
    <S sid="128" ssid="6">All these aspects have been treated in our manually annotated Corpus; our efforts now are oriented to deal with them automatically.</S>
  </SECTION>
  <SECTION title="6 Acnowledgments" number="5">
    <S sid="129" ssid="1">This research is supported by the University of the Basque Country (9/UPV00141.22614601/2002), the Ministry of Industry of the Basque Government (project XUXENG, OD02UN52).</S>
  </SECTION>
</PAPER>
