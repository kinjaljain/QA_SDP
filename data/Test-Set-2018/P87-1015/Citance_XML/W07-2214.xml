<PAPER>
  <S sid="0">Pomset mcfgs</S>
  <ABSTRACT>
    <S sid="1" ssid="1">This paper identifies two orthogonal dimensions of context sensitivity, the first being context sensitivity in concurrency and the second being structural context sensitivity.</S>
    <S sid="2" ssid="2">We present an example from natural language which seems to require both types of context sensitivity, and introduce partially ordered multisets (pomsets) mcfgs as a formalism which succintly expresses both.</S>
  </ABSTRACT>
  <SECTION title="Introduction" number="1">
    <S sid="3" ssid="1">Researchers in computer science and formal language theory have separately investigated context sensitivity of languages, addressing disjoint dimensions of context sensitivity.</S>
    <S sid="4" ssid="2">Researchers in parallel computing have explored the addition of concurrency and free word order to context free languages, i.e. a concurrency context sensitivity (Gischer, 1981; Warmuth and Haussler, 1984; Pratt, 1985; Pratt, 1986; Lodaya and Weil, 2000).</S>
    <S sid="5" ssid="3">Computational linguistis have explored adding crossing dependency and discontinuous constituency, i.e. a structural context sensitivity (Seki et al., 1991; Vijay-Shanker et al., 1987; Stabler, 1996).</S>
    <S sid="6" ssid="4">Research considering the combination of two dimensions of expressing context sensitivity have been sparse, e.g.</S>
    <S sid="7" ssid="5">(Becker et al., 1991), with research dedicated to this topic virtually nonexistent.</S>
    <S sid="8" ssid="6">Natural languages are not well expressed by either form of context sensitivity alone.</S>
    <S sid="9" ssid="7">For example, in Table 1, sentences 1-8 are valid, but 9, 10 are invalid constructions of Norwegian.</S>
    <S sid="10" ssid="8">In addition to the crossing dependency between the determiner and adverb phrase, this example can be described by either Bobaljik&#8217;s paradox (Bobaljik, 1999), which asserts that relative ordering of clausal constituents are not unambiguously determined by the phrase structure, or shape conservation (M&#168;uller, 2000), i.e. that linear precedence is preserved despite movement operations.</S>
    <S sid="11" ssid="9">In other words, the two structurally context sensitive components (due to the crossing dependency between them) can be shuffled arbitrarily, leading to concurrent context sensitivity.</S>
    <S sid="12" ssid="10">This paper proposes pomset mcfgs as a formalism for perspicuously expressing both types of context sensitivity.</S>
    <S sid="13" ssid="11">1 The rest of the paper is organized as follows.</S>
    <S sid="14" ssid="12">Section 1 introduces pomsets, pomset operations, and pomset properties.</S>
    <S sid="15" ssid="13">Section 2 provides a definition of pomset mcfgs by extending the standard definition of mcfgs, defined over tuples of strings, to tuples of pomsets.</S>
    <S sid="16" ssid="14">Section 3 discusses pomset mcfg parsing.</S>
  </SECTION>
  <SECTION title="1 Pomsets" number="2">
    <S sid="17" ssid="1">In this section, we define pomsets as a model for describing concurrency.</S>
    <S sid="18" ssid="2">A labelled partial order (LPO) is a 4 tuple (V, E, --&lt;, p) where V is a set of vertices, E is the alphabet, -&lt; is the partial order on the vertices, and p is the labelling function &#181;:V&#8594; E. A pomset is a LPO up to isomorphism.</S>
    <S sid="19" ssid="3">The concatenation of pomsets p and q is defined as ;(p,q) = (Vp&#8746;Vq,Ep &#8746; Eq,:p &#8746; -q &#8746;Vp&#215;Vq,Pp &#8746; Aq).</S>
    <S sid="20" ssid="4">The concurrency of pomsets p and q is defined as k(p,q) = (Vp&#8746;Vq,Ep &#8746; Eq,:&#65533;p &#8746; _q,J1p &#8746; &#181;q).</S>
    <S sid="21" ssid="5">Pomset isolation (t) is observed only in the context of concurrency.</S>
    <S sid="22" ssid="6">The concurrence of an isolated pomset with another pomset is defined as k(tp,q) = ({vp}&#8746;Vq,p&#955; &#8746; Eq,:q,{(p&#955;,vp)}&#8746;Aq), where Ap is the set of linearizations for p, and p&#955; is a function which returns an element of Ap.</S>
    <S sid="23" ssid="7">Let ki be a pomset concurrency operator restricted to an arity of i.</S>
    <S sid="24" ssid="8">Because concurrency is both associative and commutative, without isolation, kmkn = knkm = km+n, defeating any arity restrictions.</S>
    <S sid="25" ssid="9">Isolation allows us to restrict the arity of the concurrency operator, guaranteeing that in all linearizations of the pomset, the linearizations of the isolated subpomsets are contiguous.2 A mildly concurrent operator t kn, i.e. an nconcurrent operator, is a composite operator whose concurrency is isolated and restricted to an arity of n, such that it operates on at most n items concurrently.</S>
  </SECTION>
  <SECTION title="2 Pomset mcfgs" number="3">
    <S sid="26" ssid="1">There are many (structural) mildly context sensitive grammar formalisms, e.g. mcfg, lcfrs, mg, and they have been shown to be equivalent (Vijay-Shanker et al., 1987).</S>
    <S sid="27" ssid="2">In this section we construct mcfgs over pomsets (instead of strings) to define grammars with both types of context sensitivity.</S>
    <S sid="28" ssid="3">A pomset mcfg G is a 7-tuple (E,N,O,P,F,R,S) such that E is a finite non-empty set of atoms, i.e. terminal symbols, N is a finite non-empty set of nonterminal symbols, where N&#8745;E=&#8709;, O is a set of valid pomset operators, P is a set of i-tuples of pomsets labelled by E&#8746;N, F is a finite set of pomset rewriting functions from tuples of elements of P into elements in P, F&#8838;{ g:Pn &#8594;P  |n&gt;0 }, R is a finite set of rewrite rules which pair n-ary elements of F with n+1 nonterminals, and S&#8712;N is the start symbol, and d(S) = 1.</S>
    <S sid="29" ssid="4">This definition extends the standard mcfg definition (Seki et al., 1991), with two main differences.</S>
    <S sid="30" ssid="5">First, strings have been generalized to pomsets, i.e.</S>
    <S sid="31" ssid="6">P is a set of i-tuples of pomsets instead of i-tuples of strings.</S>
    <S sid="32" ssid="7">It follows that F, the set of functions, operate on tuples of pomsets instead of tuples of strings, and so forth.</S>
    <S sid="33" ssid="8">Second, pomset mcfgs explicitly specify O, the set of possible operators over the pomsets, e.g.</S>
    <S sid="34" ssid="9">{;, t k2}; string mcfgs have an implied operator set O={;} (i.e. just string concatenation).</S>
    <S sid="35" ssid="10">Additionally, just as in mcfgs, where the arity of string components are limited, we can limit the arity of the concurrency of pomsets.</S>
    <S sid="36" ssid="11">A n-concurrent pomset mcfg is a pomset mcfg such that for all concurrency operators ki in the grammar, i&#8804;n.</S>
    <S sid="37" ssid="12">A pomset mcfg with no concurrency among its components is a 1-concurrent pomset mcfg, just as a cfg is a 1mcfg.</S>
  </SECTION>
  <SECTION title="3 Parsing" number="4">
    <S sid="38" ssid="1">In this section we propose a strategy for parsing pomset mcfgs, based on IDL parsing (Nederhof and Satta, 2004).</S>
    <S sid="39" ssid="2">We define pomset graphs, which extend IDL graphs and pom-automata and are defined over tuples of pomsets (or tuples of idl expressions), rather than single pomsets or idl expressions.</S>
    <S sid="40" ssid="3">An informal analysis of the computational complexity for parsing pomset mcfgs follows.</S>
    <S sid="41" ssid="4">Pomset graphs The construction is quite straight forward, as pomsets themselves can already be considered as DAGs.</S>
    <S sid="42" ssid="5">However, in the pomset graph, we add two vertices, the start and end vertices.</S>
    <S sid="43" ssid="6">We then add precedence relations such that the start vertex precedes all minimal vertices of the pomset, and that the end vertex succeeds all maximal vertices of the pomset.</S>
    <S sid="44" ssid="7">For any nonempty pomset, we define Vmin &#8838;V and Vmax &#8838;V to be the minimal and maximal, respectively, vertices of V. Informally, no vertex in a pomset precede Vmin and none succeed any in Vmax.</S>
    <S sid="45" ssid="8">Formally, &#8704; v&#8712;V, v&#8217;&#8712;V,v&#8217;6&#65533;v, Vmin = { v  |(v&#8217;,v) 6&#8712;:&#65533; } and Vmax = { v  |(v,v&#8217;) 6&#8712;:&#65533; }.</S>
    <S sid="46" ssid="9">The start vertex is then labelled with the empty string, c, and the end vertex is labelled with Q&#8217;, a symbol not in E. Given a pomset p= (Vp,E,&#65533;,&#181;p), a pomset graph for p is a vertex labelled graph &#947;(p) = (Vy,E,&#181;y) where Vy and E are a finite set of vertices and edges, where Vy=Vp&#8746;{vs,ve} and E= -&lt; &#8746;vs&#215;Vmin&#8746;Vmax&#215;ve, Ey=E&#8746;{ &#8217;}, where &#963;&#8217; is a symbol not in E, and &#181;y=&#181;p&#8746;{(vs,E),(ve,&#963;&#8217;)} is the vertex labelling function.</S>
    <S sid="47" ssid="10">Having defined the pomset graph, we can apply the IDL parsing algorithm to the graph.</S>
    <S sid="48" ssid="11">Complexity While the complexity of the membership problem for pomset languages in general is NP-complete (Feigenbaum et al., 1993), by restricting the context sensitivity of the pomset grammars, polynomial time complexity is achievable.</S>
    <S sid="49" ssid="12">The complexity of the parsing of IDL graphs is O(n3k) (Nederhof and Satta, 2004) where k is the width of the graph, and the width is a measurement of the number of paths being traversed in parallel, i.e. the arity of the concurrent context sensitivity.</S>
    <S sid="50" ssid="13">Our intuition is that the parameterization of the complexity according to the number of parallel paths applies even when structural context sensitivity is added.</S>
    <S sid="51" ssid="14">Thus for a k-concurrent m-structural mcfg, we conjecture that the complexity is O(n3km).</S>
  </SECTION>
  <SECTION title="4 Conclusion" number="5">
    <S sid="52" ssid="1">In this paper we identified two types of context sensitivity, and provided a natural language example which exhibits both types of context sensitivity.</S>
    <S sid="53" ssid="2">We introduced pomset mcfgs as a formalism for describing grammars with both types of context sensitivity, and outlined an informal proof of the its polynomialtime parsing complexity.</S>
  </SECTION>
</PAPER>
