<PAPER>
  <S sid="0">Enriching The Output Of A Parser Using Memory-Based Learning</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We describe a method for enriching the output of a parser with information available in a corpus.</S>
    <S sid="2" ssid="2">The method is based on graph rewriting using memorybased learning, applied to dependency structures.</S>
    <S sid="3" ssid="3">This general framework allows us to accurately recover both grammatical and semantic information as well as non-local dependencies.</S>
    <S sid="4" ssid="4">It also facilitates dependency-based evaluation of phrase structure parsers.</S>
    <S sid="5" ssid="5">Our method is largely independent of the choice of parser and corpus, and shows state of the art performance.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">We describe a method to automatically enrich the output of parsers with information that is present in existing treebanks but usually not produced by the parsers themselves.</S>
    <S sid="7" ssid="2">Our motivation is two-fold.</S>
    <S sid="8" ssid="3">First and most important, for applications requiring information extraction or semantic interpretation of text, it is desirable to have parsers produce grammatically and semantically rich output.</S>
    <S sid="9" ssid="4">Second, to facilitate dependency-based comparison and evaluation of different parsers, their outputs may need to be transformed into specific rich dependency formalisms.</S>
    <S sid="10" ssid="5">The method allows us to automatically transform the output of a parser into structures as they are annotated in a dependency treebank.</S>
    <S sid="11" ssid="6">For a phrase structure parser, we first convert the produced phrase structures into dependency graphs in a straightforward way, and then apply a sequence of graph transformations: changing dependency labels, adding new nodes, and adding new dependencies.</S>
    <S sid="12" ssid="7">A memory-based learner trained on a dependency corpus is used to detect which modifications should be performed.</S>
    <S sid="13" ssid="8">For a dependency corpus derived from the Penn Treebank and the parsers we considered, these transformations correspond to adding Penn functional tags (e.g., -SBJ, -TMP, -LOC), empty nodes (e.g., NP PRO) and non-local dependencies (controlled traces, WHextraction, etc.).</S>
    <S sid="14" ssid="9">For these specific sub-tasks our method achieves state of the art performance.</S>
    <S sid="15" ssid="10">The evaluation of the transformed output of the parsers of Charniak (2000) and Collins (1999) gives 90% unlabelled and 84% labelled accuracy with respect to dependencies, when measured against a dependency corpus derived from the Penn Treebank.</S>
    <S sid="16" ssid="11">The paper is organized as follows.</S>
    <S sid="17" ssid="12">After providing some background and motivation in Section 2, we give the general overview of our method in Section 3.</S>
    <S sid="18" ssid="13">In Sections 4 through 8, we describe all stages of the transformation process, providing evaluation results and comparing our methods to earlier work.</S>
    <S sid="19" ssid="14">We discuss the results in Section 9.</S>
  </SECTION>
  <SECTION title="2 Background and Motivation" number="2">
    <S sid="20" ssid="1">State of the art statistical parsers, e.g., parsers trained on the Penn Treebank, produce syntactic parse trees with bare phrase labels, such as NP, PP, S, although the training corpora are usually much richer and often contain additional grammatical and semantic information (distinguishing various modifiers, complements, subjects, objects, etc.</S>
    <S sid="21" ssid="2">), including non-local dependencies, i.e., relations between phrases not adjacent in the parse tree.</S>
    <S sid="22" ssid="3">While this information may be explicitly annotated in a treebank, it is rarely used or delivered by parsers.l The reason is that bringing in more information of this type usually makes the underlying parsing model more complicated: more parameters need to be estimated and independence assumptions may no longer hold.</S>
    <S sid="23" ssid="4">Klein and Manning (2003), for example, mention that using functional tags of the Penn Treebank (temporal, location, subject, predicate, etc.) with a simple unlexicalized PCFG generally had a negative effect on the parser&#8217;s performance.</S>
    <S sid="24" ssid="5">Currently, there are no parsers trained on the Penn Treebank that use the structure of the treebank in full and that are thus 'Some notable exceptions are the CCG parser described in (Hockenmaier, 2003), which incorporates non-local dependencies into the parser&#8217;s statistical model, and the parser of Collins (1999), which uses WH traces and argument/modifier distinctions. capable of producing syntactic structures containing all or nearly all of the information annotated in the corpus.</S>
    <S sid="25" ssid="6">In recent years there has been a growing interest in getting more information from parsers than just bare phrase trees.</S>
    <S sid="26" ssid="7">Blaheta and Charniak (2000) presented the first method for assigning Penn functional tags to constituents identified by a parser.</S>
    <S sid="27" ssid="8">Pattern-matching approaches were used in (Johnson, 2002) and (Jijkoun, 2003) to recover non-local dependencies in phrase trees.</S>
    <S sid="28" ssid="9">Furthermore, experiments described in (Dienes and Dubey, 2003) show that the latter task can be successfully addressed by shallow preprocessing methods.</S>
  </SECTION>
  <SECTION title="3 An Overview of the Method" number="3">
    <S sid="29" ssid="1">In this section we give a high-level overview of our method for transforming a parser&#8217;s output and describe the different steps of the process.</S>
    <S sid="30" ssid="2">In the experiments we used the parsers described in (Charniak, 2000) and (Collins, 1999).</S>
    <S sid="31" ssid="3">For Collins&#8217; parser the text was first POS-tagged using Ratnaparkhi&#8217;s maximum enthropy tagger.</S>
    <S sid="32" ssid="4">The training phase of the method consists in learning which transformations need to be applied to the output of a parser to make it as similar to the treebank data as possible.</S>
    <S sid="33" ssid="5">As a preliminary step (Step 0), we convert the WSJ2 to a dependency corpus without losing the annotated information (functional tags, empty nodes, non-local dependencies).</S>
    <S sid="34" ssid="6">The same conversion is applied to the output of the parsers we consider.</S>
    <S sid="35" ssid="7">The details of the conversion process are described in Section 4 below.</S>
    <S sid="36" ssid="8">The training then proceeds by comparing graphs derived from a parser&#8217;s output with the graphs from the dependency corpus, detecting various mismatches, such as incorrect arc labels and missing nodes or arcs.</S>
    <S sid="37" ssid="9">Then the following steps are taken to fix the mismatches: Obviously, other modifications are possible, such as deleting arcs or moving arcs from one node to another.</S>
    <S sid="38" ssid="10">We leave these for future work, though, and focus on the three transformations mentioned above.</S>
    <S sid="39" ssid="11">The dependency corpus was split into training (WSJ sections 02&#8211;21), development (sections 00&#8211; While the definitions of the context and application site and the graph modifications are different for the three steps, the general structure of the method remains the same at each stage.</S>
    <S sid="40" ssid="12">Sections 6, 7 and 8 describe the steps in detail.</S>
    <S sid="41" ssid="13">In the application phase of the method, we proceed similarly.</S>
    <S sid="42" ssid="14">First, the output of the parser is converted to dependency graphs, and then the learners trained during the steps 1, 2 and 3 are applied in sequence to perform the graph transformations.</S>
    <S sid="43" ssid="15">Apart from the conversion from phrase structures to dependency graphs and the extraction of some linguistic features for the learning, our method does not use any information about the details of the treebank annotation or the parser&#8217;s output: it works with arbitrary labelled directed graphs.</S>
  </SECTION>
  <SECTION title="4 Step 0: From Constituents to Dependencies" number="4">
    <S sid="44" ssid="1">To convert phrase trees to dependency structures, we followed the commonly used scheme (Collins, 1999).</S>
    <S sid="45" ssid="2">The conversion routine,3 described below, is applied both to the original WSJ structures and the output of the parsers, though the former provides more information (e.g., traces) which is used by the conversion routine if available.</S>
    <S sid="46" ssid="3">First, for the treebank data, all traces are resolved and corresponding empty nodes are replaced with links to target constituents, so that syntactic trees become directed acyclic graphs.</S>
    <S sid="47" ssid="4">Second, for each constituent we detect its head daughters (more than one in the case of conjunction) and identify lexical heads.</S>
    <S sid="48" ssid="5">Then, for each constituent we output new dependencies between its lexical head and the lexical heads of its non-head daughters.</S>
    <S sid="49" ssid="6">The label of every new dependency is the constituent&#8217;s phrase label, stripped of all functional tags and coindexing marks, conjoined with the label of the non-head daughter, with its functional tags but without coindexing marks.</S>
    <S sid="50" ssid="7">Figure 1 shows an example of the original Penn annotation (a), the output of Charniak&#8217;s parser (b) and the results of our conversion of these trees to dependency structures (c and d).</S>
    <S sid="51" ssid="8">The interpretation of the dependency labels is straightforward: e.g., the label SNP-TMP corresponds to a sentence (S) being modified by a temporal noun phrase (NP-TMP).</S>
    <S sid="52" ssid="9">The core of the conversion routine is the selection of head daughters of the constituents.</S>
    <S sid="53" ssid="10">Following (Collins, 1999), we used a head table, but extended it with a set of additional rules, based on constituent labels, POS tags or, sometimes actual words, to account for situations where the head table alone gave unsatisfactory results.</S>
    <S sid="54" ssid="11">The most notable extension is our handling of conjunctions, which are often left relatively flat in WSJ and, as a result, in a parser&#8217;s output: we used simple pattern-based heuristics to detect conjuncts and mark all conjuncts as heads of a conjunction.</S>
    <S sid="55" ssid="12">After the conversion, every resulting dependency structure is modified deterministically: auxiliary verbs (be, do, have) become dependents of corresponding main verbs (similar to modal verbs, which are handled by the head table); to fix a WSJ inconsistency, we move the -LGS tag (indicating logical subject of passive in a by-phrase) from the PP to its child NP.</S>
  </SECTION>
  <SECTION title="5 Dependency-based Evaluation of Parsers" number="5">
    <S sid="56" ssid="1">After the original WSJ structures and the parsers&#8217; outputs have been converted to dependency structures, we evaluate the performance of the parsers against the dependency corpus.</S>
    <S sid="57" ssid="2">We use the standard precision/recall measures over sets of dependencies (excluding punctuation marks, as usual) and evaluate Collins&#8217; and Charniak&#8217;s parsers on WSJ section 23 in three settings: on unlabelled dependencies; on labelled dependencies with only bare labels (all functional tags discarded); on labelled dependencies with functional tags.</S>
    <S sid="58" ssid="3">Notice that since neither Collins&#8217; nor Charniak&#8217;s parser outputs WSJ functional labels, all dependencies with functional labels in the gold parse will be judged incorrect in the third setting.</S>
    <S sid="59" ssid="4">The evaluation results are shown in Table 1, in the row &#8220;step 0&#8221;.4 As explained above, the low numbers for the dependency evaluation with functional tags are expected, because the two parsers were not intended to produce functional labels.</S>
    <S sid="60" ssid="5">Interestingly, the ranking of the two parsers is different for the dependency-based evaluation than for PARSEVAL: Charniak&#8217;s parser obtains a higher PARSEVAL score than Collins&#8217; (89.0% vs. 88.2%), but slightly lower f-score on dependencies without functional tags (82.9% vs. 83.4%).</S>
    <S sid="61" ssid="6">To summarize the evaluation scores at this stage, both parsers perform with f-score around 87% on unlabelled dependencies.</S>
    <S sid="62" ssid="7">When evaluating on bare dependency labels (i.e., disregarding functional tags) the performance drops to 83%.</S>
    <S sid="63" ssid="8">The new errors that appear when taking labels into account come from different sources: incorrect POS tags (NN vs. VBG), different degrees of flatness of analyses in gold and test parses (JJ vs. ADJP, or CD vs. QP) and inconsistencies in the Penn annotation (VP vs. RRC).</S>
    <S sid="64" ssid="9">Finally, the performance goes down to around 66% when taking into account functional tags, which are not produced by the parsers at all.</S>
  </SECTION>
  <SECTION title="6 Step 1: Changing Dependency Labels" number="6">
    <S sid="65" ssid="1">Intuitively, it seems that the 66% performance on labels with functional tags is an underestimation, because much of the missing information is easily recoverable.</S>
    <S sid="66" ssid="2">E.g., one can think of simple heuristics to distinguish subject NPs, temporal PPs, etc., thus introducing functional labels and improving the scores.</S>
    <S sid="67" ssid="3">Developing such heuristics would be a very time consuming and ad hoc process: e.g., Collins&#8217; -A and -g tags may give useful clues for this labelling, but they are not available in the output of other parsers.</S>
    <S sid="68" ssid="4">As an alternative to hardcoded heuristics, Blaheta and Charniak (2000) proposed to recover the Penn functional tags automatically.</S>
    <S sid="69" ssid="5">On the Penn Treebank, they trained a statistical model that, given a constituent in a parsed sentence and its context (parent, grandparent, head words thereof etc.</S>
    <S sid="70" ssid="6">), predicted the functional label, possibly empty.</S>
    <S sid="71" ssid="7">The method gave impressive performance, with 98.64% accuracy on all constituents and 87.28% f-score for non-empty functional labels, when applied to constituents correctly identified by Charniak&#8217;s parser.</S>
    <S sid="72" ssid="8">If we extrapolate these results to labelled PARSEVAL with functional labels, the method would give around 87.8% performance (98.64% of the &#8220;usual&#8221; 89%) for Charniak&#8217;s parser.</S>
    <S sid="73" ssid="9">Adding functional labels can be viewed as a relabelling task: we need to change the labels produced by a parser.</S>
    <S sid="74" ssid="10">We considered this more general task, and used a different approach, taking dependency graphs as input.</S>
    <S sid="75" ssid="11">We first parsed the training part of our dependency treebank (sections 02&#8211;21) and identified possible relabellings by comparing dependencies output by a parser to dependencies from the treebank.</S>
    <S sid="76" ssid="12">E.g., for Collins&#8217; parser the most frequent relabellings were SNP SNP-SBJ, PPNP-A PPNP, VPNP-A VPNP, SNP-A SNP-SBJ and VPPP VPPP-CLR.</S>
    <S sid="77" ssid="13">In total, around 30% of all the parser&#8217;s dependencies had different labels in the treebank.</S>
    <S sid="78" ssid="14">We then learned a mapping from the parser&#8217;s labels to those in the dependency corpus, using TiMBL, a memory-based classifier (Daelemans et al., 2003).</S>
    <S sid="79" ssid="15">The features used for the relabelling were similar to those used by Blaheta and Charniak, but redefined for dependency structures.</S>
    <S sid="80" ssid="16">For each dependency we included: the head ( ) and dependent ( ), their POS tags; the leftmost dependent of and its POS; the head of ( ), its POS and the label of the the closest left and right siblings of (dependents of ) and their POS tags; the label of the dependency ( ) as derived from the parser&#8217;s output.</S>
    <S sid="81" ssid="17">When included in feature vectors, all dependency labels were split at &#8216;&#8217;, e.g., the label SNP-A resulted in two features: S and NP-A.</S>
    <S sid="82" ssid="18">Testing was done as follows.</S>
    <S sid="83" ssid="19">The test corpus (section 23) was also parsed, and for each dependency a feature vector was formed and given to TiMBL to correct the dependency label.</S>
    <S sid="84" ssid="20">After this transformation the outputs of the parsers were evaluated, as before, on dependencies in the three settings.</S>
    <S sid="85" ssid="21">The results of the evaluation are shown in Table 1 (the row marked &#8220;step 1&#8221;).</S>
    <S sid="86" ssid="22">Let us take a closer look at the evaluation results.</S>
    <S sid="87" ssid="23">Obviously, relabelling does not change the unlabelled scores.</S>
    <S sid="88" ssid="24">The 1% improvement for evaluation on bare labels suggests that our approach is capable not only of adding functional tags, but can also correct the parser&#8217;s phrase labels and partof-speech tags: for Collins&#8217; parser the most frequent correct changes not involving functional labels were NPNN NPJJ and NPJJ NPVBN, fixing POS tagging errors.</S>
    <S sid="89" ssid="25">A very substantial increase of the labelled score (from 66% to 81%), which is only 6% lower than unlabelled score, clearly indicates that, although the parsers do not produce functional labels, this information is to a large extent implicitly present in trees and can be recovered.</S>
    <S sid="90" ssid="26">One effect of the relabelling procedure described above is the recovery of Penn functional tags.</S>
    <S sid="91" ssid="27">Thus, it is informative to compare our results with those reported in (Blaheta and Charniak, 2000) for this same task.</S>
    <S sid="92" ssid="28">Blaheta and Charniak measured tagging accuracy and precision/recall for functional tag identification only for constituents correctly identified by the parser (i.e., having the correct span and nonterminal label).</S>
    <S sid="93" ssid="29">Since our method uses the dependency formalism, to make a meaningful comparison we need to model the notion of a constituent being correctly found by a parser.</S>
    <S sid="94" ssid="30">For a word we say that the constituent corresponding to its maximal projection is correctly identified if there exists , the head of , and for the dependency the right part of its label (e.g., NP-SBJ for SNP-SBJ) is a nonterminal (i.e., not a POS tag) and matches the right part of the label in the gold dependency structure, after stripping functional tags.</S>
    <S sid="95" ssid="31">Thus, the constituent&#8217;s label and headword should be correct, but not necessarily the span.</S>
    <S sid="96" ssid="32">Moreover, 2.5% of all constituents with functional labels (246 out of 9928 in section 23) are not maximal projections.</S>
    <S sid="97" ssid="33">Since our method ignores functional tags of such constituents (these tags disappear after the conversion of phrase structures to dependency graphs), we consider them as errors, i.e., reducing our recall value.</S>
    <S sid="98" ssid="34">Below, the tagging accuracy, precision and recall are evaluated on constituents correctly identified by Charniak&#8217;s parser for section 23.</S>
    <S sid="99" ssid="35">Method Accuracy P R f Blaheta 98.6 87.2 87.4 87.3 This paper 94.7 90.2 86.9 88.5 The difference in the accuracy is due to two reasons.</S>
    <S sid="100" ssid="36">First, because of the different definition of a correctly identified constituent in the parser&#8217;s output, we apply our method to a greater portion of all labels produced by the parser (95% vs. 89% reported in (Blaheta and Charniak, 2000)).</S>
    <S sid="101" ssid="37">This might make the task for out system more difficult.</S>
    <S sid="102" ssid="38">And second, whereas 22% of all constituents in section 23 have a functional tag, 36% of the maximal projections have one.</S>
    <S sid="103" ssid="39">Since we apply our method only to labels of maximal projections, this means that our accuracy baseline (i.e., never assign any tag) is lower.</S>
  </SECTION>
  <SECTION title="7 Step 2: Adding Missing Nodes" number="7">
    <S sid="104" ssid="1">As the row labelled &#8220;step 1&#8221; in Table 1 indicates, for both parsers the recall is relatively low (6% lower than the precision): while the WSJ trees, and hence the derived dependency structures, contain non-local dependencies and empty nodes, the parsers simply do not provide this information.</S>
    <S sid="105" ssid="2">To make up for this, we considered two further tranformations of the output of the parsers: adding new nodes (corresponding to empty nodes in WSJ), and adding new labelled arcs.</S>
    <S sid="106" ssid="3">This section describes the former modification and Section 8 the latter.</S>
    <S sid="107" ssid="4">As described in Section 4, when converting WSJ trees to dependency structures, traces are resolved, their empty nodes removed and new dependencies introduced.</S>
    <S sid="108" ssid="5">Of the remaining empty nodes (i.e., non-traces), the most frequent in WSJ are: NP PRO, empty units, empty complementizers, empty relative pronouns.</S>
    <S sid="109" ssid="6">To add missing empty nodes to dependency graphs, we compared the output of the parsers on the strings of the training corpus after steps 0 and 1 (conversion to dependencies and relabelling) to the structures in the corpus itself.</S>
    <S sid="110" ssid="7">We trained a classifier which, for every word in the parser&#8217;s output, had to decide whether an empty node should be added as a new dependent of the word, and what its symbol (&#8216;*&#8217;, &#8216;*U*&#8217; or &#8216;0&#8217; in WSJ), POS tag (always -NONE- in WSJ) and the label of the new dependency (e.g., &#8216;SNP-SBJ&#8217; for NP PRO and &#8216;VPSBAR&#8217; for empty complementizers) should be.</S>
    <S sid="111" ssid="8">This decision is conditioned on the word itself and its context.</S>
    <S sid="112" ssid="9">The features used were: the word and its POS tag, whether the word has any subject and object dependents, and whether it is the head of a finite verb group; the same information for the word&#8217;s head (if any) and also the label of the corresponding dependency; the same information for the rightmost and leftmost dependents of the word (if exist) along with their dependency labels.</S>
    <S sid="113" ssid="10">In total, we extracted 23 symbolic features for every word in the corpus.</S>
    <S sid="114" ssid="11">TiMBL was trained on sections 02&#8211;21 and applied to the output of the parsers (after steps 0 and 1) on the test corpus (section 23), producing a list of empty nodes to be inserted in the dependency graphs.</S>
    <S sid="115" ssid="12">After insertion of the empty nodes, the resulting structures were evaluated against section 23 of the gold dependency treebank.</S>
    <S sid="116" ssid="13">The results are shown in Table 1 (the row &#8220;step 2&#8221;).</S>
    <S sid="117" ssid="14">For both parsers the insertion of empty nodes improves the recall by 1.5%, resulting in a 1% increase of the f-score.</S>
    <S sid="118" ssid="15">A procedure for empty node recovery was first described in (Johnson, 2002), along with an evaluation criterion: an empty node is correct if its category and position in the sentence are correct.</S>
    <S sid="119" ssid="16">Since our method works with dependency structures, not phrase trees, we adopt a different but comparable criterion: an empty node should be attached as a dependent to the correct word, and with the correct dependency label.</S>
    <S sid="120" ssid="17">Unlike the first metric, our correctness criterion also requires that possible attachment ambiguities are resolved correctly (e.g., as in the number of reports 0 they sent, where the empty relative pronoun may be attached either to number or to reports).</S>
    <S sid="121" ssid="18">For this task, the best published results (using Johnson&#8217;s metric) were reported by Dienes and Dubey (2003), who used shallow tagging to insert empty elements.</S>
    <S sid="122" ssid="19">Below we give the comparison to our method.</S>
    <S sid="123" ssid="20">Notice that this evaluation does not include traces (i.e., empty elements with antecedents): recovery of traces is described in Section 8.</S>
    <S sid="124" ssid="21">For comparison we use the notation of Dienes and Dubey: PRO-NP for uncontrolled PROs (nodes &#8216;*&#8217; in the WSJ), COMP-SBAR for empty complementizers (nodes &#8216;0&#8217; with dependency label VPSBAR), COMP-WHNP for empty relative pronouns (nodes &#8216;0&#8217; with dependency label XSBAR, where X VP) and UNIT for empty units (nodes &#8216;*U*&#8217;).</S>
    <S sid="125" ssid="22">It is interesting to see that for empty nodes except for UNIT both methods have their advantages, showing better precision or better recall.</S>
    <S sid="126" ssid="23">Yet shallow tagging clearly performs better for UNIT.</S>
  </SECTION>
  <SECTION title="8 Step 3: Adding Missing Dependencies" number="8">
    <S sid="127" ssid="1">We now get to the third and final step of our transformation method: adding missing arcs to dependency graphs.</S>
    <S sid="128" ssid="2">The parsers we considered do not explicitly provide information about non-local dependencies (control, WH-extraction) present in the treebank.</S>
    <S sid="129" ssid="3">Moreover, newly inserted empty nodes (step 2, Section 7) might also need more links to the rest of a sentence (e.g., the inserted empty complementizers).</S>
    <S sid="130" ssid="4">In this section we describe the insertion of missing dependencies.</S>
    <S sid="131" ssid="5">Johnson (2002) was the first to address recovery of non-local dependencies in a parser&#8217;s output.</S>
    <S sid="132" ssid="6">He proposed a pattern-matching algorithm: first, from the training corpus the patterns that license nonlocal dependencies are extracted, and then these patterns are detected in unseen trees, dependencies being added when matches are found.</S>
    <S sid="133" ssid="7">Building on these ideas, Jijkoun (2003) used a machine learning classifier to detect matches.</S>
    <S sid="134" ssid="8">We extended Jijkoun&#8217;s approach by providing the classifier with lexical information and using richer patterns with labels containing the Penn functional tags and empty nodes, detected at steps 1 and 2.</S>
    <S sid="135" ssid="9">First, we compared the output of the parsers on the strings of the training corpus after steps 0, 1 and 2 to the dependency structures in the training corpus.</S>
    <S sid="136" ssid="10">For every dependency that is missing in the parser&#8217;s output, we find the shortest undirected path in the dependency graph connecting the head and the dependent.</S>
    <S sid="137" ssid="11">These paths, connected sequences of labelled dependencies, define the set of possible patterns.</S>
    <S sid="138" ssid="12">For our experiments we only considered patterns occuring more than 100 times in the training corpus.</S>
    <S sid="139" ssid="13">E.g., for Collins&#8217; parser, 67 different patterns were found.</S>
    <S sid="140" ssid="14">Next, from the parsers&#8217; output on the strings of the training corpus, we extracted all occurrences of the patterns, along with information about the nodes involved.</S>
    <S sid="141" ssid="15">For every node in an occurrence of a pattern we extracted the following features: the word and its POS tag; whether the word has subject and object dependents; whether the word is the head of a finite verb cluster.</S>
    <S sid="142" ssid="16">Type We then trained TiMBL to predict the label of the missing dependency (or &#8216;none&#8217;), given an occurrence of a pattern and the features of all the nodes involved.</S>
    <S sid="143" ssid="17">We trained a separate classifier for each pattern.</S>
    <S sid="144" ssid="18">For evaluation purposes we extracted all occurrences of the patterns and the features of their nodes from the parsers&#8217; outputs for section 23 after steps 0, 1 and 2 and used TiMBL to predict and insert new dependencies.</S>
    <S sid="145" ssid="19">Then we compared the resulting dependency structures to the gold corpus.</S>
    <S sid="146" ssid="20">The results are shown in Table 1 (the row &#8220;step 3&#8221;).</S>
    <S sid="147" ssid="21">As expected, adding missing dependencies substantially improves the recall (by 4% for both parsers) and allows both parsers to achieve an 84% f-score on dependencies with functional tags (90% on unlabelled dependencies).</S>
    <S sid="148" ssid="22">The unlabelled f-score 89.9% for Collins&#8217; parser is close to the 90.9% reported in (Collins, 1999) for the evaluation on unlabelled local dependencies only (without empty nodes and traces).</S>
    <S sid="149" ssid="23">Since as many as 5% of all dependencies in WSJ involve traces or empty nodes, the results in Table 1 are encouraging.</S>
    <S sid="150" ssid="24">Recently, several methods for the recovery of nonlocal dependencies have been described in the literature.</S>
    <S sid="151" ssid="25">Johnson (2002) and Jijkoun (2003) used pattern-matching on local phrase or dependency structures.</S>
    <S sid="152" ssid="26">Dienes and Dubey (2003) used shallow preprocessing to insert empty elements in raw sentences, making the parser itself capable of finding non-local dependencies.</S>
    <S sid="153" ssid="27">Their method achieves a considerable improvement over the results reported in (Johnson, 2002) and gives the best evaluation results published to date.</S>
    <S sid="154" ssid="28">To compare our results to Dienes and Dubey&#8217;s, we carried out the transformation steps 0&#8211;3 described above, with a single modification: when adding missing dependencies (step 3), we only considered patterns that introduce nonlocal dependencies (i.e., traces: we kept the information whether a dependency is a trace when converting WSJ to a dependency corpus).</S>
    <S sid="155" ssid="29">As before, a dependency is correctly found if its head, dependent, and label are correct.</S>
    <S sid="156" ssid="30">For traces, this corresponds to the evaluation using the head-based antecedent representation described in (Johnson, 2002), and for empty nodes without antecedents (e.g., NP PRO) this is the measure used in Section 7.1.</S>
    <S sid="157" ssid="31">To make the results comparable to other methods, we strip functional tags from the dependency labels before label comparison.</S>
    <S sid="158" ssid="32">Below are the overall precision, recall, and f-score for our method and the scores reported in (Dienes and Dubey, 2003) for antecedent recovery using Collins&#8217; parser.</S>
    <S sid="159" ssid="33">Interestingly, the overall performance of our postprocessing method is very similar to that of the pre- and in-processing methods of Dienes and Dubey (2003).</S>
    <S sid="160" ssid="34">Hence, for most cases, traces and empty nodes can be reliably identified using only local information provided by a parser, using the parser itself as a black box.</S>
    <S sid="161" ssid="35">This is important, since making parsers aware of non-local relations need not improve the overall performance: Dienes and Dubey (2003) report a decrease in PARSEVAL fscore from 88.2% to 86.4% after modifying Collins&#8217; parser to resolve traces internally, although this allowed them to achieve high accuracy for traces.</S>
  </SECTION>
  <SECTION title="9 Discussion" number="9">
    <S sid="162" ssid="1">The experiments described in the previous sections indicate that although statistical parsers do not explicitly output some information available in the corpus they were trained on (grammatical and semantic tags, empty nodes, non-local dependencies), this information can be recovered with reasonably high accuracy, using pattern matching and machine learning methods.</S>
    <S sid="163" ssid="2">For our task, using dependency structures rather than phrase trees has several advantages.</S>
    <S sid="164" ssid="3">First, after converting both the treebank trees and parsers&#8217; outputs to graphs with head&#8211;modifier relations, our method needs very little information about the linguistic nature of the data, and thus is largely corpusand parser-independent.</S>
    <S sid="165" ssid="4">Indeed, after the conversion, the only linguistically informed operation is the straightforward extraction of features indicating the presence of subject and object dependents, and finiteness of verb groups.</S>
    <S sid="166" ssid="5">Second, using a dependency formalism facilitates a very straightforward evaluation of the systems that produce structures more complex than trees.</S>
    <S sid="167" ssid="6">It is not clear whether the PARSEVAL evaluation can be easily extended to take non-local relations into account (see (Johnson, 2002) for examples of such extension).</S>
    <S sid="168" ssid="7">Finally, the independence from the details of the parser and the corpus suggests that our method can be applied to systems based on other formalisms, e.g., (Hockenmaier, 2003), to allow a meaningful dependency-based comparison of very different parsers.</S>
    <S sid="169" ssid="8">Furthermore, with the fine-grained set of dependency labels that our system provides, it is possible to map the resulting structures to other dependency formalisms, either automatically in case annotated corpora exist, or with a manually developed set of rules.</S>
    <S sid="170" ssid="9">Our preliminary experiments with Collins&#8217; parser and the corpus annotated with grammatical relations (Carroll et al., 2003) are promising: the system achieves 76% precision/recall fscore, after the parser&#8217;s output is enriched with our method and transformed to grammatical relations using a set of 40 simple rules.</S>
    <S sid="171" ssid="10">This is very close to the performance reported by Carroll et al. (2003) for the parser specifically designed for the extraction of grammatical relations.</S>
    <S sid="172" ssid="11">Despite the high-dimensional feature spaces, the large number of lexical features, and the lack of independence between features, we achieved high accuracy using a memory-based learner.</S>
    <S sid="173" ssid="12">TiMBL performed well on tasks where structured, more complicated and task-specific statistical models have been used previously (Blaheta and Charniak, 2000).</S>
    <S sid="174" ssid="13">For all subtasks we used the same settings for TiMBL: simple feature overlap measure, 5 nearest neighbours with majority voting.</S>
    <S sid="175" ssid="14">During further experiments with our method on different corpora, we found that quite different settings led to a better performance.</S>
    <S sid="176" ssid="15">It is clear that more careful and systematic parameter tuning and the analysis of the contribution of different features have to be addressed.</S>
    <S sid="177" ssid="16">Finally, our method is not restricted to syntactic structures.</S>
    <S sid="178" ssid="17">It has been successfully applied to the identification of semantic relations (Ahn et al., 2004), using FrameNet as the training corpus.</S>
    <S sid="179" ssid="18">For this task, we viewed semantic relations (e.g., Speaker, Topic, Addressee) as dependencies between a predicate and its arguments.</S>
    <S sid="180" ssid="19">Adding such semantic relations to syntactic dependency graphs was simply an additional graph transformation step.</S>
  </SECTION>
  <SECTION title="10 Conclusions" number="10">
    <S sid="181" ssid="1">We presented a method to automatically enrich the output of a parser with information that is not provided by the parser itself, but is available in a treebank.</S>
    <S sid="182" ssid="2">Using the method with two state of the art statistical parsers and the Penn Treebank allowed us to recover functional tags (grammatical and semantic), empty nodes and traces.</S>
    <S sid="183" ssid="3">Thus, we are able to provide virtually all information available in the corpus, without modifying the parser, viewing it, indeed, as a black box.</S>
    <S sid="184" ssid="4">Our method allows us to perform a meaningful dependency-based comparison of phrase structure parsers.</S>
    <S sid="185" ssid="5">The evaluation on a dependency corpus derived from the Penn Treebank showed that, after our post-processing, two state of the art statistical parsers achieve 84% accuracy on a fine-grained set of dependency labels.</S>
    <S sid="186" ssid="6">Finally, our method for enriching the output of a parser is, to a large extent, independent of a specific parser and corpus, and can be used with other syntactic and semantic resources.</S>
  </SECTION>
  <SECTION title="11 Acknowledgements" number="11">
    <S sid="187" ssid="1">We are grateful to David Ahn and Stefan Schlobach and to the anonymous referees for their useful suggestions.</S>
    <S sid="188" ssid="2">This research was supported by grants from the Netherlands Organization for Scientific Research (NWO) under project numbers 22080-001, 365-20-005, 612.069.006, 612.000.106, 612.000.207 and 612.066.302.</S>
  </SECTION>
</PAPER>
