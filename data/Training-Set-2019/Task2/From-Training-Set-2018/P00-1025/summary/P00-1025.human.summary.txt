The author describes a new technique for constructing finite- state transducers that involves reapplying the regular-expression compiler to its own output. Regular-expression descriptions are compiled into finite-state automata or transducers as usual, and then the compiler is re-applied to its own output, producing a modified but still finite- state network. The technique, implemented in an algorithm called compile-replace, has already proved useful for handling Malay full- stem reduplication and Arabic stem interdigitation. If the relation is finite-state, then it can be defined using the metalanguage of regular expressions; and, with a suitable compiler, the regular expression source code can be compiled into a finite-state transducer (FST). The application of the compile-replace algorithm to the lower side of the network eliminates the markers, compiles the regular expression a* and maps the upper side of the path to the language resulting from the compilation. The compile-replace algorithm is essentially a variant of a simple recursive-descent copying routine. Traditional Two-Level implementations are already capable of describing some limited reduplication and infixation as in Tagalog. The merge algorithm is a pattern-filling operation that combines two regular languages, a template and filler, into a single one. Work remains to be done in applying the technique to other known varieties of non-concatenative morphotactics. The compile-replace algorithm and the merge operator introduced in this paper are general techniques which are not limited to handling the specific morphotactic problems have been discussed. The author expects that they will have many other useful applications. 