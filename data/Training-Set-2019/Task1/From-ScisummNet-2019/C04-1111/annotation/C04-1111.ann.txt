Citance Number: 1 | Reference Article:  C04-1111.txt | Citing Article:  P06-1015.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Pantel et al (2004) proposed a similar, highly scalable approach, based on an edit-distance technique, to learn lexico-POS patterns, showing both good performance and efficiency.</S> | Reference Offset:  ['38','87'] | Reference Text:  <S sid = 38 ssid = >We learn lexico-POS patterns in an automatic way.</S><S sid = 87 ssid = >We propose an algorithm for learning highly scalable lexico-POS patterns.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 2 | Reference Article:  C04-1111.txt | Citing Article:  P06-1015.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = ></S> | Reference Offset:  ['68','219'] | Reference Text:  <S sid = 68 ssid = >Approximate processing time on a single Pentium-4 2.5 GHz machine.</S><S sid = 219 ssid = >Our biggest challenge as we venture to the terascale is to use our new found wealth not only to build better systems, but to im prove our understanding of language.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 3 | Reference Article:  C04-1111.txt | Citing Article:  W09-0805.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Patterns have been shown to produce more accurate results than feature vectors, at a lower computational cost on large corpora (Pantel et al, 2004).</S> | Reference Offset:  ['24','105'] | Reference Text:  <S sid = 24 ssid = >We will show that, for very small or very large corpora or for situations where recall is valued over precision, the pattern-based approach is best.</S><S sid = 105 ssid = >Algorithm for calculating the minimal edit distance between two strings D[0,0]=0 for i = 1 to n do D[i,0] = D[i-1,0] + cost(insertion) for j = 1 to m do D[0,j] = D[0,j-1] + cost(deletion) for i = 1 to n do for j = 1 to m do D[i,j] = min( D[i-1,j-1] + cost(substitution), D[i-1,j] + cost(insertion), D[i,j-1] + cost(deletion)) Print (D[n,m]) Algorithm for optimal pattern retrieval i = n, j = m; while i ? 0 and j ? 0 if D[i,j] = D[i-1,j] + cost(insertion) print (*s*), i = i-1 else if D[i,j] = D[i,j-1] + cost(deletion) print(*s*), j = j-1 else if a1i = b1j print (a1i), i = i -1, j = j =1 else if a2i = b2j print (a2i), i = i -1, j = j =1 else print (*g*), i = i -1, j = j =1 We experimentally set (by trial and error): cost(insertion) = 3 cost(deletion) = 3 cost(substitution) = 0 if a1i=b1j = 1 if a1i?b1j, a2i=b2j = 2 if a1i?b1j, a2i?b2j 4.2 Implementation and filtering.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 4 | Reference Article:  C04-1111.txt | Citing Article:  W09-1122.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Lately there has been a lot of interest in acquiring such text patterns using a set of hypernymy examples ,e.g. Pantel et al (2004) and Snow (2006).</S> | Reference Offset:  ['32','35'] | Reference Text:  <S sid = 32 ssid = >771Riloff and Shepherd (1997) used a semi automatic method for discovering similar words using a few seed examples by using pattern-based techniques and human supervision.</S><S sid = 35 ssid = >Girju et al (2003) improved upon Berland and Charniak's work using a machine learning filter.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 5 | Reference Article:  C04-1111.txt | Citing Article:  P08-1077.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >However, following Pantel et al (2004), we assume that the recall of the baseline is 1 and estimate the relative recall RRS|B of the system S with respect to the baseline B using their respective precision scores PS and PB and number of instances extracted by them |S| and |B| as: RRS|B= PS? |S|PB? |B| 6.3 Gold Standard.</S> | Reference Offset:  ['163','174'] | Reference Text:  <S sid = 163 ssid = >5.3 Recall.</S><S sid = 174 ssid = >5.3.1 Relative recall Although it is impossible to know the number of is-a relationships in any non-trivial corpus, it is possible to compute the recall of a system relative to another system?s recall.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 6 | Reference Article:  C04-1111.txt | Citing Article:  E09-1021.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Patterns have been shown to produce more accurate results than feature vectors, at a lower computational cost on large corpora (Pantel et al,2004).</S> | Reference Offset:  ['24','105'] | Reference Text:  <S sid = 24 ssid = >We will show that, for very small or very large corpora or for situations where recall is valued over precision, the pattern-based approach is best.</S><S sid = 105 ssid = >Algorithm for calculating the minimal edit distance between two strings D[0,0]=0 for i = 1 to n do D[i,0] = D[i-1,0] + cost(insertion) for j = 1 to m do D[0,j] = D[0,j-1] + cost(deletion) for i = 1 to n do for j = 1 to m do D[i,j] = min( D[i-1,j-1] + cost(substitution), D[i-1,j] + cost(insertion), D[i,j-1] + cost(deletion)) Print (D[n,m]) Algorithm for optimal pattern retrieval i = n, j = m; while i ? 0 and j ? 0 if D[i,j] = D[i-1,j] + cost(insertion) print (*s*), i = i-1 else if D[i,j] = D[i,j-1] + cost(deletion) print(*s*), j = j-1 else if a1i = b1j print (a1i), i = i -1, j = j =1 else if a2i = b2j print (a2i), i = i -1, j = j =1 else print (*g*), i = i -1, j = j =1 We experimentally set (by trial and error): cost(insertion) = 3 cost(deletion) = 3 cost(substitution) = 0 if a1i=b1j = 1 if a1i?b1j, a2i=b2j = 2 if a1i?b1j, a2i?b2j 4.2 Implementation and filtering.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 7 | Reference Article:  C04-1111.txt | Citing Article:  P06-3011.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >KAON Text-To-Onto (Maedche and Staab, 2004) applies text mining algorithms for English and German texts to semi-automatically create an ontology, which includes algorithms for term extraction, for concept association extraction and for ontology pruning. Pattern-based approaches to extract hy ponym/hypernym relationships range from hand-crafted lexico-syntactic patterns (Hearst, 1992) to the automatic discovery of such patterns by e.g. a minimal edit distance algorithm (Pantel et al, 2004).</S> | Reference Offset:  ['26','31'] | Reference Text:  <S sid = 26 ssid = >2.1 Pattern-based approaches.</S><S sid = 31 ssid = >She uses seed examples to manually discover her patterns whearas we use a minimal edit distance algorithm to automatically discover the patterns.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 8 | Reference Article:  C04-1111.txt | Citing Article:  P09-1031.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Pantel et al (2004) extended is-a relation acquisition towards terascale, and automatically identified hypernym patterns by minimal edit distance.</S> | Reference Offset:  ['0','31'] | Reference Text:  <S sid = 0 ssid = >Towards Terascale Semantic Acquisition</S><S sid = 31 ssid = >She uses seed examples to manually discover her patterns whearas we use a minimal edit distance algorithm to automatically discover the patterns.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 9 | Reference Article:  C04-1111.txt | Citing Article:  P08-1027.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Many relationship classification methods utilize some language-dependent preprocessing, like deep or shallow parsing, part of speech tagging and 228 named entity annotation (Pantel et al, 2004).</S> | Reference Offset:  ['11','50'] | Reference Text:  <S sid = 11 ssid = >We present an algorithm for extracting is-a relations, designed for the terascale, and compare it to a state of the art method that employs deep analysis of text (Pantel and Ravichandran 2004).</S><S sid = 50 ssid = >Our co-occurrence model (Pantel and Ravichandran 2004) makes use of semantic classes like those generated by CBC.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 10 | Reference Article:  C04-1111.txt | Citing Article:  W06-0502.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Useful semantic relations can be extracted from large corpora using relatively simple patterns (e.g., (Pantel et al, 2004)).</S> | Reference Offset:  ['116','216'] | Reference Text:  <S sid = 116 ssid = >From the Information Extraction point of view neither of these patterns is very useful.</S><S sid = 216 ssid = >This paper compares and contrasts two methods for extracting is-a relations from corpora.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 11 | Reference Article:  C04-1111.txt | Citing Article:  D09-1089.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Patterns have been shown to produce more accurate results than feature vectors, at a lower computational cost on large corpora (Pantel et al, 2004).</S> | Reference Offset:  ['24','105'] | Reference Text:  <S sid = 24 ssid = >We will show that, for very small or very large corpora or for situations where recall is valued over precision, the pattern-based approach is best.</S><S sid = 105 ssid = >Algorithm for calculating the minimal edit distance between two strings D[0,0]=0 for i = 1 to n do D[i,0] = D[i-1,0] + cost(insertion) for j = 1 to m do D[0,j] = D[0,j-1] + cost(deletion) for i = 1 to n do for j = 1 to m do D[i,j] = min( D[i-1,j-1] + cost(substitution), D[i-1,j] + cost(insertion), D[i,j-1] + cost(deletion)) Print (D[n,m]) Algorithm for optimal pattern retrieval i = n, j = m; while i ? 0 and j ? 0 if D[i,j] = D[i-1,j] + cost(insertion) print (*s*), i = i-1 else if D[i,j] = D[i,j-1] + cost(deletion) print(*s*), j = j-1 else if a1i = b1j print (a1i), i = i -1, j = j =1 else if a2i = b2j print (a2i), i = i -1, j = j =1 else print (*g*), i = i -1, j = j =1 We experimentally set (by trial and error): cost(insertion) = 3 cost(deletion) = 3 cost(substitution) = 0 if a1i=b1j = 1 if a1i?b1j, a2i=b2j = 2 if a1i?b1j, a2i?b2j 4.2 Implementation and filtering.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 12 | Reference Article:  C04-1111.txt | Citing Article:  P06-2075.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >The patterns we used for entailment acquisition based on (Hearst, 1992) and (Pantel et al, 2004).</S> | Reference Offset:  ['30','120'] | Reference Text:  <S sid = 30 ssid = >Our pattern-based algorithm is very similar to the one used by Hearst.</S><S sid = 120 ssid = >Some of these patterns are similar to the ones discovered by Hearst (1992) while other patterns are similar to the ones used by Fleischman et al (2003).</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 13 | Reference Article:  C04-1111.txt | Citing Article:  P06-2075.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >For example, the pattern& quot; NP1 ,a|an NP2& quot;, ranked among the top IS-A pat terns by (Pantel et al, 2004), can represent both apposition (entailing) and a list of co-hyponyms (non-entailing).</S> | Reference Offset:  ['140','197'] | Reference Text:  <S sid = 140 ssid = >For example, Table 4 shows three randomly selected names for the pat tern-based system on the 15GB dataset.</S><S sid = 197 ssid = >PRECISION MRR Pat.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 14 | Reference Article:  C04-1111.txt | Citing Article:  W09-1703.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Due to the need for POS tagging and/or parsing, these types of methods have been evaluated only on fixed corpora1, although (Pantel et al, 2004) demonstrated how to scale up their algorithms for the Web.</S> | Reference Offset:  ['6','215'] | Reference Text:  <S sid = 6 ssid = >Algorithms light in linguistic theories but rich in available training data have been successfully applied to several applications such as ma chine translation (Och and Ney 2002), information extraction (Etzioni et al 2004), and question an swering (Brill et al 2001).</S><S sid = 215 ssid = >In this light, we see an interesting need to de velop fast, robust, and scalable methods to mine semantic information from the Web.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 15 | Reference Article:  C04-1111.txt | Citing Article:  C10-1112.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Pantel et al, (2004) proposed, in the scenario of extracting is-a relations, one pattern-based approach and compared it with a baseline syntactic distributional similarity method (called syntactic co-occurrence in their paper).</S> | Reference Offset:  ['48','216'] | Reference Text:  <S sid = 48 ssid = >Re cently, Pantel and Ravichandran (2004) extended this approach by making use of all syntactic de pendency features for each noun.</S><S sid = 216 ssid = >This paper compares and contrasts two methods for extracting is-a relations from corpora.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 16 | Reference Article:  C04-1111.txt | Citing Article:  D09-1028.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Patterns were shown to be very useful in all sorts of lexical acquisition tasks, giving high precision results at relatively low computational costs (Pantel et al, 2004).</S> | Reference Offset:  ['115','117'] | Reference Text:  <S sid = 115 ssid = >This is a critical step because frequently occurring patterns have low precision whereas rarely occurring patterns have high preci sion.</S><S sid = 117 ssid = >We need to find patterns with relatively high occurrence and high precision.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 17 | Reference Article:  C04-1111.txt | Citing Article:  D09-1028.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = ></S> | Reference Offset:  ['68','219'] | Reference Text:  <S sid = 68 ssid = >Approximate processing time on a single Pentium-4 2.5 GHz machine.</S><S sid = 219 ssid = >Our biggest challenge as we venture to the terascale is to use our new found wealth not only to build better systems, but to im prove our understanding of language.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 18 | Reference Article:  C04-1111.txt | Citing Article:  P06-1038.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Patterns have been shown to produce more accurate results than feature vectors, at a lower computational cost on large corpora (Pantel et al 2004).</S> | Reference Offset:  ['24','105'] | Reference Text:  <S sid = 24 ssid = >We will show that, for very small or very large corpora or for situations where recall is valued over precision, the pattern-based approach is best.</S><S sid = 105 ssid = >Algorithm for calculating the minimal edit distance between two strings D[0,0]=0 for i = 1 to n do D[i,0] = D[i-1,0] + cost(insertion) for j = 1 to m do D[0,j] = D[0,j-1] + cost(deletion) for i = 1 to n do for j = 1 to m do D[i,j] = min( D[i-1,j-1] + cost(substitution), D[i-1,j] + cost(insertion), D[i,j-1] + cost(deletion)) Print (D[n,m]) Algorithm for optimal pattern retrieval i = n, j = m; while i ? 0 and j ? 0 if D[i,j] = D[i-1,j] + cost(insertion) print (*s*), i = i-1 else if D[i,j] = D[i,j-1] + cost(deletion) print(*s*), j = j-1 else if a1i = b1j print (a1i), i = i -1, j = j =1 else if a2i = b2j print (a2i), i = i -1, j = j =1 else print (*g*), i = i -1, j = j =1 We experimentally set (by trial and error): cost(insertion) = 3 cost(deletion) = 3 cost(substitution) = 0 if a1i=b1j = 1 if a1i?b1j, a2i=b2j = 2 if a1i?b1j, a2i?b2j 4.2 Implementation and filtering.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 19 | Reference Article:  C04-1111.txt | Citing Article:  P06-1038.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >(Pantel et al 2004) reduce the depth of the linguistic data used but still requires POS tagging. Many papers directly target specific applications, and build lexical resources as a side effect. Named Entity Recognition can be viewed as an in stance of our problem where the desired categories contain words that are names of entities of a particular kind, as done in (Freitag, 2004) using co clustering.</S> | Reference Offset:  ['6','47'] | Reference Text:  <S sid = 6 ssid = >Algorithms light in linguistic theories but rich in available training data have been successfully applied to several applications such as ma chine translation (Och and Ney 2002), information extraction (Etzioni et al 2004), and question an swering (Brill et al 2001).</S><S sid = 47 ssid = >Caraballo (1999) was the first to use clustering for labeling is-a relations using conjunction and apposition features to build noun clusters.</S> | Discourse Facet:  NA | Annotator: Automatic


Citance Number: 20 | Reference Article:  C04-1111.txt | Citing Article:  P06-1038.txt | Citation Marker Offset:  NA | Citation Marker: NA | Citation Offset: NA | Citation Text:  <S sid =  ssid = >Note how small they are, when compared to (Pantel et al 2004), which took 4 days for a smaller corpus using the same CPU.</S> | Reference Offset:  ['69','162'] | Reference Text:  <S sid = 69 ssid = >TOOL 15 GB ORPUS 1 TB CORPUS POS Tagger 2 days 125 days NP Chunker 3 days 214 days Dependency Parser 56 days 10.2 years Syntactic Parser 5.8 years 388.4 years 772 where n is the number of elements to be clustered, cef is the frequency count of word e in grammatical context f, and N is the total frequency count of all features of all words.</S><S sid = 162 ssid = >On the 6 GB corpus, the co-occurrence approach took approximately 47 single Pentium-4 2.5 GHz processor days to complete, whereas it took the pattern-based approach only four days to complete on 6 GB and 10 days on 15 GB.</S> | Discourse Facet:  NA | Annotator: Automatic


