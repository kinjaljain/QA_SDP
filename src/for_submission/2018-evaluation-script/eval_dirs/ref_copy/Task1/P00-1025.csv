Citance Number,Reference Article,Citing Article,Citation Marker Offset,Citation Marker,Citation Offset,Citation Text,Citation Text Clean,Reference Offset,Reference Text,Discourse Facet
1,P00-1025,J06-1004,'104',"Beesley and Karttunen,2000",'104',dummy,dummy,['29'],"<S sid =""29"" ssid = ""12"">If the relation is finite-state, then it can be defined using the metalanguage of regular expressions; and, with a suitable compiler, the regular expression source code can be compiled into a finite-state transducer (fst), as shown in Figure 4, that implements the relation computationally.</S>",['methodcitation']
2,P00-1025,P55-62,'52',7.0,'52',dummy,dummy,['123'],"<S sid =""123"" ssid = ""50"">This insight of Kataja and Koskenniemi was applied by Beesley in a large-scale morphological analyzer for Arabic, first using an implementation that simulated the intersection of stems in code at runtime (Beesley, 1989; Beesley et al., 1989; Beesley, 1990; Beesley, 1991), and ran rather slowly; and later, using Xerox finite-state technology (Beesley, 1996; Beesley, 1998a), a new implementation that intersected the stems at compile time and performed well at runtime.</S>",['methodcitation']
3,P00-1025,P9852-P00,"'200','201'","Beesley and Karttunen,2000","'200', '201'",dummy,dummy,['203'],"<S sid =""203"" ssid = ""130"">Significant experiments with Malay and a much larger application in Arabic have shown the value of this technique in handling two classic examples of non-concatenative morphotactics",['methodcitation']
5,P00-1025,PE2006-P00,'104',"Beesley and Karttunen,2000",'104',dummy,dummy,['62'],"<S sid =""62"" ssid = ""2"">The compile- replace algorithm then reapplies the regular- expression compiler to its own output, compiling the regular-expression substrings in the intermediate network and replacing them with the result of the compilation.</S>",['methodcitation']
6,P00-1025,PLEX-P00,'31',"Beesley and Karttunen,2000",'31',dummy,dummy,['119'],"<S sid =""119"" ssid = ""46"">In work more directly related to the current solution, it was Kataja and Koskenniemi (1988) who first demonstrated that Semitic (Akkadian) roots and patterns5 could be formalized as regular languages, and that the non-concatenative interdigitation of stems could be elegantly formalized as the intersection of those regular languages.</S>",['resultcitation']
7,P00-1025,PLEX-P00,'32',"Beesley and Karttunen,2000",'32',dummy,dummy,['16'],"<S sid =""16"" ssid = ""16"">This technique, implemented in an algorithm called compile-replace, has already proved useful for handling Malay full- stem reduplication and Arabic stem interdigitation, which will be described below.</S>",['methodcitation']
8,P00-1025,PMORPH-P00,'67',Beesley and Karttunen,'67',dummy,dummy,['96'],"<S sid =""96"" ssid = ""23"">In the regular expression calculus there are several operators that involve concatenation.</S>",['methodcitation']
10,P00-1025,PSTAT-P00,'86',"Beesley and Karttunen,2000",'86',dummy,dummy,['131'],"<S sid =""131"" ssid = ""58"">3.2.2 Merge The merge algorithm is a pattern-filling operation that combines two regular languages, a template and a filler, into a single one.</S>",['methodcitation']
11,P00-1025,W02-0503,'17',"Beesley and Karttunen,2000",'17',dummy,dummy,['202'],"<S sid =""202"" ssid = ""129"">The technique described here, implemented in the compile-replace algorithm, allows the regular-expression compiler to reapply to and modify its own output, effectively freeing morphotactic description to use any finite-state operation.</S>",['methodcitation']
12,P00-1025,W07-0802,'134',"Beesley and Karttunen,2000",'134',dummy,dummy,['123'],"<S sid =""123"" ssid = ""50"">This insight of Kataja and Koskenniemi was applied by Beesley in a large-scale morphological analyzer for Arabic, first using an implementation that simulated the intersection of stems in code at runtime (Beesley, 1989; Beesley et al., 1989; Beesley, 1990; Beesley, 1991), and ran rather slowly; and later, using Xerox finite-state technology (Beesley, 1996; Beesley, 1998a), a new implementation that intersected the stems at compile time and performed well at runtime.</S>",['methodcitation']
13,P00-1025,W08-0703,'15',"Beesley and Karttunen,2000",'15',dummy,dummy,['50'],"<S sid =""50"" ssid = ""33"">All the finite-state operations (concatenation, union, intersection, composition, etc.) can be simulated by an apply routine at runtime.</S>",['methodcitation']
14,P00-1025,W09-0802,'207',"Beesley and Karttunen,2000",'207',dummy,dummy,['205'],"<S sid =""205"" ssid = ""132"">The compile-replace algorithm and the merge operator introduced in this paper are general techniques not limited to handling the specific</S>",['methodcitation']
