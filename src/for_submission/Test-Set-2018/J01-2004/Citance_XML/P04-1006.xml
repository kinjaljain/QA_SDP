<PAPER>
  <S sid="0">Attention Shifting For Parsing Speech</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We present a technique that improves the efficiency of word-lattice parsing as used in speech recognition language modeling.</S>
    <S sid="2" ssid="2">Our technique applies a probabilistic parser iteratively where on each iteration it focuses on a different subset of the wordlattice.</S>
    <S sid="3" ssid="3">The parser&#8217;s attention is shifted towards word-lattice subsets for which there are few or no syntactic analyses posited.</S>
    <S sid="4" ssid="4">This attention-shifting technique provides a six-times increase in speed (measured as the number of parser analyses evaluated) while performing equivalently when used as the first-stage of a multi-stage parsing-based language model.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">Success in language modeling has been dominated by the linear n-gram for the past few decades.</S>
    <S sid="6" ssid="2">A number of syntactic language models have proven to be competitive with the n-gram and better than the most popular n-gram, the trigram (Roark, 2001; Xu et al., 2002; Charniak, 2001; Hall and Johnson, 2003).</S>
    <S sid="7" ssid="3">Language modeling for speech could well be the first real problem for which syntactic techniques are useful.</S>
    <S sid="8" ssid="4">One reason that we expect syntactic models to perform well is that they are capable of modeling long-distance dependencies that simple n-gram &#8727; This research was supported in part by NSF grants 9870676 and 0085940. models cannot.</S>
    <S sid="9" ssid="5">For example, the model presented by Chelba and Jelinek (Chelba and Jelinek, 1998; Xu et al., 2002) uses syntactic structure to identify lexical items in the left-context which are then modeled as an n-gram process.</S>
    <S sid="10" ssid="6">The model presented by Charniak (Charniak, 2001) identifies both syntactic structural and lexical dependencies that aid in language modeling.</S>
    <S sid="11" ssid="7">While there are n-gram models that attempt to extend the left-context window through the use of caching and skip models (Goodman, 2001), we believe that linguistically motivated models, such as these lexical-syntactic models, are more robust.</S>
    <S sid="12" ssid="8">Figure 1 presents a simple example to illustrate the nature of long-distance dependencies.</S>
    <S sid="13" ssid="9">Using a syntactic model such as the the Structured Language Model (Chelba and Jelinek, 1998), we predict the word fork given the context {ate, with} where a trigram model uses the context {with, a}.</S>
    <S sid="14" ssid="10">Consider the problem of disambiguating between ... plate with a fork and ... plate with effort.</S>
    <S sid="15" ssid="11">The syntactic model captures the semantic relationship between the words ate and fork.</S>
    <S sid="16" ssid="12">The syntactic structure allows us to find lexical contexts for which there is some semantic relationship (e.g., predicateargument).</S>
    <S sid="17" ssid="13">Unfortunately, syntactic language modeling techniques have proven to be extremely expensive in terms of computational effort.</S>
    <S sid="18" ssid="14">Many employ the use of string parsers; in order to utilize such techniques for language modeling one must preselect a set of strings from the word-lattice and parse each of them separately, an inherently inefficient procedure.</S>
    <S sid="19" ssid="15">Of the techniques that can process word-lattices directly, it takes significant computation to achieve the same levels of accuracy as the n&#8211;best reranking method.</S>
    <S sid="20" ssid="16">This computational cost is the result of increasing the search space evaluated with the syntactic model (parser); the larger space resulting from combining the search for syntactic structure with the search for paths in the word-lattice.</S>
    <S sid="21" ssid="17">In this paper we propose a variation of a probabilistic word-lattice parsing technique that increases efficiency while incurring no loss of language modeling performance (measured as Word Error Rate &#8211; WER).</S>
    <S sid="22" ssid="18">In (Hall and Johnson, 2003) we presented a modular lattice parsing process that operates in two stages.</S>
    <S sid="23" ssid="19">The first stage is a PCFG word-lattice parser that generates a set of candidate parses over strings in a word-lattice, while the second stage rescores these candidate edges using a lexicalized syntactic language model (Charniak, 2001).</S>
    <S sid="24" ssid="20">Under this paradigm, the first stage is not only responsible for selecting candidate parses, but also for selecting paths in the word-lattice.</S>
    <S sid="25" ssid="21">Due to computational and memory requirements of the lexicalized model, the second stage parser is capable of rescoring only a small subset of all parser analyses.</S>
    <S sid="26" ssid="22">For this reason, the PCFG prunes the set of parser analyses, thereby indirectly pruning paths in the word lattice.</S>
    <S sid="27" ssid="23">We propose adding a meta-process to the firststage that effectively shifts the selection of wordlattice paths to the second stage (where lexical information is available).</S>
    <S sid="28" ssid="24">We achieve this by ensuring that for each path in the word-lattice the first-stage parser posits at least one parse.</S>
  </SECTION>
  <SECTION title="2 Parsing speech word-lattices" number="2">
    <S sid="29" ssid="1">The noisy channel model for speech is presented in Equation 1, where A represents the acoustic data extracted from a speech signal, and W represents a word string.</S>
    <S sid="30" ssid="2">The acoustic model P(A|W) assigns probability mass to the acoustic data given a word string and the language model P(W) defines a distribution over word strings.</S>
    <S sid="31" ssid="3">Typically the acoustic model is broken into a series of distributions conditioned on individual words (though these are based on false independence assumptions).</S>
    <S sid="32" ssid="4">The result of the acoustic modeling process is a set of string hypotheses; each word of each hypothesis is assigned a probability by the acoustic model.</S>
    <S sid="33" ssid="5">Word-lattices are a compact representation of output of the acoustic recognizer; an example is presented in Figure 2.</S>
    <S sid="34" ssid="6">The word-lattice is a weighted directed acyclic graph where a path in the graph corresponds to a string predicted by the acoustic recognizer.</S>
    <S sid="35" ssid="7">The (sum) product of the (log) weights on the graph (the acoustic probabilities) is the probability of the acoustic data given the string.</S>
    <S sid="36" ssid="8">Typically we want to know the most likely string given the acoustic data.</S>
    <S sid="37" ssid="9">In Equation 3 we use Bayes&#8217; rule to find the optimal string given P(A|W), the acoustic model, and P(W), the language model.</S>
    <S sid="38" ssid="10">Although the language model can be used to rescore1 the word-lattice, it is typically used to select a single hypothesis.</S>
    <S sid="39" ssid="11">We focus our attention in this paper to syntactic language modeling techniques that perform complete parsing, meaning that parse trees are built upon the strings in the word-lattice.</S>
    <S sid="40" ssid="12">Much effort has been put forth in developing efficient probabilistic models for parsing strings (Caraballo and Charniak, 1998; Goldwater et al., 1998; Blaheta and Charniak, 1999; Charniak, 2000; Charniak, 2001); an obvious solution to parsing wordlattices is to use n&#8211;best list reranking.</S>
    <S sid="41" ssid="13">The n&#8211;best list reranking procedure, depicted in Figure 3, utilizes an external language model that selects a set of strings from the word-lattice.</S>
    <S sid="42" ssid="14">These strings are analyzed by the parser which computes a language model probability.</S>
    <S sid="43" ssid="15">This probability is combined 1To rescore a word-lattice, each arch is assigned a new score (probability) defined by a new model (in combination with the acoustic model). with the acoustic model probability to reranked the strings according to the joint probability P(A, W).</S>
    <S sid="44" ssid="16">There are two significant disadvantages to this approach.</S>
    <S sid="45" ssid="17">First, we are limited by the performance of the language model used to select the n&#8211;best lists.</S>
    <S sid="46" ssid="18">Usually, the trigram model is used to select n paths through the lattice generating at most n unique strings.</S>
    <S sid="47" ssid="19">The maximum performance that can be achieved is limited by the performance of this extractor model.</S>
    <S sid="48" ssid="20">Second, of the strings that are analyzed by the parser, many will share common substrings.</S>
    <S sid="49" ssid="21">Much of the work performed by the parser is duplicated for these substrings.</S>
    <S sid="50" ssid="22">This second point is the primary motivation behind parsing word-lattices (Hall and Johnson, 2003).</S>
    <S sid="51" ssid="23">In Figure 4 we present the general overview of a multi-stage parsing technique (Goodman, 1997; Charniak, 2000; Charniak, 2001).</S>
    <S sid="52" ssid="24">This process is know as coarse-to-fine modeling, where coarse models are more efficient but less accurate than fine models, which are robust but computationally expensive.</S>
    <S sid="53" ssid="25">In this particular parsing model a PCFG best-first parser (Bobrow, 1990; Caraballo and Charniak, 1998) is used to search the unconstrained space of parses &#928; over a string.</S>
    <S sid="54" ssid="26">This first stage performs overparsing which effectively allows it to generate a set of high probability candidate parses &#960;'.</S>
    <S sid="55" ssid="27">These parses are then rescored using a lexicalized syntactic model (Charniak, 2001).</S>
    <S sid="56" ssid="28">Although the coarse-to-fine model may include any number of intermediary stages, in this paper we consider this two-stage model.</S>
    <S sid="57" ssid="29">There is no guarantee that parses favored by the second stage will be generated by the first stage.</S>
    <S sid="58" ssid="30">In other words, because the first stage model prunes the space of parses from which the second stage rescores, the first stage model may remove solutions that the second stage would have assigned a high probability.</S>
    <S sid="59" ssid="31">In (Hall and Johnson, 2003), we extended the multi-stage parsing model to work on word-lattices.</S>
    <S sid="60" ssid="32">The first-stage parser, Table 1, is responsible for positing a set of candidate parses over the wordlattice.</S>
    <S sid="61" ssid="33">Were we to run the parser to completion it would generate all parses for all strings described by the word-lattice.</S>
    <S sid="62" ssid="34">As with string parsing, we stop the first stage parser early, generating a subset of all parses.</S>
    <S sid="63" ssid="35">Only the strings covered by complete parses are passed on to the second stage parser.</S>
    <S sid="64" ssid="36">This indirectly prunes the word-lattice of all word-arcs that were not covered by complete parses in the first stage.</S>
    <S sid="65" ssid="37">We use a first stage PCFG parser that performs a best-first search over the space of parses, which means that it depends on a heuristic &#8220;figure-ofmerit&#8221; (FOM) (Caraballo and Charniak, 1998).</S>
    <S sid="66" ssid="38">A good FOM attempts to model the true probability of a chart edge2 P(Nij,k).</S>
    <S sid="67" ssid="39">Generally, this probability is impossible to compute during the parsing process as it requires knowing both the inside and outside probabilities (Charniak, 1993; Manning and Sch&#168;utze, 1999).</S>
    <S sid="68" ssid="40">The FOM we describe is an approximation to the edge probability and is computed using an estimate of the inside probability times an approximation to the outside probability 3.</S>
    <S sid="69" ssid="41">The inside probability &#946;(Nij,k) can be computed incrementally during bottom-up parsing.</S>
    <S sid="70" ssid="42">The normalized acoustic probabilities from the acoustic recognizer are included in this calculation.</S>
    <S sid="71" ssid="43">The outside probability is approximated with a bitag model and the standard tag/category boundary model (Caraballo and Charniak, 1998; Hall and Johnson, 2003).</S>
    <S sid="72" ssid="44">Equation 4 presents the approximation to the outside probability.</S>
    <S sid="73" ssid="45">Part-of-speech tags Tq and Tr are the candidate tags to the left and right of the constituent Nij,k.</S>
    <S sid="74" ssid="46">The fwd() and bkwd() functions are the HMM forward and backward probabilities calculated over a lattice containing the part-of-speech tag, the word, and the acoustic scores from the word-lattice to the left and right of the constituent, respectively. p(Ni|Tq) and p(Tr|Ni) are the boundary statistics which are estimated from training data (details of this model can be found in (Hall and Johnson, 2003)).</S>
    <S sid="75" ssid="47">The best-first search employed by the first stage parser uses the FOM defined in Equation 5, where &#951; is a normalization factor based on path length C(j, k).</S>
    <S sid="76" ssid="48">The normalization factor prevents small constituents from consistently being assigned a higher probability than larger constituents (Goldwater et al., 1998).</S>
    <S sid="77" ssid="49">Although this heuristic works well for directing the parser towards likely parses over a string, it is not an ideal model for pruning the word-lattice.</S>
    <S sid="78" ssid="50">First, the outside approximation of this FOM is based on a linear part-of-speech tag model (the bitag).</S>
    <S sid="79" ssid="51">Such a simple syntactic model is unlikely to provide realistic information when choosing a word-lattice path to consider.</S>
    <S sid="80" ssid="52">Second, the model is prone to favoring subsets of the word-lattice causing it to posit additional parse trees for the favored sublattice rather than exploring the remainder of the word-lattice.</S>
    <S sid="81" ssid="53">This second point is the primary motivation for the attention shifting technique presented in the next section.</S>
  </SECTION>
  <SECTION title="3 Attention shifting4" number="3">
    <S sid="82" ssid="1">We explore a modification to the multi-stage parsing algorithm that ensures the first stage parser posits at least one parse for each path in the word-lattice.</S>
    <S sid="83" ssid="2">The idea behind this is to intermittently shift the attention of the parser to unexplored parts of the word lattice. the outside probability, used edges are constituents that are part of a complete parse; a parse is complete if there is a root category label (e.g., S for sentence) that spans the entire word-lattice.</S>
    <S sid="84" ssid="3">In order to identify used edges, we compute the outside probabilities for each parse edge (efficiently computing the outside probability of an edge requires that the inside probabilities have already been computed).</S>
    <S sid="85" ssid="4">In the third step of this algorithm we clear the agenda, removing all partial analyses evaluated by the parser.</S>
    <S sid="86" ssid="5">This forces the parser to abandon analyses of parts of the word-lattice for which complete parses exist.</S>
    <S sid="87" ssid="6">Following this, the agenda is populated with edges corresponding to the unused words, priming the parser to consider these words.</S>
    <S sid="88" ssid="7">To ensure the parser builds upon at least one of these unused edges, we further modify the parsing algorithm: These modifications ensure that the parser focuses on edges built upon the unused words.</S>
    <S sid="89" ssid="8">The second modification ensures the parser is able to determine when it has connected an unused word with a previously completed parse.</S>
    <S sid="90" ssid="9">The application of these constraints directs the attention of the parser towards new edges that contribute to parse analyses covering unused words.</S>
    <S sid="91" ssid="10">We are guaranteed that each iteration of the attention shifting algorithm adds a parse for at least one unused word, meaning that it will take at most |A |iterations to cover the entire lattice, where A is the set of word-lattice arcs.</S>
    <S sid="92" ssid="11">This guarantee is trivially provided through the constraints just described.</S>
    <S sid="93" ssid="12">The attention-shifting parser continues until there are no unused words remaining and each parsing iteration runs until it has found a complete parse using at least one of the unused words.</S>
    <S sid="94" ssid="13">As with multi-stage parsing, an adjustable parameter determines how much overparsing to perform on the initial parse.</S>
    <S sid="95" ssid="14">In the attention shifting algorithm an additional parameter specifies the amount of overparsing for each iteration after the first.</S>
    <S sid="96" ssid="15">The new parameter allows for independent control of the attention shifting iterations.</S>
    <S sid="97" ssid="16">After the attention shifting parser populates a parse chart with parses covering all paths in the lattice, the multi-stage parsing algorithm performs additional pruning based on the probability of the parse edges (the product of the inside and outside probabilities).</S>
    <S sid="98" ssid="17">This is necessary in order to constrain the size of the hypothesis set passed on to the second stage parsing model.</S>
    <S sid="99" ssid="18">The Charniak lexicalized syntactic language model effectively splits the number of parse states (an edges in a PCFG parser) by the number of unique contexts in which the state is found.</S>
    <S sid="100" ssid="19">These contexts include syntactic structure such as parent and grandparent category labels as well as lexical items such as the head of the parent or the head of a sibling constituent (Charniak, 2001).</S>
    <S sid="101" ssid="20">State splitting on this level causes the memory requirement of the lexicalized parser to grow rapidly.</S>
    <S sid="102" ssid="21">Ideally, we would pass all edges on to the second stage, but due to memory limitations, pruning is necessary.</S>
    <S sid="103" ssid="22">It is likely that edges recently discovered by the attention shifting procedure are pruned.</S>
    <S sid="104" ssid="23">However, the true PCFG probability model is used to prune these edges rather than the approximation used in the FOM.</S>
    <S sid="105" ssid="24">We believe that by considering parses which have a relatively high probability according to the combined PCFG and acoustic models that we will include most of the analyses for which the lexicalized parser assigns a high probability.</S>
  </SECTION>
  <SECTION title="4 Experiments" number="4">
    <S sid="106" ssid="1">The purpose of attention shifting is to reduce the amount of work exerted by the first stage PCFG parser while maintaining the same quality of language modeling (in the multi-stage system).</S>
    <S sid="107" ssid="2">We have performed a set of experiments on the NIST &#8217;93 HUB&#8211;1 word-lattices.</S>
    <S sid="108" ssid="3">The HUB&#8211;1 is a collection of 213 word-lattices resulting from an acoustic recognizer&#8217;s analysis of speech utterances.</S>
    <S sid="109" ssid="4">Professional readers reading Wall Street Journal articles generated the utterances.</S>
    <S sid="110" ssid="5">The first stage parser is a best-first PCFG parser trained on sections 2 through 22, and 24 of the Penn WSJ treebank (Marcus et al., 1993).</S>
    <S sid="111" ssid="6">Prior to training, the treebank is transformed into speech-like text, removing punctuation and expanding numerals, etc.5 Overparsing is performed using an edge pop6 multiplicative factor.</S>
    <S sid="112" ssid="7">The parser records the number of edge pops required to reach the first complete parse.</S>
    <S sid="113" ssid="8">The parser continues to parse a until multiple of the number of edge pops required for the first parse are popped off the agenda.</S>
    <S sid="114" ssid="9">The second stage parser used is a modified version of the Charniak language modeling parser described in (Charniak, 2001).</S>
    <S sid="115" ssid="10">We trained this parser on the BLLIP99 corpus (Charniak et al., 1999); a corpus of 30million words automatically parsed using the Charniak parser (Charniak, 2000).</S>
    <S sid="116" ssid="11">In order to compare the work done by the n&#8211;best reranking technique to the word-lattice parser, we generated a set of n&#8211;best lattices.</S>
    <S sid="117" ssid="12">50&#8211;best lists were extracted using the Chelba A* decoder7.</S>
    <S sid="118" ssid="13">A 50&#8211; best lattice is a sublattice of the acoustic lattice that generates only the strings found in the 50&#8211;best list.</S>
    <S sid="119" ssid="14">Additionally, we provide the results for parsing the full acoustic lattices (although these work measurements should not be compared to those of n&#8211;best reranking).</S>
    <S sid="120" ssid="15">We report the amount of work, shown as the cumulative # edge pops, the oracle WER for the word-lattices after first stage pruning, and the WER of the complete multi-stage parser.</S>
    <S sid="121" ssid="16">In all of the word-lattice parsing experiments, we pruned the set of posited hypothesis so that no more than 30,000 local-trees are generated8.</S>
    <S sid="122" ssid="17">We chose this threshold due to the memory requirements of the second stage parser.</S>
    <S sid="123" ssid="18">Performing pruning at the end of the first stage prevents the attention shifting parser from reaching the minimum oracle WER (most notable in the full acoustic word-lattice experiments).</S>
    <S sid="124" ssid="19">While the attention-shifting algorithm ensures all word-lattice arcs are included in complete parses, forward-backward pruning, as used here, will eliminate some of these parses, indirectly eliminating some of the word-lattice arcs.</S>
    <S sid="125" ssid="20">To illustrate the need for pruning, we computed the number of states used by the Charniak lexicalized syntactic language model for 30,000 local trees.</S>
    <S sid="126" ssid="21">An average of 215 lexicalized states were generated for each of the 30,000 local trees.</S>
    <S sid="127" ssid="22">This means that the lexicalized language model, on average, computes probabilities for over 6.5 million states when provided with 30,000 local trees.</S>
    <S sid="128" ssid="23">Table 2 shows the results for n&#8211;best list reranking and word-lattice parsing of n&#8211;best lattices.</S>
    <S sid="129" ssid="24">We recreated the results of the Charniak language model parser used for reranking in order to measure the amount of work required.</S>
    <S sid="130" ssid="25">We ran the first stage parser with 4-times overparsing for each string in the n&#8211;best list.</S>
    <S sid="131" ssid="26">The LatParse result represents running the word-lattice parser on the n&#8211;best lattices performing 100&#8211;times overparsing in the first stage.</S>
    <S sid="132" ssid="27">The AttShift model is the attention shifting parser described in this paper.</S>
    <S sid="133" ssid="28">We used 10&#8211;times overparsing for both the initial parse and each of the attention shifting iterations.</S>
    <S sid="134" ssid="29">When run on the n&#8211;best lattice, this model achieves a comparable WER, while reducing the amount of parser work sixfold (as compared to the regular word-lattice parser).</S>
    <S sid="135" ssid="30">In Table 3 we present the results of the wordlattice parser and the attention shifting parser when run on full acoustic lattices.</S>
    <S sid="136" ssid="31">While the oracle WER is reduced, we are considering almost half as many edges as the standard word-lattice parser.</S>
    <S sid="137" ssid="32">The increased size of the acoustic lattices suggests that it may not be computationally efficient to consider the entire lattice and that an additional pruning phase is necessary.</S>
    <S sid="138" ssid="33">The most significant constraint of this multi-stage lattice parsing technique is that the second stage process has a large memory requirement.</S>
    <S sid="139" ssid="34">While the attention shifting technique does allow the parser to propose constituents for every path in the lattice, we prune some of these constituents prior to performing analysis by the second stage parser.</S>
    <S sid="140" ssid="35">Currently, pruning is accomplished using the PCFG model.</S>
    <S sid="141" ssid="36">One solution is to incorporate an intermediate pruning stage (e.g., lexicalized PCFG) between the PCFG parser and the full lexicalized model.</S>
    <S sid="142" ssid="37">Doing so will relax the requirement for aggressive PCFG pruning and allows for a lexicalized model to influence the selection of word-lattice paths.</S>
  </SECTION>
  <SECTION title="5 Conclusion" number="5">
    <S sid="143" ssid="1">We presented a parsing technique that shifts the attention of a word-lattice parser in order to ensure syntactic analyses for all lattice paths.</S>
    <S sid="144" ssid="2">Attention shifting can be thought of as a meta-process around the first stage of a multi-stage word-lattice parser.</S>
    <S sid="145" ssid="3">We show that this technique reduces the amount of work exerted by the first stage PCFG parser while maintaining comparable language modeling performance.</S>
    <S sid="146" ssid="4">Attention shifting is a simple technique that attempts to make word-lattice parsing more efficient.</S>
    <S sid="147" ssid="5">As suggested by the results for the acoustic lattice experiments, this technique alone is not sufficient.</S>
    <S sid="148" ssid="6">Solutions to improve these results include modifying the first-stage grammar by annotating the category labels with local syntactic features as suggested in (Johnson, 1998) and (Klein and Manning, 2003) as well as incorporating some level of lexicalization.</S>
    <S sid="149" ssid="7">Improving the quality of the parses selected by the first stage should reduce the need for generating such a large number of candidates prior to pruning, improving efficiency as well as overall accuracy.</S>
    <S sid="150" ssid="8">We believe that attention shifting, or some variety of this technique, will be an integral part of efficient solutions for word-lattice parsing.</S>
  </SECTION>
</PAPER>
