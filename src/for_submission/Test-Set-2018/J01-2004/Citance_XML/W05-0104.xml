<PAPER>
  <S sid="0">A Core-Tools Statistical NLP Course</S>
  <ABSTRACT>
    <S sid="1" ssid="1">In the fall term of 2004, I taught a new statistical NLP course focusing on core tools and machine-learning algorithms.</S>
    <S sid="2" ssid="2">The course work was organized around four substantial programming assignments in which the students implemented the important parts of several core tools, including language models (for speech reranking), a maximum entropy classifier, a part-of-speech tagger, a PCFG parser, and a word-alignment system.</S>
    <S sid="3" ssid="3">Using provided scaffolding, students built realistic tools with nearly state-of-theart performance in most cases.</S>
    <S sid="4" ssid="4">This paper briefly outlines the coverage of the course, the scope of the assignments, and some of the lessons learned in teaching the course in this way.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">In the fall term of 2004, I taught a new statistical NLP course at UC Berkeley which covered the central tools and machine-learning approaches of NLP.</S>
    <S sid="6" ssid="2">My goal in formulating this course was to create a syllabus and assignment set to teach in a relatively short time the important aspects, both practical and theoretical, of what took me years of building research tools to internalize.</S>
    <S sid="7" ssid="3">The result was a rather hard course with a high workload.</S>
    <S sid="8" ssid="4">Although the course evaluations were very positive, and several of the students who completed the course were able to jump right into research projects in my group, there&#8217;s no question that the broad accessibility of the course, especially for non-CS students, was limited.</S>
    <S sid="9" ssid="5">As with any NLP course, there were several fundamental choice points.</S>
    <S sid="10" ssid="6">First, it&#8217;s not possible to cover both core tools and end-to-end applications in detail in a single term.</S>
    <S sid="11" ssid="7">Since Marti Hearst was teaching an applied NLP course during the same term, I chose to cover tools and algorithms almost exclusively (see figure 1 for a syllabus).</S>
    <S sid="12" ssid="8">The second choice point was whether to organize the course primarily around linguistic topics or primarily around statistical methods.</S>
    <S sid="13" ssid="9">I chose to follow linguistic topics because that order seemed much easier to motivate to the students (comments on this choice in section 3).</S>
    <S sid="14" ssid="10">The final fundamental choice I made in deciding how to target this class was to require both substantial coding and substantial math.</S>
    <S sid="15" ssid="11">This choice narrowed the audience of the class, but allowed the students to build realistic systems which were not just toy implementations.</S>
    <S sid="16" ssid="12">I feel that the most successful aspect of this course was the set of assignments, so the largest section below will be devoted to describing them.</S>
    <S sid="17" ssid="13">If other researchers are interested in using any of my materials, they are encouraged to contact me or visit my web page (http://www.cs.berkeley.edu/~klein).</S>
  </SECTION>
  <SECTION title="2 Audience" number="2">
    <S sid="18" ssid="1">The audience of the class began as a mix of CS PhD students (mostly AI but some systems students), some linguistics graduate students, and a few advanced CS undergrads.</S>
    <S sid="19" ssid="2">What became apparent after the first homework assignment (see section 4.2) was that while the CS students could at least muddle through the course with weak (or absent) linguistics backgrounds, the linguistics students were unable to acquire the math and programming skills quickly enough to keep up.</S>
    <S sid="20" ssid="3">I have no good ideas about how to address this issue.</S>
    <S sid="21" ssid="4">Moreover, even among the CS students, some of the systems students had trouble with the math and some of the AI/theory students had issues with coding scalable solutions.</S>
    <S sid="22" ssid="5">The course was certainly not optimized for broad accessibility, but the approximately 80% of students who stuck it out did what I considered to be extremely impressive work.</S>
    <S sid="23" ssid="6">For example, one student built a language model which took the mass reserved for new words and distributed it according to a character ngram model.</S>
    <S sid="24" ssid="7">Another student invented a noniterative word alignment heuristic which outperformed IBM model 4 on small and medium training corpora.</S>
    <S sid="25" ssid="8">A third student built a maxent part-of-speech tagger with a per-word accuracy of 96.7%, certainly in the state-of-the-art range.</S>
  </SECTION>
  <SECTION title="3 Topics" number="3">
    <S sid="26" ssid="1">The topics covered in the course are shown in figure 1.</S>
    <S sid="27" ssid="2">The first week of the course was essentially a history lesson about symbolic approaches NLP, both to show their strengths (a full, unified pipeline including predicate logic semantic interpretations, while we still don&#8217;t have a good notion of probabilistic interpretation) and their weaknesses (many interpretations arise from just a few rules, ambiguity poorly handled).</S>
    <S sid="28" ssid="3">From there, I discussed statistical approaches to problems of increasing complexity, spending a large amount of time on tree and sequence models.</S>
    <S sid="29" ssid="4">As mentioned above, I organized the lectures around linguistic topics rather than mathematical methods.</S>
    <S sid="30" ssid="5">However, given the degree to which the course focused on such foundational methods, this order was perhaps a mistake.</S>
    <S sid="31" ssid="6">For example, it meant that simple word alignment models like IBM models 1 and 2 (Brown et al., 1990) and the HMM model (Vogel et al., 1996) came many weeks after HMMs were introduced in the context of part-of-speech tagging.</S>
    <S sid="32" ssid="7">I also separated unsupervised learning into its own sub-sequence, where I now wish I had presented the unsupervised approaches to each task along with the supervised ones.</S>
    <S sid="33" ssid="8">I assigned readings from Jurafsky and Martin (2000) and Manning and Sch&#168;utze (1999) for the first half of the course, but the second half was almost entirely based on papers from the research literature.</S>
    <S sid="34" ssid="9">This reflected both increasing sophistication on the part of the students and insufficient coverage of the latter topics in the textbooks.</S>
  </SECTION>
  <SECTION title="4 Assignments" number="4">
    <S sid="35" ssid="1">The key component which characterized this course was the assignments.</S>
    <S sid="36" ssid="2">Each assignment is described below.</S>
    <S sid="37" ssid="3">They are available for use by other instructors.</S>
    <S sid="38" ssid="4">While licensing issues with the data make it impossible to put the entirety of the assignment materials on the web, some materials will be linked from http://www.cs.berkeley.edu/~klein, and the rest can be obtained by emailing me.</S>
    <S sid="39" ssid="5">The assignments were all in Java.</S>
    <S sid="40" ssid="6">In all cases, I supplied a large amount of scaffolding code which read in the appropriate data files, constructed a placeholder baseline system, and tested that baseline.</S>
    <S sid="41" ssid="7">The students therefore always began with a running end-to-end pipeline, using standard corpora, evaluated in standard ways.</S>
    <S sid="42" ssid="8">They then swapped out the baseline placeholder for increasingly sophisticated implementations.</S>
    <S sid="43" ssid="9">When possible, assignments also had a toy &#8220;miniTest&#8221; mode where rather than reading in real corpora, a small toy corpus was loaded to facilitate debugging.</S>
    <S sid="44" ssid="10">Assignments were graded entirely on the basis of write-ups.</S>
    <S sid="45" ssid="11">In the first assignment, students built n-gram language models using WSJ data.</S>
    <S sid="46" ssid="12">Their language models were evaluated in three ways by the support harness.</S>
    <S sid="47" ssid="13">First, perplexity on heldout WSJ text was calculated.</S>
    <S sid="48" ssid="14">In this evaluation, reserving the correct mass for unknown words was important.</S>
    <S sid="49" ssid="15">Second, their language models were used to rescore n-best speech lists (supplied by Brian Roark, see Roark (2001)).</S>
    <S sid="50" ssid="16">Finally, random sentences were generatively sampled from their models, giving students concrete feedback on how their models did (or did not) capture information about English.</S>
    <S sid="51" ssid="17">The support code intially provided an unsmoothed unigram model to get students started.</S>
    <S sid="52" ssid="18">They were then asked to build several more complex language models, including at least one higher-order interpolated model, and at least one model using GoodTuring or held-out smoothing.</S>
    <S sid="53" ssid="19">Beyond these requirements, students were encouraged to acheive the best possible word error rate and perplexity figures by whatever means they chose.1 They were also asked to identify ways in which their language models missed important trends of En1After each assignment, I presented in class an honors list, consisting of the students who won on any measure or who had simply built something clever.</S>
    <S sid="54" ssid="20">I initially worried about how these honors announcements would be received, but students really seemed to enjoy hearing what their peers were doing, and most students made the honors list at some point in the term. glish and to suggest solutions.</S>
    <S sid="55" ssid="21">As a second part to assignment 1, students trained class-conditional n-gram models (at the character level) to do the proper name identification task from Smarr and Manning (2002) (whose data we used).</S>
    <S sid="56" ssid="22">In this task, proper name strings are to be mapped to one of {DRUG, COMPANY, MOVIE, PERSON, LOCATION}.</S>
    <S sid="57" ssid="23">This turns out to be a fairly easy task since the different categories have markedly different character distributions.2 In the future, I will move this part of assignment 1 and the matching part of assignment 2 into a new, joint assignment.</S>
    <S sid="58" ssid="24">In assignment 2, students first built a general maximum entropy model for multiclass classification.</S>
    <S sid="59" ssid="25">The support code provided a crippled maxent classifier which always returned the uniform distribution over labels (by ignoring the features of the input datum).</S>
    <S sid="60" ssid="26">Students replaced the crippled bits and got a correct classifier run2This assignment could equally well have been done as a language identification task, but the proper name data was convenient and led to fun error analysis, since in good systems the errors are mostly places named after people, movies with place names as titles, and so on. ning, first on a small toy problem and then on the proper-name identification problem from assignment 1.</S>
    <S sid="61" ssid="27">The support code provided optimization code (an L-BFGS optimizer) and feature indexing machinery, so students only wrote code to calculate the maxent objective function and its derivatives.</S>
    <S sid="62" ssid="28">The original intention of assignment 2 was that students then use this maxent classifier as a building block of a maxent part-of-speech tagger like that of Ratnaparkhi (1996).</S>
    <S sid="63" ssid="29">The support code supplied a most-frequent-tag baseline tagger and a greedy lattice decoder.</S>
    <S sid="64" ssid="30">The students first improved the local scoring function (keeping the greedy decoder) using either an HMM or maxent model for each timeslice.</S>
    <S sid="65" ssid="31">Once this was complete, they upgraded the greedy decoder to a Viterbi decoder.</S>
    <S sid="66" ssid="32">Since students were, in practice, generally only willing to wait about 20 minutes for an experiment to run, most chose to discard their maxent classifiers and build generative HMM taggers.</S>
    <S sid="67" ssid="33">About half of the students&#8217; final taggers exceeded 96% per-word tagging accuracy, which I found very impressive.</S>
    <S sid="68" ssid="34">Students were only required to build a trigram tagger of some kind.</S>
    <S sid="69" ssid="35">However, many chose to have smoothed HMMs with complex emission models like Brants (2000), while others built maxent taggers.</S>
    <S sid="70" ssid="36">Because of the slowness of maxent taggers&#8217; training, I will just ask students to build HMM taggers next time.</S>
    <S sid="71" ssid="37">Moreover, with the relation between the two parts of this assignment gone, I will separate out the proper-name classification part into its own assignment.</S>
    <S sid="72" ssid="38">In assignment 3, students wrote a probabilistic chart parser.</S>
    <S sid="73" ssid="39">The support code read in and normalized Penn Treebank trees using the standard data splits, handled binarization of nary rules, and calculated ParsEval numbers over the development or test sets.</S>
    <S sid="74" ssid="40">A baseline leftbranching parser was provided.</S>
    <S sid="75" ssid="41">Students wrote an agenda-based uniform-cost parser essentially from scratch.</S>
    <S sid="76" ssid="42">Once the parser parsed correctly with the supplied treebank grammar, students experimented with horizontal and vertical markovization (see Klein and Manning (2003)) to improve parsing accuracy.</S>
    <S sid="77" ssid="43">Students were then free to experiment with speed-ups to the parser, more complex annotation schemes, and so on.</S>
    <S sid="78" ssid="44">Most students&#8217; parsers ran at reasonable speeds (around a minute for 40 word sentences) and got final Fl measures over 82%, which is substantially higher than an unannotated treebank grammar will produce.</S>
    <S sid="79" ssid="45">While this assignment would appear to be more work than the others, it actually got the least overload-related complaints of all the assignments.</S>
    <S sid="80" ssid="46">In the future, I may instead have students implement an array-based CKY parser (Kasami, 1965), since a better understanding of CKY would have been more useful than knowing about agenda-based methods for later parts of the course.</S>
    <S sid="81" ssid="47">Moreover, several students wanted to experiment with induction methods which required summing parsers instead of Viterbi parsers.</S>
    <S sid="82" ssid="48">In assignment 4, students built word alignment systems using the Canadian Hansards training data and evaluation alignments from the 2003 (and now 2005) shared task in the NAACL workshop on parallel texts.</S>
    <S sid="83" ssid="49">The support code provided a monotone baseline aligner and evaluation/display code which graphically printed gold alignments superimposed over guessed alignments.</S>
    <S sid="84" ssid="50">Students first built a heuristic aligner (Dice, mutual information-based, or whatever they could invent) and then built IBM model 1 and 2 aligners.</S>
    <S sid="85" ssid="51">They then had a choice of either scaling up the system to learn from larger training sets or implementing the HMM alignment model.</S>
    <S sid="86" ssid="52">For all the assignments, I stressed that the students should spend a substantial amount of time doing error analysis.</S>
    <S sid="87" ssid="53">However, most didn&#8217;t, except for in assignment 2, where the support code printed out every error their taggers made, by default.</S>
    <S sid="88" ssid="54">For this assignment, students actually provided very good error analysis.</S>
    <S sid="89" ssid="55">In the future, I will increase the amount of verbose error output to encourage better error analysis for the other assignments &#8211; it seemed like students were reluctant to write code to display errors, but were happy to look at errors as they scrolled by.3 A very important question raised by an anonymous reviewer was how effectively implementing tried-and-true methods feeds into new research.</S>
    <S sid="90" ssid="56">For students who will not be doing NLP research but want to know how the basic methods work (realistically, this is most of the audience), the experience of having implemented several &#8220;classic&#8221; approaches to core tools is certainly appropriate.</S>
    <S sid="91" ssid="57">However, even for students who intend to do NLP research, this hands-on tour of established methods has already shown itself to be very valuable.</S>
    <S sid="92" ssid="58">These students can pick up any paper on any of these tasks, and they have a very concrete idea about what the data sets look like, why people do things they way they do, and what kinds of error types and rates one can expect from a given tool.</S>
    <S sid="93" ssid="59">That&#8217;s experience that can take a long time to acquire otherwise &#8211; it certainly took me a while.</S>
    <S sid="94" ssid="60">Moreover, I&#8217;ve had several students from the class start research projects with me, and, in each case, those projects have been in some way bridged by the course assignments.</S>
    <S sid="95" ssid="61">This methodology also means that all of the students working with me have a shared implementation background, which has facilitated ad hoc collaborations on research projects.</S>
  </SECTION>
  <SECTION title="5 Conclusions" number="5">
    <S sid="96" ssid="1">There are certainly changes I will make when I teach this course again this fall.</S>
    <S sid="97" ssid="2">I will likely shuffle the topics around so that word alignment comes earlier (closer to HMMs for tagging) and I will likely teach dynamic programming solutions to parsing and tagging in more depth than graph-search based methods.</S>
    <S sid="98" ssid="3">Some students needed remedial linguistics sections and other students needed remedial math sections, and I would hold more such sessions, and ear3There was also verbose error reporting for assignment 4, which displayed each sentence&#8217;s guessed and gold alignments in a grid, but since most students didn&#8217;t speak French, this didn&#8217;t have the same effect. lier in the term.</S>
    <S sid="99" ssid="4">However, I will certainly keep the substantial implementation component of the course, partially in response to very positive student feedback on the assignments, partially from my own reaction to the high quality of student work on those assignments, and partially from how easily students with so much handson experience seem to be able to jump into NLP research.</S>
  </SECTION>
</PAPER>
