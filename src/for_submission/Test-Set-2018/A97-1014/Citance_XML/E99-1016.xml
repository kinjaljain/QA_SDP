<PAPER>
	<S sid="0">Cascaded Markov Models</S><ABSTRACT>
		<S sid="1" ssid="1">This paper presents a new approach to partial parsing of context-free structures.</S>
		<S sid="2" ssid="2">The approach is based on Markov Mod- els.</S>
		<S sid="3" ssid="3">Each layer of the resulting structure is represented byits own Markov Model, and output of a lower layer is passed as input to the next higher layer.</S>
		<S sid="4" ssid="4">An em- pirical evaluation of the method yields very good results for NP/PP chunking of German ewspaper texts.</S>
	</ABSTRACT>
	<SECTION title="Introduction" number="1">
			<S sid="5" ssid="5">Partial parsing, often referred to as chunking, is used as a pre-processing step before deep analysis or as shallow processing for applications like in- formation retrieval, messsage extraction and text summarization.</S>
			<S sid="6" ssid="6">Chunking concentrates on con- structs that can be recognized with a high degree of certainty.</S>
			<S sid="7" ssid="7">For several applications, this type of information with high accuracy is more valuable than deep analysis with lower accuracy.</S>
			<S sid="8" ssid="8">We will present a new approach to partial pars- ing that uses Markov Models.</S>
			<S sid="9" ssid="9">The presented models are extensions of the part-of-speech tag- ging technique and are capable of emitting struc- ture.</S>
			<S sid="10" ssid="10">They utilize context-free grammar rules and add left-to-right transitional context information.</S>
			<S sid="11" ssid="11">This type of model is used to facilitate the syntac- tic annotation of the NEGRA corpus of German newspaper texts (Skut et al, 1997).</S>
			<S sid="12" ssid="12">Part-of-speech tagging is the assignment ofsyn- tactic categories (tags) to words that occur in the processed text.</S>
			<S sid="13" ssid="13">Among others, this task is ef- ficiently solved with Markov Models.</S>
			<S sid="14" ssid="14">States of a Markov Model represent syntactic ategories (or tuples of syntactic ategories), and outputs represent words and punctuation (Church, 1988; DeRose, 1988, and others).</S>
			<S sid="15" ssid="15">This technique of sta- tistical part-of-speech tagging operates very suc- cessfully, and usually accuracy rates between 96 and 97% are reported for new, unseen text.</S>
			<S sid="16" ssid="16">Brants et al (1997) showed that the technique of statistical tagging can be shifted to the next level of syntactic processing and is capable of as- signing grammatical functions.</S>
			<S sid="17" ssid="17">These are func- tions like subject, direct object, head, etc. They mark the function of a child node within its par- ent phrase.</S>
			<S sid="18" ssid="18">Figure 1 shows an example sentence and its structure.</S>
			<S sid="19" ssid="19">The terminal sequence is complemen- ted by tags (Stuttgart-Tiibingen-Tagset, Thielen and Schiller, 1995).</S>
			<S sid="20" ssid="20">Non-terminal nodes are la- beled with phrase categories, edges are labeled with grammatical functions (NEGRA tagset).</S>
			<S sid="21" ssid="21">In this paper, we will show that Markov Mod- els are not restricted to the labeling task (i.e., the assignment ofpart-of-speech labels, phrase labels, or labels for grammatical functions), but are also capable of generating structural elements.</S>
			<S sid="22" ssid="22">We will use cascades of Markov Models.</S>
			<S sid="23" ssid="23">Starting with the part-of-speech layer, each layer of the result- ing structure is represented by its own Markov Model.</S>
			<S sid="24" ssid="24">A lower layer passes its output as input to the next higher layer.</S>
			<S sid="25" ssid="25">The output of a layer can be ambiguous and it is complemented by a probability distribution for the alternatives.</S>
			<S sid="26" ssid="26">This type of parsing is inspired by finite state cascades which are presented by several authors.</S>
			<S sid="27" ssid="27">CASS (Abney, 1991; Abney, 1996) is a partial parser that recognizes non-recursive basic phrases (chunks) with finite state transducers.</S>
			<S sid="28" ssid="28">Each transducer mits a single best analysis (a longest match) that serves as input for the transducer at the next higher level.</S>
			<S sid="29" ssid="29">CASS needs a special gram- mar for which rules are manually coded.</S>
			<S sid="30" ssid="30">Each layer creates a particular subset of phrase types.</S>
			<S sid="31" ssid="31">FASTUS (Appelt et al, 1993) is heavily based on pattern matching.</S>
			<S sid="32" ssid="32">Each pattern is associated with one or more trigger words.</S>
			<S sid="33" ssid="33">It uses a series of non-deterministic finite-state ransducers tobuild chunks; the output of one transducer is passed 118 Proceedings of EACL '99 ,D ,\] an Arbeit und Gelci APPR NN KON NN of work and money Ein enormer Posten wird von den 37 beteiligten Vereinen aufgebracht ART ADJA NN VAFIN APPR ART CARD ADJA NN WPP An enormous amount is by the 37 involved organizations raised 'A large amount of money and work was raised by the involved organizations' Figure 1: Example sentence and annotation.</S>
			<S sid="34" ssid="34">The structure consists of terminal nodes (words and their parts-of-speech), non-terminal nodes (phrases) and edges (labeled with grammatical functions).</S>
			<S sid="35" ssid="35">as input to the next transducer.</S>
			<S sid="36" ssid="36">(Roche, 1994) uses the fix point of a finite-state transducer.</S>
			<S sid="37" ssid="37">The transducer is iteratively applied to its own out- put until it remains identical to the input.</S>
			<S sid="38" ssid="38">The method is successfully used for efficient processing with large grammars.</S>
			<S sid="39" ssid="39">(Cardie and Pierce, 1998) present an approach to chunking based on a mix- ture of finite state and context-free techniques.</S>
			<S sid="40" ssid="40">They use N P rules of a pruned treebank grammar.</S>
			<S sid="41" ssid="41">For processing, each point of a text is matched against he treebank rules and the longest match is chosen.</S>
			<S sid="42" ssid="42">Cascades of automata nd transducers can also be found in speech processing, see e.g.</S>
			<S sid="43" ssid="43">(Pereira et al, 1994; Mohri, 1997).</S>
			<S sid="44" ssid="44">Contrary to finite-state transducers, Cascaded Markov Models exploit probabilities when pro- cessing layers of a syntactic structure.</S>
			<S sid="45" ssid="45">They do not generate longest matches but most-probable sequences.</S>
			<S sid="46" ssid="46">Furthermore, a higher layer sees dif- ferent alternatives and their probabilities for the same span.</S>
			<S sid="47" ssid="47">It can choose a lower ranked alterna- tive if it fits better into the context of the higher layer.</S>
			<S sid="48" ssid="48">An additional advantage is that Cascaded Markov Models do not need a "stratified" gram- mar (i.e., each layer encodes a disjoint subset of phrases).</S>
			<S sid="49" ssid="49">Instead the system can be immediately trained on existing treebank data.</S>
			<S sid="50" ssid="50">The rest of this paper is structured as follows.</S>
			<S sid="51" ssid="51">Section 2 addresses the encoding of parsing pro- cesses as Markov Models.</S>
			<S sid="52" ssid="52">Section 3 presents Cas- caded Markov Models.</S>
			<S sid="53" ssid="53">Section 4 reports on the evaluation of Cascaded Markov Models using tree- bank data.</S>
			<S sid="54" ssid="54">Finally, section 5 will give conclusions.</S>
	</SECTION>
	<SECTION title="Encoding of Syntactical. " number="2">
			<S sid="55" ssid="1">Information as Markov Models When encoding a part-of-speech tagger as a Markov Model, states represent syntactic cate- gories 1 and outputs represent words.</S>
			<S sid="56" ssid="2">Contex- tual probabilities of tags are encoded as transi- tion probabilities of tags, and lexical probabilities of the Markov Model are encoded as output prob- abilities of words in states.</S>
			<S sid="57" ssid="3">We introduce a modification to this encoding.</S>
			<S sid="58" ssid="4">States additionally may represent non-terminal categories (phrases).</S>
			<S sid="59" ssid="5">These new states emit par- tial parse trees (cf.</S>
			<S sid="60" ssid="6">figure 2).</S>
			<S sid="61" ssid="7">This can be seen as collapsing a sequence of terminals into one non- terminal.</S>
			<S sid="62" ssid="8">Transitions into and out of the new states are performed in the same way as for words and parts-of-speech.</S>
			<S sid="63" ssid="9">Transitional probabilities for this new type of Markov Models can be estimated from annotated data in a way very similar to estimating proba- bilities for a part-of-speech tagger.</S>
			<S sid="64" ssid="10">The only dif- ference is that sequences of terminals may be re- placed by one non-terminal.</S>
			<S sid="65" ssid="11">Lexical probabilities need a new estimation method.</S>
			<S sid="66" ssid="12">We use probabilities of context-free par- tim parse trees.</S>
			<S sid="67" ssid="13">Thus, the lexical probability of the state NP in figure 2 is determined by P(NP ~ ART ADJA NN, ART ~ ein, ADJA --~ enormer, NN ~ Posten) = P(NP ~ ART ADJA NN) ? P(ART ~ ein)- P(ADJA --+ enormer) ? P(NN -+ Posten) Note that the last three probabilities are the same as for the part-of-speech model.</S>
			<S sid="68" ssid="14">1Categories and states directly correspond in bi- gram models.</S>
			<S sid="69" ssid="15">For higher order models, tuples of cat- egories are combined to one state.</S>
			<S sid="70" ssid="16">119 Proceedings of EACL '99 z K" A o. _z a. n- u. Z K" ~, a. a. &lt; ~.</S>
			<S sid="71" ssid="17">n Z &lt;- o. &gt; &lt; " ~ '~ 12.</S>
			<S sid="72" ssid="18">&gt; e~ --~ z ~ z ~.</S>
			<S sid="73" ssid="19">a: e~ rr E. ~.</S>
			<S sid="74" ssid="20">O a_ / I\P(AINP)IP(anlAPPR)/ I'~p(AICNP)IIVAFINJ?/ P(Z~IPP) ~P(aufgebrachtlVVPp) / ~ ~ a'n / ~ k w i rd~/ / k 'X~aufgebracht ART ADJA NN NN KON NN APPR ART CARD ADJANN ein enormer Posten Arbeit und Geld von den 37 beteiligten Vereinen Figure 2: Part of the Markov Models for layer I that is used to process the sentence of fignre 1.</S>
			<S sid="75" ssid="21">Contrary to part-of-speech tagging, outputs of states may consist of structures with probabilities according to a stochastic context-free grammar.</S>
	</SECTION>
	<SECTION title="Cascaded Markov  Mode ls. " number="3">
			<S sid="76" ssid="1">The basic idea of Cascaded Markov Models is to construct the parse tree layer by layer, first struc- tures of depth one, then structures of depth two, and so forth.</S>
			<S sid="77" ssid="2">For each layer, a Markov Model de- termines the best set of phrases.</S>
			<S sid="78" ssid="3">These phrases are used as input for the next layer, which adds one more layer.</S>
			<S sid="79" ssid="4">Phrase hypotheses at each layer are generated according to stochastic context-free grammar rules (the outputs of the Markov Model) and subsequently filtered from left to right by Markov Models.</S>
			<S sid="80" ssid="5">Figure 3 gives an overview of the parsing model.</S>
			<S sid="81" ssid="6">Starting with part-of-speech tagging, new phrases are created at higher layers and filtered by Markov Models operating from left to right.</S>
			<S sid="82" ssid="7">3.1 Tagging Lattices.</S>
			<S sid="83" ssid="8">The processing example in figure 3 only shows the best hypothesis at each layer.</S>
			<S sid="84" ssid="9">But there are alter- native phrase hypotheses and we need to deter- mine the best one during the parsing process.</S>
			<S sid="85" ssid="10">All rules of the generated context-free grammar with right sides that are compatible with part of the sequence are added to the search space.</S>
			<S sid="86" ssid="11">Fig- ure 4 shows an example for hypotheses atthe first layer when processing the sentence of figure 1.</S>
			<S sid="87" ssid="12">Each bar represents one hypothesis.</S>
			<S sid="88" ssid="13">The position of the bar indicates the covered words.</S>
			<S sid="89" ssid="14">It is la- beled with the type of the hypothetical phrase, an index in the upper left corner for later ref- erence, the negative logarithm of the probability that this phrase generates the terminal yield (i.e., the smaller the better; probabilities for part-of- speech tags are omitted for clarity).</S>
			<S sid="90" ssid="15">This part is very similar to chart entries of a chart parser.</S>
			<S sid="91" ssid="16">All phrases that are newly introduced at this layer are marked with an asterisk (*).</S>
			<S sid="92" ssid="17">They are produced according to context-free rules, based on the elements passed from the next lower layer.</S>
			<S sid="93" ssid="18">The layer below layer 1 is the part-of-speech layer.</S>
			<S sid="94" ssid="19">The hypotheses form a lattice, with the word boundaries being states and the phrases being edges.</S>
			<S sid="95" ssid="20">Selecting the best hypothesis means to find the best path from node 0 to the last node (node 14 in the example).</S>
			<S sid="96" ssid="21">The best path can be effi- ciently found with the Viterbi algorithm (Viterbi, 1967), which runs in time linear to the length of the word sequence.</S>
			<S sid="97" ssid="22">Having this view of finding the best hypothesis, processing of a layer is similar to word lattice processing in speech recognition (cf.</S>
			<S sid="98" ssid="23">Samuelsson, 1997).</S>
			<S sid="99" ssid="24">Two types of probabilities are important when searching for the best path in a lattice.</S>
			<S sid="100" ssid="25">First, these are probabilities ofthe hypotheses (phrases) generating the underlying terminal nodes (words).</S>
			<S sid="101" ssid="26">They are calculated according to a stochastic context-free grammar and given in figure 4.</S>
			<S sid="102" ssid="27">The second type are context probabilities, i.e., the probability that some type of phrase follows or precedes another.</S>
			<S sid="103" ssid="28">The two types of probabilities coincide with lexical and contextual probabilities of a Markov Model, respectively.</S>
			<S sid="104" ssid="29">According to a trigram model (generated from a corpus), the path in figure 4 that is marked grey is the best path in the lattice.</S>
			<S sid="105" ssid="30">Its probability is composed of Pbesf P(NP\[$, $)P(NP ~* ein enormer Posten) ? P(APPRI$, NP)P(APPR ~ an) ? P(CNPINP, APPR)P(?NP ~* Arbeit und Geld) ? P(VAFINIAPPR , CNP)P(VAFIN --+ wird) 120 Proceedings of EACL '99 3 2 &gt;, "1 0 Input I == ~ ~-Cascaded Markov Models~, { Z @art-of-Speech Tagging~ ( Gramma"t~al ) (.~.</S>
			<S sid="106" ssid="31">Kronos haben mit ihrer MusikBrOckengeschlagen ~!~:!:~:~:~ ' ! Kronos haben mit ihrer MusikBrOckengeschlagen Kronos have w i th their music bridges built "Kronos built bridges with their music" Figure 3: The combined, layered processing model.</S>
			<S sid="107" ssid="32">Starting with part-of-speech tagging (layer 0), pos- sibly ambiguous output together with probabilities i passed to higher layers (only the best hypotheses are shown for clarity).</S>
			<S sid="108" ssid="33">At each layer, new phrases and grammatical functions are added.</S>
			<S sid="109" ssid="34">-P(PPICNP, VAFIN) P(PP =~* yon den 37 beteiligten Vereinen) ? P(VVPP\]VAFIN, PP)P(VVPP --+ aufgebracht) ? P($1PP, VVPP).</S>
			<S sid="110" ssid="35">Start and end of the path are indicated by a dollar sign ($).</S>
			<S sid="111" ssid="36">This path is very close to the cor- rect structure for layer 1.</S>
			<S sid="112" ssid="37">The CNP and PP are correctly recognized.</S>
			<S sid="113" ssid="38">Additionally, the best path correctly predicts that APPR, VAFIN and VVPP should not be attached in layer 1.</S>
			<S sid="114" ssid="39">The only error is the NP ein enormer Posten.</S>
			<S sid="115" ssid="40">Although this is on its own a perfect NP, it is not complete because the PP an Arbeit und Geld is missing.</S>
			<S sid="116" ssid="41">ART, ADJA and NN should be left unattached in this layer in order to be able to create the correct structure at higher layers.</S>
			<S sid="117" ssid="42">The presented Markov Models act as filters.</S>
			<S sid="118" ssid="43">The probability of a connected structure is de- termined only based on a stochastic ontext-free grammar.</S>
			<S sid="119" ssid="44">The joint probabilities of unconnected partial structures are determined by additionally using Markov Models.</S>
			<S sid="120" ssid="45">While building the struc- ture bottom up, parses that are unlikely according to the Markov Models are pruned.</S>
			<S sid="121" ssid="46">3.2 The Method.</S>
			<S sid="122" ssid="47">The standard Viterbi algorithm is modified in or- der to process Markov Models operating on lat- tices.</S>
			<S sid="123" ssid="48">In part-of-speech tagging, each hypothesis (a tag) spans exactly one word.</S>
			<S sid="124" ssid="49">Now, a hypothesis can span an arbitrary number of words, and the same span can be covered by an arbitrary num- ber of alternative word or phrase hypotheses.</S>
			<S sid="125" ssid="50">Us- ing terms of a Markov Model, a state is allowed to emit a context-free partial parse tree, starting with the represented non-terminal symbol, yield- ing part of the sequence of words.</S>
			<S sid="126" ssid="51">This is in con- trast to standard Markov Models.</S>
			<S sid="127" ssid="52">There, states emit atomic symbols.</S>
			<S sid="128" ssid="53">Note that an edge in the lat- tice is represented by a state in the corresponding Markov Model.</S>
			<S sid="129" ssid="54">Figure 2 shows the part of the Markov Model that represents the best path in the lattice of figure 4.</S>
			<S sid="130" ssid="55">The equations of the Viterbi algorithm are adapted to process a language model operating on a lattice.</S>
			<S sid="131" ssid="56">Instead of the words, the gaps be- tween the words are enumerated (see figure 4), and an edge between two states can span one or more words, such that an edge is represented by a triple &lt;t, t', q&gt;, starting at time t, ending at time t' and representing state q. We introduce accumulators At,t, (q) that col- lect the maximum probability of state q covering words from position t to t '.</S>
			<S sid="132" ssid="57">We use 6i,j (q) to de- note the probability of the deriviation emitted by state q having a terminal yield that spans posi- tions i to j. These are needed here as part of the accumulators A. Initialization: Ao,t(q) = P(qlqs)6o,t(q) (1) 121 Proceedings of EACL '99 29NM* 9.23 \] 12sNp * 8.63 \[ I~sAP * zo.2s I ~:~CN~*..: ':::::i;~OS\] ~6pp, 10.23 IF'=NP * zz.s* I 1;7 ~,:~ :: : ,,:~ :: :; :;~;':,: 1 , :,li pP I * o.s I 'NP* ,2.2 J '?NP* ,.,0 1 I ?AP * 9.2 I .00 II"PP* 0.22 II ?AP* i I I I I I I I t I I I i I I 0 Ein 1 2 3 5 6 8 9 1037 II, ~12.</S>
			<S sid="133" ssid="58">13 . 14 enor- Po- an 4 Ar- und Geld 7 wird von den oetel- ver- autge-.</S>
			<S sid="134" ssid="59">met sten beit ligten einen bracht Figure 4: Phrase hypotheses according to a context-free grammar for the first layer.</S>
			<S sid="135" ssid="60">Hypotheses marked with an asterisk (*) are newly generated at this layer, the others are passed from the next lower layer (layer 0: part-of-speech tagging).</S>
			<S sid="136" ssid="61">The best path in the lattice is marked grey.</S>
			<S sid="137" ssid="62">Recursion: At,t, (q) = max At,,,t(q')P(qlq')6t,t, (q), (t,,,t,q,&gt;ELattice (2) for l&lt;t &lt;T. Termination: max P(Q, Lattice) = m_ax At T(q)P(qe\]q).</S>
			<S sid="138" ssid="63">QEQ.* (t,T,q)eUattice ' (3) Additionally, it is necessary to keep track of the el- ements in the lattice that maximized each At,r (q).</S>
			<S sid="139" ssid="64">When reaching time T, we get the best last ele- ment in the lattice (t~ n, T, q~n) = argmax At,T(q)P(qe\[q).</S>
			<S sid="140" ssid="65">(4) &lt;t,T,q&gt;eLattice Setting t~ n = T, we collect the arguments &lt;t", t, q') E Lattice that maximized equation 2 by walking backwards in time: rn rn m (ti+i,ti , qi+i) = ,p m ,g~ ~, argmax At,,,t 7 (q) (q~ Iq ) t, ,t,_ x(q~) &lt;t,',t T ,a,&gt;?Lattice (5) for i &gt; 1, until we reach t~ = 0.</S>
			<S sid="141" ssid="66">Now, q~.</S>
			<S sid="142" ssid="67">q~ is the best sequence of phrase hypotheses (read backwards).</S>
			<S sid="143" ssid="68">3.3 Pass ing Ambigu i ty to the Next Layer.</S>
			<S sid="144" ssid="69">The process can move on to layer 2 after the first layer is computed.</S>
			<S sid="145" ssid="70">The results of the first layer are taken as the base and all context-free rules that apply to the base are retrieved.</S>
			<S sid="146" ssid="71">These again form a lattice and we can calculate the best path for layer 2.</S>
			<S sid="147" ssid="72">The Markov Model for layer 1 operates on the output of the Markov Model for part-of-speech tagging, the model for layer 2 operates on the out- put of layer 1, and so on.</S>
			<S sid="148" ssid="73">Hence the name of the processing model: Cascaded Markov Models.</S>
			<S sid="149" ssid="74">Very often, it is not sufficient o calculate just the best sequences of words/tags/phrases.</S>
			<S sid="150" ssid="75">This may result in an error leading to subsequent er- rors at higher layers.</S>
			<S sid="151" ssid="76">Therefore, we not only cal- culate the best sequence but several top ranked sequences.</S>
			<S sid="152" ssid="77">The number of the passed hypotheses depends on a pre-defined threshold ~ &gt; 1.</S>
			<S sid="153" ssid="78">We se- lect all hypotheses with probabilities P &gt; Pbest/8.</S>
			<S sid="154" ssid="79">These are passed to the next layer together with their probabilities.</S>
			<S sid="155" ssid="80">3.4 Parameter Est imat ion.</S>
			<S sid="156" ssid="81">Transitional parameters for Cascaded Markov Models are estimated separately for each layer.</S>
			<S sid="157" ssid="82">Output parameters are the same for all layers, they are taken from the stochastic ontext-free grammar that is read off the treebank.</S>
			<S sid="158" ssid="83">Training on annotated ata is straight forward.</S>
			<S sid="159" ssid="84">First, we number the layers, starting with 0 for the part-of-speech layer.</S>
			<S sid="160" ssid="85">Subsequently, informa- tion for the different layers is collected.</S>
			<S sid="161" ssid="86">Each sentence in the corpus represents one training sequence for each layer.</S>
			<S sid="162" ssid="87">This sequence consists of the tags or phrases at that layer.</S>
			<S sid="163" ssid="88">If a span is not covered by a phrase at a particular layer, we take the elements of the highest layer below the actual layer.</S>
			<S sid="164" ssid="89">Figure 5 shows the train- ing sequences for layers 0 - 4 generated from the sentence in figure 1.</S>
			<S sid="165" ssid="90">Each sentence gives rise to one training sequence for each layer.</S>
			<S sid="166" ssid="91">Contextual parameter estimation is done in analogy to models for part-of-speech tagging, and the same smooth- ing techniques can be applied.</S>
			<S sid="167" ssid="92">We use a linear interpolation of uni-, bi-, and trigram models.</S>
			<S sid="168" ssid="93">A stochastic ontext-free grammar is read off the corpus.</S>
			<S sid="169" ssid="94">The rules derived from the anno- tated sentence in figure 1 are also shown in figure 5.</S>
			<S sid="170" ssid="95">The grammar is used to estimate output pa-.</S>
			<S sid="171" ssid="96">rameters for all Markov Models, i.e., they are the 122 Proceedings of EACL '99 L.3er Sequence S NP VAFIN VP 2 ART ADJA NN PP VAFIN VP.</S>
			<S sid="172" ssid="97">i ART ADJA NN APPR CNP VAFIN PP VVPP 0 ART ADJA NN APPR NN KON NN VAFIN APPR ART CARD ADJA NN VVPP.</S>
			<S sid="173" ssid="98">Context-free rules and their frequencies S --&gt; NP VAFIN VP (1) PP ~ APPR ART CARD ADJA NN (1) NP --&gt; ART ADJA NN PP (1) ART --&gt; Ein (1) PP .--)- APPR CNP (I) ADJA --).</S>
			<S sid="174" ssid="99">enormer (I) CNP ~ NN KON NN (I) . . .</S>
			<S sid="175" ssid="100">VP -+ PP VVPP (I) VVPP -+ aufgebracht (i) Figure 5: Training material generated from the sentence in figure 1.</S>
			<S sid="176" ssid="101">The sequences for layers 0 - 4 are used to estimate transition probabilities for the corresponding Markov Models.</S>
			<S sid="177" ssid="102">The context-free rules are used to estimate the SCFG, which determines the output probabilities of the Markov Models.</S>
			<S sid="178" ssid="103">same for all layers.</S>
			<S sid="179" ssid="104">We could estimate probabil- ities for rules separately for each layer, but this would worsen the sparse data problem.</S>
	</SECTION>
	<SECTION title="Experiments. " number="4">
			<S sid="180" ssid="1">This section reports on results of experiments with Cascaded Markov Models.</S>
			<S sid="181" ssid="2">We evaluate chunking precision and recall, i.e., the recognition of kernel NPs and PPs.</S>
			<S sid="182" ssid="3">These exclude prenominal adverbs and postnominal PPs and relative clauses, but in- clude all other prenominal modifiers, which can be fairly complex adjective phrases in German.</S>
			<S sid="183" ssid="4">Fig- ure 6 shows an example of a complex N P and the output of the parsing process.</S>
			<S sid="184" ssid="5">For our experiments, we use the NEGRA corpus (Skut et al, 1997).</S>
			<S sid="185" ssid="6">It consists of German news- paper texts (Frankfurter Rundschau) that are an- notated with predicate-argument structures.</S>
			<S sid="186" ssid="7">We extracted all structures for NPs, PPs, APs, AVPs (i.e., we mainly excluded sentences, VPs and co- ordinations).</S>
			<S sid="187" ssid="8">The version of the corpus used con- tains 17,000 sentences (300,000 tokens).</S>
			<S sid="188" ssid="9">The corpus was divided into training part (90%) and test part (10%).</S>
			<S sid="189" ssid="10">Experiments were repeated 10 times, results were averaged.</S>
			<S sid="190" ssid="11">Cross-evaluation was done in order to obtain more reliable perfor- mance estimates than by just one test run.</S>
			<S sid="191" ssid="12">Input of the process is a sequence of words (divided into sentences), output are part-of-speech tags and structures like the one indicated in figure 6.</S>
			<S sid="192" ssid="13">Figure 7 presents results of the chunking task using Cascaded Markov Models for different num- bers of layers.</S>
			<S sid="193" ssid="14">2 Percentages are slightly below those presented by (Skut and Brants, 1998).</S>
			<S sid="194" ssid="15">But 2The figure indicates unlabeled recall and preci- sion.</S>
			<S sid="195" ssid="16">Differences to labeled recall/precision are small, since the number of different non-terminal categories is very restricted.</S>
			<S sid="196" ssid="17">they started with correctly tagged data, so our task is harder since it includes the process of part- of-speech tagging.</S>
			<S sid="197" ssid="18">Recall increases with the number of layers.</S>
			<S sid="198" ssid="19">It ranges from 54.0% for 1 layer to 84.8% for 9 lay- ers.</S>
			<S sid="199" ssid="20">This could be expected, because the num- ber of layers determines the number of phrases that can be parsed by the model.</S>
			<S sid="200" ssid="21">The additional line for "topline recall" indicates the percentage of phrases that can be parsed by Cascaded Markov Models with the given number of layers.</S>
			<S sid="201" ssid="22">All nodes that belong to higher layers cannot be recognized.</S>
			<S sid="202" ssid="23">Precision slightly decreases with the number of layers.</S>
			<S sid="203" ssid="24">It ranges from 91.4% for 1 layer to 88.3% for 9 layers.</S>
			<S sid="204" ssid="25">The F-score is a weighted combination of recall R and precision P and defined as follows: F - (/32 + 1)PR /32p -b R (6) /3 is a parameter ncoding the importance of recall and precision.</S>
			<S sid="205" ssid="26">Using an equal weight for both (/3 = 1), the maximum F-score is reached for 7 layers (F =86.5%).</S>
			<S sid="206" ssid="27">The part-of-speech tagging accuracy slightly in- creases with the number of Markov Model layers (bottom line in figure 7).</S>
			<S sid="207" ssid="28">This can be explained by top-down decisions of Cascaded Markov Models.</S>
			<S sid="208" ssid="29">A model at a higher layer can select a tag with a lower probability if this increases the probability at that layer.</S>
			<S sid="209" ssid="30">Thereby some errors made at lower layers can be corrected.</S>
			<S sid="210" ssid="31">This leads to the increase of up to 0.3% in accuracy.</S>
			<S sid="211" ssid="32">Results for chunking Penn Treebank data were previously presented by several authors (Ramshaw and Marcus, 1995; Argamon et al, 1998; Veenstra, 1998; Cardie and Pierce, 1998).</S>
			<S sid="212" ssid="33">These are not directly comparable to our results, 123 Proceedings of EACL '99 die von der Bundesregierung angestrebte Entlassung des Bundes aus einzelnen Bereichen ART APPR ART NN ADJA NN ART NN APPR ADJA NN the by the government intended dismissal (of) the federation f rom several areas 'the dismissal of the federation from several areas that was intended by the government' Figure 6: Complex German NP and chunker output (postnominal genitive and PP are not attached).</S>
			<S sid="213" ssid="34">.2 ~9 ~9 NEGKA Corpus: Chunking Results 100 90 80 7O 6O 1 96.2 Topline Recall rain = 72.6% max= 100.0% ? Recall u ~ 0 0 0 0 = = = - rain = 54.0% / I ~ max= 84.8% o Precision rain = 88.3% max= 91.4% I I i I I I I 2 3 4 5 6 7 8 9 # Layers 96.3 96.4 96.4 96.5 96.5 96.5 96.5 96.5 % POS accuracy Figure 7: NP/PP chunking results for the NEGI~A Corpus.</S>
			<S sid="214" ssid="35">The diagram shows recall and precision depending on the number of layers that are used for parsing.</S>
			<S sid="215" ssid="36">Layer 0 is used for part-of-speech tagging, for which tagging accuracies are given at the bottom line.</S>
			<S sid="216" ssid="37">Topline recall is the maximum recall possible for that number of layers.</S>
			<S sid="217" ssid="38">because they processed a different language and generated only one layer of structure (the chunk boundaries), while our algorithm also generates the internal structure of chunks.</S>
			<S sid="218" ssid="39">But generally, Cascaded Markov Models can be reduced to gen- erating just one layer and can be trained on Penn Treebank data.</S>
	</SECTION>
	<SECTION title="Conc lus ion  and  Future  Work. " number="5">
			<S sid="219" ssid="1">We have presented a new parsing model for shal- low processing.</S>
			<S sid="220" ssid="2">The model parses by represent- ing each layer of the resulting structure as a sep- arate Markov Model.</S>
			<S sid="221" ssid="3">States represent categories of words and phrases, outputs consist of partial parse trees.</S>
			<S sid="222" ssid="4">Starting with the layer for part-of- speech tags, the output of lower layers is passed as input to higher layers.</S>
			<S sid="223" ssid="5">This type of model is restricted to a fixed maximum number of layers in the parsed structure, since the number of Markov Models is determined before parsing.</S>
			<S sid="224" ssid="6">While the effects of these restrictions on the parsing of sen- tences and VPs are still to be investigated, we ob- tain excellent results for the chunking task, i.e., the recognition of kernel NPs and PPs.</S>
			<S sid="225" ssid="7">It will be interesting to see in future work if Cas- caded Markov Models can be extended to parsing sentences and VPs.</S>
			<S sid="226" ssid="8">The average number of lay- ers per sentence in the NEGRA corpus is only 5; 99.9% of all sentences have 10 or less layers, thus a very limited number of Markov Models would be sufficient.</S>
			<S sid="227" ssid="9">Cascaded Markov Models add left-to-right context-information t context-free parsing.</S>
			<S sid="228" ssid="10">This contextualization is orthogonal to another impor- tant trend in language processing: lexicalization.</S>
			<S sid="229" ssid="11">We expect that the combination of these tech- niques results in improved models.</S>
			<S sid="230" ssid="12">We presented the generation ofparameters from annotated corpora and used linear interpolation for smoothing.</S>
			<S sid="231" ssid="13">While we do not expect ira- 124 Proceedings of EACL '99 provements by re-estimation on raw data, other smoothing methods may result in better accura- cies, e.g. the maximum entropy framework.</S>
			<S sid="232" ssid="14">Yet, the high complexity of maximum entropy parame- ter estimation requires careful pre-selection of rel- evant linguistic features.</S>
			<S sid="233" ssid="15">The presented Markov Models act as filters.</S>
			<S sid="234" ssid="16">The probability of the resulting structure is de- termined only based on a stochastic ontext-free grammar.</S>
			<S sid="235" ssid="17">While building the structure bottom up, parses that are unlikely according to the Markov Models are pruned.</S>
			<S sid="236" ssid="18">We think that a combined probability measure would improve the model.</S>
			<S sid="237" ssid="19">For this, a mathematically motivated com- bination needs to be determined.</S>
			<S sid="238" ssid="20">Acknowledgements I would like to thank Hans Uszkoreit, Yves Schabes, Wojciech Skut, and Matthew Crocker for fruitful discussions and valuable comments on the work presented here.</S>
			<S sid="239" ssid="21">And I am grateful to Sabine Kramp for proof-reading this paper.</S>
			<S sid="240" ssid="22">This research was funded by the Deutsche Forschungsgemeinschaft in the Sonderforschungs- bereich 378, Project C3 NEGRA.</S>
	</SECTION>
</PAPER>
