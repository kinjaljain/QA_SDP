<PAPER>
  <S sid="0">Joint Feature Selection in Distributed Stochastic Learning for Large-Scale Discriminative Training in SMT</S>
  <ABSTRACT>
    <S sid="1" ssid="1">With a few exceptions, discriminative training in statistical machine translation (SMT) has been content with tuning weights for large feature sets on small development data.</S>
    <S sid="2" ssid="2">Evidence from machine learning indicates that increasing the training sample size results in better prediction.</S>
    <S sid="3" ssid="3">The goal of this paper is to show that this common wisdom can also be brought to bear upon SMT.</S>
    <S sid="4" ssid="4">We deploy local features for SCFG-based SMT that can be read off from rules at runtime, and present a learnalgorithm that applies regularization for joint feature selection over distributed stochastic learning processes.</S>
    <S sid="5" ssid="5">We present experiments on learning on 1.5 million training sentences, and show significant improvements over tuning discriminative models on small development sets.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">The standard SMT training pipeline combines scores from large count-based translation models and language models with a few other features and tunes these using the well-understood line-search technique for error minimization of Och (2003).</S>
    <S sid="7" ssid="2">If only a handful of dense features need to be tuned, minimum error rate training can be done on small tuning sets and is hard to beat in terms of accuracy and efficiency.</S>
    <S sid="8" ssid="3">In contrast, the promise of largescale discriminative training for SMT is to scale to arbitrary types and numbers of features and to provide sufficient statistical support by parameter estimation on large sample sizes.</S>
    <S sid="9" ssid="4">Features may be lexicalized and sparse, non-local and overlapping, or be designed to generalize beyond surface statistics by incorporating part-of-speech or syntactic labels.</S>
    <S sid="10" ssid="5">The modeler&#8217;s goals might be to identify complex properties of translations, or to counter errors of pretrained translation models and language models by explicitly down-weighting translations that exhibit certain undesired properties.</S>
    <S sid="11" ssid="6">Various approaches to feature engineering for discriminative models have been presented (see Section 2), however, with a few exceptions, discriminative learning in SMT has been confined to training on small tuning sets of a few thousand examples.</S>
    <S sid="12" ssid="7">This contradicts theoretical and practical evidence from machine learning that suggests that larger training samples should be beneficial to improve prediction also in SMT.</S>
    <S sid="13" ssid="8">Why is this?</S>
    <S sid="14" ssid="9">One possible reason why discriminative SMT has mostly been content with small tuning sets lies in the particular design of the features themselves.</S>
    <S sid="15" ssid="10">For example, the features introduced by Chiang et al. (2008) and Chiang et al.</S>
    <S sid="16" ssid="11">(2009) for an SCFG model for Chinese/English translation are of two types: The first type explicitly counters overestimates of rule counts, or rules with bad overlap points, bad rewrites, or with undesired insertions of target-side terminals.</S>
    <S sid="17" ssid="12">These features are specified in handcrafted lists based on a thorough analysis of a tuning set.</S>
    <S sid="18" ssid="13">Such finely hand-crafted features will find sufficient statistical support on a few thousand examples and thus do not benefit from larger training sets.</S>
    <S sid="19" ssid="14">The second type of features deploys external information such as syntactic parses or word alignments to penalize bad reorderings or undesired translations of phrases that cross syntactic constraints.</S>
    <S sid="20" ssid="15">At large scale, extraction of such features quickly becomes infeasible because of costly generation and storage of linguistic annotations.</S>
    <S sid="21" ssid="16">Another possible reason why large training data did not yet show the expected improvements in discriminative SMT is a special overfitting problem of current popular online learning techniques.</S>
    <S sid="22" ssid="17">This is due to stochastic learning on a per-example basis where a weight update on a misclassified example may apply only to a small fraction of data that have been seen before.</S>
    <S sid="23" ssid="18">Thus many features will not generalize well beyond the training examples on which they were introduced.</S>
    <S sid="24" ssid="19">The goal of this paper is to investigate if and how it is possible to benefit from scaling discriminative training for SMT to large training sets.</S>
    <S sid="25" ssid="20">We deploy generic features for SCFG-based SMT that can efficiently be read off from rules at runtime.</S>
    <S sid="26" ssid="21">Such features include rule ids, rule-local n-grams, or types of rule shapes.</S>
    <S sid="27" ssid="22">Another crucial ingredient of our approach is a combination of parallelized stochastic learning with feature selection inspired by multi-task learning.</S>
    <S sid="28" ssid="23">The simple but effective idea is to randomly divide training data into evenly sized shards, use stochastic learning on each shard in parallel, while performing f1/f2 regularization for joint feature selection on the shards after each epoch, before starting a new epoch with a reduced feature vector averaged across shards.</S>
    <S sid="29" ssid="24">Iterative feature selection procedure is the key to both efficiency and improved prediction: Without interleaving parallelized stochastic learning with feature selection our largest experiments would not be feasible.</S>
    <S sid="30" ssid="25">Selecting features jointly across shards and averaging does counter the overfitting effect that is inherent to stochastic updating.</S>
    <S sid="31" ssid="26">Our resulting models are learned on large data sets, but they are small and outperform models that tune feature sets of various sizes on small development sets.</S>
    <S sid="32" ssid="27">Our software is freely available as a part of the cdec1 framework.</S>
  </SECTION>
  <SECTION title="2 Related Work" number="2">
    <S sid="33" ssid="1">The great promise of discriminative training for SMT is the possibility to design arbitrarily expressive, complex, or overlapping features in great numbers.</S>
    <S sid="34" ssid="2">The focus of many approaches thus has been on feature engineering and on adaptations of machine learning algorithms to the special case of SMT (where gold standard rankings have to be created automatically).</S>
    <S sid="35" ssid="3">Examples for adapted algorithms include Maximum-Entropy Models (Och and Ney, 2002; Blunsom et al., 2008), Pairwise Ranking Perceptrons (Shen et al., 2004; Watanabe et al., 2006; Hopkins and May, 2011), Structured Perceptrons (Liang et al., 2006a), Boosting (Duh and Kirchhoff, 2008; Wellington et al., 2009), Structured SVMs (Tillmann and Zhang, 2006; Hayashi et al., 2009), MIRA (Watanabe et al., 2007; Chiang et al., 2008; Chiang et al., 2009), and others.</S>
    <S sid="36" ssid="4">Adaptations of the loss functions underlying such algorithms to SMT have recently been described as particular forms of ramp loss optimization (McAllester and Keshet, 2011; Gimpel and Smith, 2012).</S>
    <S sid="37" ssid="5">All approaches have been shown to scale to large feature sets and all include some kind of regularization method.</S>
    <S sid="38" ssid="6">However, most approaches have been confined to training on small tuning sets.</S>
    <S sid="39" ssid="7">Exceptions where discriminative SMT has been used on large training data are Liang et al. (2006a) who trained 1.5 million features on 67,000 sentences, Blunsom et al.</S>
    <S sid="40" ssid="8">(2008) who trained 7.8 million rules on 100,000 sentences, or Tillmann and Zhang (2006) who used 230,000 sentences for training.</S>
    <S sid="41" ssid="9">Our approach is inspired by Duh et al. (2010) who applied multi-task learning for improved generalization in n-best reranking.</S>
    <S sid="42" ssid="10">In contrast to our work, Duh et al. (2010) did not incorporate multitask learning into distributed learning, but defined tasks as n-best lists, nor did they develop new algorithms, but used off-the-shelf multi-task tools.</S>
  </SECTION>
  <SECTION title="3 Local Features for Synchronous CFGs" number="3">
    <S sid="43" ssid="1">The work described in this paper is based on the SMT framework of hierarchical phrase-based translation (Chiang, 2005; Chiang, 2007).</S>
    <S sid="44" ssid="2">Translation rules are extracted from word-aligned parallel sentences and can be seen as productions of a synchronous CFG.</S>
    <S sid="45" ssid="3">Examples are rules like (1)-(3) shown in Figure 1.</S>
    <S sid="46" ssid="4">Local features are designed to be readable directly off the rule at decoding time.</S>
    <S sid="47" ssid="5">We use three rule templates in our work: Rule identifiers: These features identify each rule by a unique identifier.</S>
    <S sid="48" ssid="6">Such features correspond to the relative frequencies of rewrites rules used in standard models.</S>
    <S sid="49" ssid="7">Rule n-grams: These features identify n-grams of consecutive items in a rule.</S>
    <S sid="50" ssid="8">We use bigrams on source-sides of rules.</S>
    <S sid="51" ssid="9">Such features identify possible source side phrases and thus can give preference to rules including them.2 Rule shape: These features are indicators that abstract away from lexical items to templates that identify the location of sequences of terminal symbols in relation to non-terminal symbols, on both the source- and target-sides of each rule used.</S>
    <S sid="52" ssid="10">For example, both rules (1) and (2) map to the same indicator, namely that a rule is being used that consists of a (NT, term*, NT, term*) pattern on its source side, and an (NT, term*, NT) pattern on its target side.</S>
    <S sid="53" ssid="11">Rule (3) maps to a different template, that of (NT, term*, NT) on source and target sides.</S>
  </SECTION>
  <SECTION title="4 Joint Feature Selection in Distributed" number="4">
    <S sid="54" ssid="1">The following discussion of learning methods is based on pairwise ranking in a Stochastic Gradient Descent (SGD) framework.</S>
    <S sid="55" ssid="2">The resulting algorithms can be seen as variants of the perceptron algorithm.</S>
    <S sid="56" ssid="3">Let each translation candidate be represented by a feature vector x E IRD where preference pairs for training are prepared by sorting translations according to smoothed sentence-wise BLEU score (Liang et al., 2006a) against the reference.</S>
    <S sid="57" ssid="4">For a preference pair xj = (x(1) j , we consider the following hinge loss-type objective function: where (a)+ = max(0, a) , w E IRD is a weight vector, and (&#183;, &#183;) denotes the standard vector dot product.</S>
    <S sid="58" ssid="5">Instantiating SGD to the following stochastic subgradient leads to the perceptron algorithm for pairwise ranking3 (Shen and Joshi, 2005): &#65533; Our baseline algorithm 1 (SDG) scales pairwise ranking to large scale scenarios.</S>
    <S sid="59" ssid="6">The algorithm takes an average over the final weight updates of each epoch instead of keeping a record of all weight updates for final averaging (Collins, 2002) or for voting (Freund and Schapire, 1999).</S>
    <S sid="60" ssid="7">Algorithm 1 SGD: int I, T, float 77 Initialize w0,0,0 F 0. for epochs t F 0 ... T &#8722; 1: do for all i E {0 ...</S>
    <S sid="61" ssid="8">I &#8722; 11: do Decode ith input with wt,i,0. for all pairs xj, j E {0 ... P// &#8722; 11: do While stochastic learning exhibits a runtime behavior that is linear in sample size (Bottou, 2004), very large datasets can make sequential processing infeasible.</S>
    <S sid="62" ssid="9">Algorithm 2 (MixSGD) addresses this problem by parallelization in the framework of MapReduce (Dean and Ghemawat, 2004).</S>
    <S sid="63" ssid="10">Algorithm 2 MixSGD: int I, T, Z, float 77 Partition data into Z shards, each of size S F I/Z; distribute to machines. for all shards z E {1 ... Z1: parallel do Initialize wz,0,0,0 F 0. for epochs t F 0 ... T &#8722; 1: do for all i E {0 ... S &#8722; 11: do Decode ith input with wz,t,i,0.</S>
    <S sid="64" ssid="11">for all pairs xj, j E {0 ... P &#8722;//11: do Algorithm 2 is a variant of the SimuParallelSGD algorithm of Zinkevich et al. (2010) or equivalently of the parameter mixing algorithm of McDonald et al.</S>
    <S sid="65" ssid="12">(2010).</S>
    <S sid="66" ssid="13">The key idea of algorithm 2 is to partition the data into disjoint shards, then train SGD on each shard in parallel, and after training mix the final parameters from each shard by averaging.</S>
    <S sid="67" ssid="14">The algorithm requires no communication between machines until the end.</S>
    <S sid="68" ssid="15">McDonald et al. (2010) also present an iterative mixing algorithm where weights are mixed from each shard after training a single epoch of the perceptron in parallel on each shard.</S>
    <S sid="69" ssid="16">The mixed weight vector is re-sent to each shard to start another epoch of training in parallel on each shard.</S>
    <S sid="70" ssid="17">This algorithm corresponds to our algorithm 3 (IterMixSGD).</S>
    <S sid="71" ssid="18">Parameter mixing by averaging will help to ease the feature sparsity problem, however, keeping feature vectors on the scale of several million features in memory can be prohibitive.</S>
    <S sid="72" ssid="19">If network latency is a bottleneck, the increased amount of information sent across the network after each epoch may be a further problem.</S>
    <S sid="73" ssid="20">Our algorithm 4 (IterSelSGD) introduces feature selection into distributed learning for increased efficiency and as a more radical measure against overfitting.</S>
    <S sid="74" ssid="21">The key idea is to view shards as tasks, and to apply methods for joint feature selection from multi-task learning to achieve small sets of features that are useful across all tasks or shards.</S>
    <S sid="75" ssid="22">Our algorithm represents weights in a Z-by-D matrix W = [wz1 |... |wzZ]T of stacked D-dimensional weight vectors across Z shards.</S>
    <S sid="76" ssid="23">We compute the f2 norm of the weights in each feature column, sort features by this value, and keep K features in the model.</S>
    <S sid="77" ssid="24">This feature selection procedure is done after each epoch.</S>
    <S sid="78" ssid="25">Reduced weight vectors are mixed and the result is re-sent to each shard to start another epoch of parallel training on each shard.</S>
    <S sid="79" ssid="26">This algorithm can be seen as an instance of f1/f2 regularization as follows: Let wd be the dth column vector of W, representing the weights for the dth feature across tasks/shards. f1/f2 regularization penalizes weights W by the weighted f1/f2 norm</S>
  </SECTION>
  <SECTION title="A||W||1,2 = A" number="5">
    <S sid="80" ssid="1">Each f2 norm of a weight column represents the relevance of the corresponding feature across tasks/shards.</S>
    <S sid="81" ssid="2">The f1 sum of the f2 norms enforces a selection among features based on these norms.</S>
    <S sid="82" ssid="3">Consider for example the two 5-feature, 3task weight matrices in Figure 2.</S>
    <S sid="83" ssid="4">Assuming the same loss for both matrices, the right-hand side matrix is preferred because of a smaller f1/f2 norm (12 instead of 18).</S>
    <S sid="84" ssid="5">This matrix shares features across tasks which leads to larger f2 norms for some columns (here ||w1||2 and ||w2||2) and forces other columns to zero.</S>
    <S sid="85" ssid="6">This results in shrinking the matrix to those features that are useful across all tasks.</S>
    <S sid="86" ssid="7">Our algorithm is related to Obozinski et al. (2010)&#8217;s approach to f1/f2 regularization where feature columns are incrementally selected based on the f2 norms of the gradient vectors corresponding to feature columns.</S>
    <S sid="87" ssid="8">Their algorithm is itself an extension of gradient-based feature selection based on the f1 norm, e.g., Perkins et al. (2003).4 In contrast to these approaches we approximate the gradient by using the weights given by the ranking algorithm itself.</S>
    <S sid="88" ssid="9">This relates our work to weight-based recursive feature elimination (RFE) (Lal et al., 2006).</S>
    <S sid="89" ssid="10">Furthermore, algorithm 4 performs feature selection based on a choice of meta-parameter of K features instead of by thresholding a regularization meta-parameter A, however, these techniques are equivalent and can be transformed into each other.</S>
  </SECTION>
  <SECTION title="5 Experiments" number="6">
    <S sid="90" ssid="1">The datasets used in our experiments are versions of the News Commentary (nc), News Crawl (crawl) and Europarl (ep) corpora described in Table 1.</S>
    <S sid="91" ssid="2">The translation direction is German-to-English.</S>
    <S sid="92" ssid="3">The SMT framework used in our experiments is hierarchical phrase-based translation (Chiang, 2007).</S>
    <S sid="93" ssid="4">We use the cdec decoder5 (Dyer et al., 2010) and induce SCFG grammars from two sets of symmetrized alignments using the method described by Chiang (2007).</S>
    <S sid="94" ssid="5">All data was tokenized and lowercased; German compounds were split (Dyer, 2009).</S>
    <S sid="95" ssid="6">For word alignment of the news-commentary data, we used GIZA++ (Och and Ney, 2000); for aligning the Europarl data, we used the Berkeley aligner (Liang et al., 2006b).</S>
    <S sid="96" ssid="7">Before training, we collect all the grammar rules necessary to translate each individual sentence into separate files (so-called per-sentence grammars) (Lopez, 2007).</S>
    <S sid="97" ssid="8">When decoding, cdec loads the appropriate file immediately prior to translation of the sentence.</S>
    <S sid="98" ssid="9">The computational overhead is minimal compared to the expense of decoding.</S>
    <S sid="99" ssid="10">Also, deploying disk space instead of memory fits perfectly into the MapReduce framework we are working in.</S>
    <S sid="100" ssid="11">Furthermore, the extraction of grammars for training is done in a leave-one-out fashion (Zollmann and Sima&#8217;an, 2005) where rules are extracted for a parallel sentence pair only if the same rules are found in other sentences of the corpus as well.</S>
    <S sid="101" ssid="12">3-gram (news-commentary) and 5-gram (Europarl) language models are trained on the data described in Table 1, using the SRILM toolkit (Stolcke, 2002) and binarized for efficient querying using kenlm (Heafield, 2011).</S>
    <S sid="102" ssid="13">For the 5-gram language models, we replaced every word in the lm training data with &lt;unk&gt; that did not appear in the English part of the parallel training data to build an open vocabulary language model.</S>
    <S sid="103" ssid="14">Training data for discriminative learning are prepared by comparing a 100-best list of translations against a single reference using smoothed persentence BLEU (Liang et al., 2006a).</S>
    <S sid="104" ssid="15">From the BLEU-reordered n-best list, translations were put into sets for the top 10% level (HI), the middle 80% level (MID), and the bottom 10% level (LOW).</S>
    <S sid="105" ssid="16">These level sets are used for multipartite ranking where translation pairs are built between the elements in HI-MID, HI-LOW, and MID-LOW, but not between translations inside sets on the same level.</S>
    <S sid="106" ssid="17">This idea is depicted graphically in Figure 3.</S>
    <S sid="107" ssid="18">The intuition is to ensure that good translations are preferred over bad translations without teasing apart small differences.</S>
    <S sid="108" ssid="19">For evaluation, we used the mteval-v11b.pl script to compute lowercased BLEU-4 scores (Papineni et al., 2001).</S>
    <S sid="109" ssid="20">Statistical significance was measured using an Approximate Randomization test (Noreen, 1989; Riezler and Maxwell, 2005).</S>
    <S sid="110" ssid="21">All experiments for training on dev sets were carried out on a single computer.</S>
    <S sid="111" ssid="22">For grammar extraction and training of the full data set we used a 30 node hadoop Map/Reduce cluster that can handle 300 jobs at once.</S>
    <S sid="112" ssid="23">We split the data into 2290 shards for the ep runs and 141 shards for the nc runs, each shard holding about 1,000 sentences, which corresponds to the dev set size of the nc data set.</S>
    <S sid="113" ssid="24">The baseline learner in our experiments is a pairwise ranking perceptron that is used on various features and training data and plugged into various metaalgorithms for distributed processing.</S>
    <S sid="114" ssid="25">The perceptron algorithm itself compares favorably to related learning techniques such as the MIRA adaptation of Chiang et al. (2008).</S>
    <S sid="115" ssid="26">Figure 4 gives a boxplot depicting BLEU-4 results for 100 runs of the MIRA implementation of the cdec package, tuned on dev-nc, and evaluated on the respective test set test-nc.6 We see a high variance (whiskers denote standard deviations) around a median of 27.2 BLEU and a mean of 27.1 BLEU.</S>
    <S sid="116" ssid="27">The fluctuation of results is due to sampling training examples from the translation hy6MIRA was used with default meta parameters: 250 hypothesis list to search for oracles, regularization strength C = 0.01 and using 15 passes over the input.</S>
    <S sid="117" ssid="28">It optimized IBM BLEU-4.</S>
    <S sid="118" ssid="29">The initial weight vector was 0. commentary (nc) data.</S>
    <S sid="119" ssid="30">Feature groups are 12 dense features (default), rule identifiers (id), rule n-gram (ng), and rule shape (shape).</S>
    <S sid="120" ssid="31">Statistical significance at p-level &lt; 0.05 of a result difference on the test set to a different algorithm applied to the same feature group is indicated by raised algorithm number.</S>
    <S sid="121" ssid="32">&#8224; indicates statistically significant differences to best result across features groups for same algorithm, indicated in bold face.</S>
    <S sid="122" ssid="33">@ indicates the optimal number of epochs chosen on the devtest set. pergraph as is done in the cdec implementation of MIRA.</S>
    <S sid="123" ssid="34">We found similar fluctuations for the cdec implementations of PRO (Hopkins and May, 2011) or hypergraph-MERT (Kumar et al., 2009) both of which depend on hypergraph sampling.</S>
    <S sid="124" ssid="35">In contrast, the perceptron is deterministic when started from a zero-vector of weights and achieves favorable 28.0 BLEU on the news-commentary test set.</S>
    <S sid="125" ssid="36">Since we are interested in relative improvements over a stable baseline, we restrict our attention in all following experiments to the perceptron.7 Table 2 shows the results of the experimental comparison of the 4 algorithms of Section 4.</S>
    <S sid="126" ssid="37">The 7Absolute improvements would be possible, e.g., by using larger language models or by adding news data to the ep training set when evaluating on crawl test sets (see, e.g., Dyer et al. (2011)), however, this is not the focus of this paper. default features include 12 dense models defined on SCFG rules;8 The sparse features are the 3 templates described in Section 3.</S>
    <S sid="127" ssid="38">All feature weights were tuned together using algorithms 1-4.</S>
    <S sid="128" ssid="39">If not indicated otherwise, the perceptron was run for 10 epochs with learning rate q = 0.0001, started at zero weight vector, using deduplicated 100-best lists.</S>
    <S sid="129" ssid="40">The results on the news-commentary (nc) data show that training on the development set does not benefit from adding large feature sets &#8211; BLEU result differences between tuning 12 default features and tuning the full set of 180,000 features are not significant.</S>
    <S sid="130" ssid="41">However, scaling all features to the full training set shows significant improvements for algorithm 3, and especially for algorithm 4, which gains 0.8 BLEU points over tuning 12 features on the development set.</S>
    <S sid="131" ssid="42">The number of features rises to 4.7 million without feature selection, which iteratively selects 100,000 features with best f2 norm values across shards.</S>
    <S sid="132" ssid="43">Feature templates such as rule n-grams and rule shapes only work if iterative mixing (algorithm 3) or feature selection (algorithm 4) are used.</S>
    <S sid="133" ssid="44">Adding rule id features works in combination with other sparse features.</S>
    <S sid="134" ssid="45">Table 3 shows results for algorithms 1 and 4 on the Europarl data (ep) for different devtest and test sets.</S>
    <S sid="135" ssid="46">Europarl data were used in all runs for training and for setting the meta-parameter of number of epochs.</S>
    <S sid="136" ssid="47">Testing was done on the Europarl test set and news crawl test data from the years 2010 and 2011.</S>
    <S sid="137" ssid="48">Here tuning large feature sets on the respective dev sets yields significant improvements of around 2 BLEU points over tuning the 12 default features on the dev sets.</S>
    <S sid="138" ssid="49">Another 0.5 BLEU points (test-crawl11) or even 1.3 BLEU points (testcrawl10) are gained when scaling to the full training set using iterative features selection.</S>
    <S sid="139" ssid="50">Result differences on the Europarl test set were not significant for moving from dev to full train set.</S>
    <S sid="140" ssid="51">Algorithms 2 and 3 were infeasible to run on Europarl data beyond one epoch because features vectors grew too large to be kept in memory.</S>
  </SECTION>
  <SECTION title="6 Discussion" number="7">
    <S sid="141" ssid="1">We presented an approach to scaling discriminative learning for SMT not only to large feature sets but also to large sets of parallel training data.</S>
    <S sid="142" ssid="2">Since inference for SMT (unlike many other learning problems) is very expensive, especially on large training sets, good parallelization is key.</S>
    <S sid="143" ssid="3">Our approach is made feasible and effective by applying joint feature selection across distributed stochastic learning processes.</S>
    <S sid="144" ssid="4">Furthermore, our local features are efficiently computable at runtime.</S>
    <S sid="145" ssid="5">Our algorithms and features are generic and can easily be reimplemented and make our results relevant across datasets and language pairs.</S>
    <S sid="146" ssid="6">In future work, we would like to investigate more sophisticated features, better learners, and in general improve the components of our system that have been neglected in the current investigation of relative improvements by scaling the size of data and feature sets.</S>
    <S sid="147" ssid="7">Ultimately, since our algorithms are inspired by multi-task learning, we would like to apply them to scenarios where a natural definition of tasks is given.</S>
    <S sid="148" ssid="8">For example, patent data can be characterized along the dimensions of patent classes and patent text fields (W&#168;aschle and Riezler, 2012) and thus are well suited for multi-task translation.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="8">
    <S sid="149" ssid="1">Stefan Riezler and Patrick Simianer were supported in part by DFG grant &#8220;Cross-language Learning-toRank for Patent Retrieval&#8221;.</S>
    <S sid="150" ssid="2">Chris Dyer was supported in part by a MURI grant &#8220;The linguisticcore approach to structured translation and analysis of low-resource languages&#8221; from the US Army Research Office and a grant &#8220;Unsupervised Induction of Multi-Nonterminal Grammars for SMT&#8221; from Google, Inc.</S>
  </SECTION>
</PAPER>
