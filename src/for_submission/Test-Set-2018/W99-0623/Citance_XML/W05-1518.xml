<PAPER>
  <S sid="0">Improving Parsing Accuracy By Combining Diverse Dependency Parsers</S>
  <ABSTRACT>
    <S sid="1" ssid="1">This paper explores the possibilities of improving parsing results by combining outputs of several parsers.</S>
    <S sid="2" ssid="2">To some extent, we are porting the ideas of Henderson and Brill (1999) to the world of dependency structures.</S>
    <S sid="3" ssid="3">We differ from them in exploring context features more deeply.</S>
    <S sid="4" ssid="4">All our experiments were conducted on Czech but the method is language-independent.</S>
    <S sid="5" ssid="5">We were able to significantly improve over the best parsing result for the given setting, known so far.</S>
    <S sid="6" ssid="6">Moreover, our experiments show that even parsers far below the state of the art can contribute to the total improvement.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="7" ssid="1">Difficult and important NLP problems have the property of attracting whole range of researchers, which often leads to the development of several different approaches to the same problem.</S>
    <S sid="8" ssid="2">If these approaches are independent enough in terms of not producing the same kinds of errors, there is a hope that their combination can bring further improvement to the field.</S>
    <S sid="9" ssid="3">While improving any single approach gets more and more difficult once some threshold has been touched, exploring the potential of approach combination should never be omitted, provided three or more approaches are available.</S>
    <S sid="10" ssid="4">Combination techniques have been successfully applied to part of speech tagging (van Halteren et al., 1998; Brill and Wu, 1998; van Halteren et al., 2001).</S>
    <S sid="11" ssid="5">In both cases the investigators were able to achieve significant improvements over the previous best tagging results.</S>
    <S sid="12" ssid="6">Similar advances have been made in machine translation (Frederking and Nirenburg, 1994), speech recognition (Fiscus, 1997), named entity recognition (Borthwick et al., 1998), partial parsing (Inui and Inui, 2000), word sense disambiguation (Florian and Yarowsky, 2002) and question answering (Chu-Carroll et al., 2003).</S>
    <S sid="13" ssid="7">Brill and Hladk&#225; (Haji et al., 1998) have first explored committee-based dependency parsing.</S>
    <S sid="14" ssid="8">However, they generated multiple parsers from a single one using bagging (Breiman, 1994).</S>
    <S sid="15" ssid="9">There have not been more sufficiently good parsers available.</S>
    <S sid="16" ssid="10">A successful application of voting and of a stacked classifier to constituent parsing followed in (Henderson and Brill, 1999).</S>
    <S sid="17" ssid="11">The authors have investigated two combination techniques (constituent voting and na&#239;ve Bayes), and two ways of their application to the (full) parsing: parser switching, and similarity switching.</S>
    <S sid="18" ssid="12">They were able to gain 1.6 constituent F-score, using their most successful technique.</S>
    <S sid="19" ssid="13">In our research, we focused on dependency parsing.</S>
    <S sid="20" ssid="14">One of the differences against Henderson and Brill&#8217;s situation is that a dependency parser has to assign exactly one governing node (parent word) to each word.</S>
    <S sid="21" ssid="15">Unlike the number of constituents in constituency-based frameworks, the number of dependencies is known in advance, the parser only has to assign a link (number 0 through N) to each word.</S>
    <S sid="22" ssid="16">In that sense, a dependency parser is similar to classifiers like POS taggers.</S>
    <S sid="23" ssid="17">Unless it deliberately fails to assign a parent to a word (or assigns several alternate parents to a word), there is no need for precision &amp; recall.</S>
    <S sid="24" ssid="18">Instead, a single metric called accuracy is used.</S>
    <S sid="25" ssid="19">On the other hand, a dependency parser is not a real classifier: the number of its &#8220;classes&#8221; is theoretically unlimited (natural numbers), and no generalization can be drawn about objects belonging to the same &#8220;class&#8221; (words that &#8211; sometimes &#8211; appeared to find their parent at the position i).</S>
    <S sid="26" ssid="20">A combination of dependency parsers does not necessarily grant the resulting dependency structure being cycle-free.</S>
    <S sid="27" ssid="21">(This contrasts to not introducing crossing brackets in constituent parsing, which is granted according to Henderson and Brill.)</S>
    <S sid="28" ssid="22">We address the issue in 4.4.</S>
    <S sid="29" ssid="23">The rest of this paper is organized as follows: in Sections 2 and 3 we introduce the data and the component parsers, respectively.</S>
    <S sid="30" ssid="24">In Section 4 we discuss several combining techniques, and in Section 5 we describe the results of the corresponding experiments.</S>
    <S sid="31" ssid="25">We finally compare our results to the previous work and conclude.</S>
  </SECTION>
  <SECTION title="2 The data" number="2">
    <S sid="32" ssid="1">To test our parser combination techniques, we use the Prague Dependency Treebank 1.0 (PDT; Haji et al. 2001).</S>
    <S sid="33" ssid="2">All the individual parsers have been trained on its analytical-level training section (73,088 sentences; 1,255,590 tokens).</S>
    <S sid="34" ssid="3">The PDT analytical d-test section has been partitioned into two data sets, Tune (last 77 files; 3646 sentences; 63,353 tokens) and Test (first 76 files; 3673 sentences; 62,677 tokens).</S>
    <S sid="35" ssid="4">We used the Tune set to train the combining classifiers if needed.</S>
    <S sid="36" ssid="5">The Test data were used to evaluate the approach.</S>
    <S sid="37" ssid="6">Neither the member parsers, nor the combining classifier have seen this data set during their respective learning runs.</S>
  </SECTION>
  <SECTION title="3 Component parsers" number="3">
    <S sid="38" ssid="1">The parsers involved in our experiments are summarized in Table 1.</S>
    <S sid="39" ssid="2">Most of them use unique strategies, the exception being thl and thr, which differ only in the direction in which they process the sentence.</S>
    <S sid="40" ssid="3">The table also shows individual parser accuracies on our Test data.</S>
    <S sid="41" ssid="4">There are two state-of-the art parsers, four not-so-good parsers, and one quite poor parser.</S>
    <S sid="42" ssid="5">We included the two best parsers (ec+mc) in all our experiments, and tested the contributions of various selections from the rest.</S>
    <S sid="43" ssid="6">The necessary assumption for a meaningful combination is that the outputs of the individual parsers are sufficiently uncorrelated, i.e. that the parsers do not produce the same errors.</S>
    <S sid="44" ssid="7">If some test data, attached correctly.</S>
    <S sid="45" ssid="8">The &#8220;single parser&#8221; part shows shares of the data where a single parser is the only one to know how to parse them.</S>
    <S sid="46" ssid="9">The sizes of the shares should correlate with the uniqueness of the individual parsers&#8217; strategies and with their contributions to the overall success.</S>
    <S sid="47" ssid="10">The &#8220;at least&#8221; rows give clues about what can be got by majority voting (if the number represents over 50 % of parsers compared) or by hypothetical oracle selection (if the number represents 50 % of the parsers or less, an oracle would generally be needed to point to the parsers that know the correct attachment). parsers produced too similar results, there would be the danger that they push all their errors through, blocking any meaningful opinion of the other parsers.</S>
    <S sid="48" ssid="11">To check the assumption, we counted (on the Tune data set) for each parser in a given parser selection the number of dependencies that only this parser finds correctly.</S>
    <S sid="49" ssid="12">We show the results in Table 2.</S>
    <S sid="50" ssid="13">They demonstrate that all parsers are independent on the others at least to some extent.</S>
  </SECTION>
  <SECTION title="4 Combining techniques" number="4">
    <S sid="51" ssid="1">Each dependency structure consists of a number of dependencies, one for each word in the sentence.</S>
    <S sid="52" ssid="2">Our goal is to tell for each word, which parser is the most likely to pick its dependency correctly.</S>
    <S sid="53" ssid="3">By combining the selected dependencies we aim at producing a better structure.</S>
    <S sid="54" ssid="4">We call the complex system (of component parsers plus the selector) the superparser.</S>
    <S sid="55" ssid="5">Although we have shown how different strategies lead to diversity in the output of the parsers, there is little chance that any parser will be able to push through the things it specializes in.</S>
    <S sid="56" ssid="6">It is very difficult to realize that a parser is right if most of the others reject its proposal.</S>
    <S sid="57" ssid="7">Later in this section we assess this issue; however, the real power is in majority of votes.</S>
    <S sid="58" ssid="8">The simplest approach is to let the member parsers vote.</S>
    <S sid="59" ssid="9">At least three parsers are needed.</S>
    <S sid="60" ssid="10">If there are exactly three, only the following situations really matter: 1) two parsers outvote the third one; 2) a tie: each parser has got a unique opinion.</S>
    <S sid="61" ssid="11">It would be democratic in the case of a tie to select randomly.</S>
    <S sid="62" ssid="12">However, that hardly makes sense once we know the accuracy of the involved parsers on the Tune set.</S>
    <S sid="63" ssid="13">Especially if there is such a large gap between the parsers&#8217; performance, the best parser (here ec) should get higher priority whenever there is no clear majority of votes.</S>
    <S sid="64" ssid="14">Van Halteren et al. (1998) have generalized this approach for higher number of classifiers in their TotPrecision voting method.</S>
    <S sid="65" ssid="15">The vote of each classifier (parser) is weighted by their respective accuracy.</S>
    <S sid="66" ssid="16">For instance, mc + z&#382; would outvote ec + thr, as 81.7 + 74.3 = 156 &gt; 154.6 = 83.6 + 71.0.</S>
    <S sid="67" ssid="17">If the world were ideal, we would have an oracle, able to always select the right parser.</S>
    <S sid="68" ssid="18">In such situation our selection of parsers would grant the accuracy as high as 95.8 %.</S>
    <S sid="69" ssid="19">We attempt to imitate the oracle by a second-level classifier that learns from the Tune set, which parser is right in which situations.</S>
    <S sid="70" ssid="20">Such technique is usually called classifier stacking.</S>
    <S sid="71" ssid="21">Parallel to (van Halteren et al., 1998), we ran experiments with two stacked classifiers, Memory-Based, and Decision-Tree-Based.</S>
    <S sid="72" ssid="22">This approach roughly corresponds to (Henderson and Brill, 1999)&#8217;s Na&#239;ve Bayes parse hybridization.</S>
    <S sid="73" ssid="23">For applications preferring precision to recall, unbalanced combination &#8212; introduced by Brill and Hladk&#225; in (Haji et al., 1998) &#8212; may be of interest.</S>
    <S sid="74" ssid="24">In this method, all dependencies proposed by at least half of the parsers are included.</S>
    <S sid="75" ssid="25">The term unbalanced reflects the fact that now precision is not equal to recall: some nodes lack the link to their parents.</S>
    <S sid="76" ssid="26">Moreover, if the number of member parsers is even, a node may get two parents.</S>
    <S sid="77" ssid="27">Finally, we develop a technique that considers the whole dependency structure rather than each dependency alone.</S>
    <S sid="78" ssid="28">The aim is to check that the resulting structure is a tree, i.e. that the dependencyselecting procedure does not introduce cycles.1 Henderson and Brill prove that under certain conditions, their parse hybridization approach cannot 1 One may argue that &#8220;treeness&#8221; is not a necessary condition for the resulting structure, as the standard accuracy measure does not penalize non-trees in any way (other than that there is at least one bad dependency).</S>
    <S sid="79" ssid="29">Interestingly enough, even some of the component parsers do not produce correct trees at all times.</S>
    <S sid="80" ssid="30">However, non-trees are both linguistically and technically problematic, and it is good to know how far we can get with the condition in force. introduce crossing brackets.</S>
    <S sid="81" ssid="31">This might seem an analogy to our problem of introducing cycles &#8212; but unfortunately, no analogical lemma holds.</S>
    <S sid="82" ssid="32">As a workaround, we have investigated a crossbreed approach between Henderson and Brill&#8217;s Parser Switching, and the voting methods described above.</S>
    <S sid="83" ssid="33">After each step, all dependencies that would introduce a cycle are banned.</S>
    <S sid="84" ssid="34">The algorithm is greedy &#8212; we do not try to search the space of dependency combinations for other paths.</S>
    <S sid="85" ssid="35">If there are no allowed dependencies for a word, the whole structure built so far is abandoned, and the structure suggested by the best component parser is used instead.2</S>
  </SECTION>
  <SECTION title="5 Experiments and results 5.1 Voting" number="5">
    <S sid="86" ssid="1">We have run several experiments where various selections of parsers were granted the voting right.</S>
    <S sid="87" ssid="2">In all experiments, the TotPrecision voting scheme of (van Halteren et al., 1998) has been used.</S>
    <S sid="88" ssid="3">The voting procedure is only very moderately affected by the Tune set (just the accuracy figures on that set are used), so we present results on both the Test and the Tune sets.</S>
    <S sid="89" ssid="4">According to the results, the best voters pool consists of the two best parsers, accompanied by the two average parsers.</S>
    <S sid="90" ssid="5">The table also suggests that number of diverse strategies is more important than keeping high quality standard with all the parsers.</S>
    <S sid="91" ssid="6">Apart from the worst parser, all the other together do better than just the first two and the fourth.</S>
    <S sid="92" ssid="7">(On the other hand, the first three parsers are much harder to beat, apparently due to the extreme distance of the strategy of z&#382; parser from all the others.)</S>
    <S sid="93" ssid="8">Even the worst performing parser combination (all seven parsers) is significantly3 better than the best component parser alone.</S>
    <S sid="94" ssid="9">We also investigated some hand-invented voting schemes but no one we found performed better than the ec+mc+z&#382;+dz combination above.</S>
    <S sid="95" ssid="10">Some illustrative results are given in the Table 4.</S>
    <S sid="96" ssid="11">Votes were not weighted by accuracy in these experiments, but accuracy is reflected in the priority given to ec and mc by the human scheme inventor.</S>
    <S sid="97" ssid="12">We explored several ways of using context in pools of three parsers.4 If we had only three parsers we could use context to detect two kinds of situations: posal but even so the third one should win.</S>
    <S sid="98" ssid="13">Most likely the only reasonable instance is that ec wins over mc + the third one.</S>
    <S sid="99" ssid="14">&#8220;Context&#8221; can be represented by a number of features, starting at morphological tags and ending up at complex queries on structural descriptions.</S>
    <S sid="100" ssid="15">We tried a simple memory-based approach, and a more complex approach based on decision trees.</S>
    <S sid="101" ssid="16">Within the memory-based approach, we use just the core features the individual parsers themselves train on: the POS tags (morphological tags or mtags in PDT terminology).</S>
    <S sid="102" ssid="17">We consider the m-tag of the dependent node, and the m-tags of the governors proposed by the individual parsers.</S>
    <S sid="103" ssid="18">We learn the context-based strengths and weaknesses of the individual parsers on their performance on the Tune data set.</S>
    <S sid="104" ssid="19">In the following table, there are some examples of contexts in which ec is better than the common opinion of mc + dz.</S>
    <S sid="105" ssid="20">For the experiment with decision trees, we used the C5 software package, a commercial version of the well-known C4.5 tool (Quinlan, 1993).</S>
    <S sid="106" ssid="21">We considered the following features: For each of the four nodes involved (the dependent and the three governors suggested by the three component parsers): whether they do or do not share opinions The decision tree was trained only on situations where at least one of the three parsers was right and at least one was wrong. on the Tune data set, accuracy figures apply to the Test data set.</S>
    <S sid="107" ssid="22">Context-free results are given for the sake of comparison.</S>
    <S sid="108" ssid="23">It turns out that there is very low potential in the context to improve the accuracy (the improvement is significant, though).</S>
    <S sid="109" ssid="24">The behavior of the parsers is too noisy as to the possibility of formulating some rules for prediction, when a particular parser is right.</S>
    <S sid="110" ssid="25">C5 alone provided a supporting evidence for that hypothesis, as it selected a very simple tree from all the features, just 5 levels deep (see Figure 1).</S>
    <S sid="111" ssid="26">Henderson and Brill (1999) also reported that context did not help them to outperform simple voting.</S>
    <S sid="112" ssid="27">Although it is risky to generalize these observations for other treebanks and parsers, our environment is quite different from that of Henderson and Brill, so the similarity of the two observations is at least suspicious.</S>
    <S sid="113" ssid="28">Finally we compare the balanced and unbalanced methods.</S>
    <S sid="114" ssid="29">Expectedly, precision of the unbalanced combination of odd number of parsers rose while recall dropped slightly.</S>
    <S sid="115" ssid="30">A different situation is observed if even number of parsers vote and more than one parent can be selected for a node.</S>
    <S sid="116" ssid="31">In such case, precision drops in favor of recall.</S>
    <S sid="117" ssid="32">Out of the 3,673 sentences in our Test set, 91.6 % have been rendered as correct trees in the balanced decision-tree based stacking of ec+mc+z&#382;+dz (our best method).</S>
    <S sid="118" ssid="33">After we banned cycles, the accuracy dropped from 97.0 to 96.9 %.</S>
  </SECTION>
  <SECTION title="6 Comparison to related work" number="6">
    <S sid="119" ssid="1">Brill and Hladk&#225; in (Haji et al., 1998) were able to improve the original accuracy of the mc parser on PDT 0.5 e-test data from 79.1 to 79.9 (a nearly 4% reduction of the error rate).</S>
    <S sid="120" ssid="2">Their unbalanced5 voting pushed the F-measure from 79.1 to 80.4 (6% error reduction).</S>
    <S sid="121" ssid="3">We pushed the balanced accuracy of the ec parser from 85.0 to 87.0 (13% error reduction), and the unbalanced F-measure from 85.0 to 87.7 (18% reduction).</S>
    <S sid="122" ssid="4">Note however that there were different data and component parsers (Haji et al. found bagging the best parser better than combining it with other that-time-available parsers).</S>
    <S sid="123" ssid="5">This is the first time that several strategically different dependency parsers have been combined.</S>
    <S sid="124" ssid="6">(Henderson and Brill, 1999) improved their best parser&#8217;s F-measure of 89.7 to 91.3, using their na&#239;ve Bayes voting on the Penn TreeBank constituent structures (16% error reduction).</S>
    <S sid="125" ssid="7">Here, even the framework is different, as has been explained above.</S>
  </SECTION>
  <SECTION title="7 Conclusion" number="7">
    <S sid="126" ssid="1">We have tested several approaches to combining of dependency parsers.</S>
    <S sid="127" ssid="2">Accuracy-aware voting of the four best parsers turned out to be the best method, as it significantly improved the accuracy of the best component from 85.0 to 87.0 % (13 % error</S>
  </SECTION>
  <SECTION title="5 Also alternatively called unrestricted." number="8">
    <S sid="128" ssid="1">rate reduction).</S>
    <S sid="129" ssid="2">The unbalanced voting lead to the precision as high as 90.2 %, while the F-measure of 87.3 % outperforms the best result of balanced voting (87.0).</S>
    <S sid="130" ssid="3">At the same time, we found that employing context to this task is very difficult even with a wellknown and widely used machine-learning approach.</S>
    <S sid="131" ssid="4">The methods are language independent, though the amount of accuracy improvement may vary according to the performance of the available parsers.</S>
    <S sid="132" ssid="5">Although voting methods are themselves not new, as far as we know we are the first to propose and evaluate their usage in full dependency parsing.</S>
  </SECTION>
  <SECTION title="8 Acknowledgements" number="9">
    <S sid="133" ssid="1">Our thanks go to the creators of the parsers used here for making their systems available.</S>
    <S sid="134" ssid="2">The research has been supported by the Czech Academy of Sciences, the &#8220;Information Society&#8221; program, project No.</S>
    <S sid="135" ssid="3">1ET101470416.</S>
  </SECTION>
</PAPER>
