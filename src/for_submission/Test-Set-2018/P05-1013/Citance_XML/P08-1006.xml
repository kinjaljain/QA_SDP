<PAPER>
  <S sid="0">Task-oriented Evaluation of Syntactic Parsers and Their Representations</S>
  <ABSTRACT>
    <S sid="1" ssid="1">This paper presents a comparative evaluation of several state-of-the-art English parsers based on different frameworks.</S>
    <S sid="2" ssid="2">Our approach is to measure the impact of each parser when it is used as a component of an information extraction system that performs protein-protein interaction (PPI) identification in biomedical papers.</S>
    <S sid="3" ssid="3">We evaluate eight parsers (based on dependency parsing, phrase structure parsing, or deep parsing) using five different parse representations.</S>
    <S sid="4" ssid="4">We run a PPI system with several combinations of parser and parse representation, and examine their impact on PPI identification accuracy.</S>
    <S sid="5" ssid="5">Our experiments show that the levels of accuracy obtained with these different parsers are similar, but that accuracy improvements vary when the parsers are retrained with domain-specific data.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">Parsing technologies have improved considerably in the past few years, and high-performance syntactic parsers are no longer limited to PCFG-based frameworks (Charniak, 2000; Klein and Manning, 2003; Charniak and Johnson, 2005; Petrov and Klein, 2007), but also include dependency parsers (McDonald and Pereira, 2006; Nivre and Nilsson, 2005; Sagae and Tsujii, 2007) and deep parsers (Kaplan et al., 2004; Clark and Curran, 2004; Miyao and Tsujii, 2008).</S>
    <S sid="7" ssid="2">However, efforts to perform extensive comparisons of syntactic parsers based on different frameworks have been limited.</S>
    <S sid="8" ssid="3">The most popular method for parser comparison involves the direct measurement of the parser output accuracy in terms of metrics such as bracketing precision and recall, or dependency accuracy.</S>
    <S sid="9" ssid="4">This assumes the existence of a gold-standard test corpus, such as the Penn Treebank (Marcus et al., 1994).</S>
    <S sid="10" ssid="5">It is difficult to apply this method to compare parsers based on different frameworks, because parse representations are often framework-specific and differ from parser to parser (Ringger et al., 2004).</S>
    <S sid="11" ssid="6">The lack of such comparisons is a serious obstacle for NLP researchers in choosing an appropriate parser for their purposes.</S>
    <S sid="12" ssid="7">In this paper, we present a comparative evaluation of syntactic parsers and their output representations based on different frameworks: dependency parsing, phrase structure parsing, and deep parsing.</S>
    <S sid="13" ssid="8">Our approach to parser evaluation is to measure accuracy improvement in the task of identifying protein-protein interaction (PPI) information in biomedical papers, by incorporating the output of different parsers as statistical features in a machine learning classifier (Yakushiji et al., 2005; Katrenko and Adriaans, 2006; Erkan et al., 2007; S&#230;tre et al., 2007).</S>
    <S sid="14" ssid="9">PPI identification is a reasonable task for parser evaluation, because it is a typical information extraction (IE) application, and because recent studies have shown the effectiveness of syntactic parsing in this task.</S>
    <S sid="15" ssid="10">Since our evaluation method is applicable to any parser output, and is grounded in a real application, it allows for a fair comparison of syntactic parsers based on different frameworks.</S>
    <S sid="16" ssid="11">Parser evaluation in PPI extraction also illuminates domain portability.</S>
    <S sid="17" ssid="12">Most state-of-the-art parsers for English were trained with the Wall Street Journal (WSJ) portion of the Penn Treebank, and high accuracy has been reported for WSJ text; however, these parsers rely on lexical information to attain high accuracy, and it has been criticized that these parsers may overfit to WSJ text (Gildea, 2001; Klein and Manning, 2003).</S>
    <S sid="18" ssid="13">Another issue for discussion is the portability of training methods.</S>
    <S sid="19" ssid="14">When training data in the target domain is available, as is the case with the GENIA Treebank (Kim et al., 2003) for biomedical papers, a parser can be retrained to adapt to the target domain, and larger accuracy improvements are expected, if the training method is sufficiently general.</S>
    <S sid="20" ssid="15">We will examine these two aspects of domain portability by comparing the original parsers with the retrained parsers.</S>
  </SECTION>
  <SECTION title="2 Syntactic Parsers and Their Representations" number="2">
    <S sid="21" ssid="1">This paper focuses on eight representative parsers that are classified into three parsing frameworks: dependency parsing, phrase structure parsing, and deep parsing.</S>
    <S sid="22" ssid="2">In general, our evaluation methodology can be applied to English parsers based on any framework; however, in this paper, we chose parsers that were originally developed and trained with the Penn Treebank or its variants, since such parsers can be re-trained with GENIA, thus allowing for us to investigate the effect of domain adaptation.</S>
    <S sid="23" ssid="3">Because the shared tasks of CoNLL-2006 and CoNLL-2007 focused on data-driven dependency parsing, it has recently been extensively studied in parsing research.</S>
    <S sid="24" ssid="4">The aim of dependency parsing is to compute a tree structure of a sentence where nodes are words, and edges represent the relations among words.</S>
    <S sid="25" ssid="5">Figure 1 shows a dependency tree for the sentence &#8220;IL-8 recognizes and activates CXCR1.&#8221; An advantage of dependency parsing is that dependency trees are a reasonable approximation of the semantics of sentences, and are readily usable in NLP applications.</S>
    <S sid="26" ssid="6">Furthermore, the efficiency of popular approaches to dependency parsing compare favorable with those of phrase structure parsing or deep parsing.</S>
    <S sid="27" ssid="7">While a number of approaches have been proposed for dependency parsing, this paper focuses on two typical methods.</S>
    <S sid="28" ssid="8">MST McDonald and Pereira (2006)&#8217;s dependency parser,1 based on the Eisner algorithm for projective dependency parsing (Eisner, 1996) with the secondorder factorization.</S>
    <S sid="29" ssid="9">KSDEP Sagae and Tsujii (2007)&#8217;s dependency parser,2 based on a probabilistic shift-reduce algorithm extended by the pseudo-projective parsing technique (Nivre and Nilsson, 2005).</S>
    <S sid="30" ssid="10">Owing largely to the Penn Treebank, the mainstream of data-driven parsing research has been dedicated to the phrase structure parsing.</S>
    <S sid="31" ssid="11">These parsers output Penn Treebank-style phrase structure trees, although function tags and empty categories are stripped off (Figure 2).</S>
    <S sid="32" ssid="12">While most of the state-of-the-art parsers are based on probabilistic CFGs, the parameterization of the probabilistic model of each parser varies.</S>
    <S sid="33" ssid="13">In this work, we chose the following four parsers.</S>
    <S sid="34" ssid="14">NO-RERANK Charniak (2000)&#8217;s parser, based on a lexicalized PCFG model of phrase structure trees.3 The probabilities of CFG rules are parameterized on carefully hand-tuned extensive information such as lexical heads and symbols of ancestor/sibling nodes.</S>
    <S sid="35" ssid="15">RERANK Charniak and Johnson (2005)&#8217;s reranking parser.</S>
    <S sid="36" ssid="16">The reranker of this parser receives nbest4 parse results from NO-RERANK, and selects the most likely result by using a maximum entropy model with manually engineered features.</S>
    <S sid="37" ssid="17">BERKELEY Berkeley&#8217;s parser (Petrov and Klein, 2007).5 The parameterization of this parser is optimized automatically by assigning latent variables to each nonterminal node and estimating the parameters of the latent variables by the EM algorithm (Matsuzaki et al., 2005).</S>
    <S sid="38" ssid="18">STANFORD Stanford&#8217;s unlexicalized parser (Klein and Manning, 2003).6 Unlike NO-RERANK, probabilities are not parameterized on lexical heads.</S>
    <S sid="39" ssid="19">Recent research developments have allowed for efficient and robust deep parsing of real-world texts (Kaplan et al., 2004; Clark and Curran, 2004; Miyao and Tsujii, 2008).</S>
    <S sid="40" ssid="20">While deep parsers compute theory-specific syntactic/semantic structures, predicate argument structures (PAS) are often used in parser evaluation and applications.</S>
    <S sid="41" ssid="21">PAS is a graph structure that represents syntactic/semantic relations among words (Figure 3).</S>
    <S sid="42" ssid="22">The concept is therefore similar to CoNLL dependencies, though PAS expresses deeper relations, and may include reentrant structures.</S>
    <S sid="43" ssid="23">In this work, we chose the two versions of the Enju parser (Miyao and Tsujii, 2008).</S>
    <S sid="44" ssid="24">ENJU The HPSG parser that consists of an HPSG grammar extracted from the Penn Treebank, and a maximum entropy model trained with an HPSG treebank derived from the Penn Treebank.7 ENJU-GENIA The HPSG parser adapted to biomedical texts, by the method of Hara et al. (2007).</S>
    <S sid="45" ssid="25">Because this parser is trained with both WSJ and GENIA, we compare it parsers that are retrained with GENIA (see section 3.3).</S>
  </SECTION>
  <SECTION title="3 Evaluation Methodology" number="3">
    <S sid="46" ssid="1">In our approach to parser evaluation, we measure the accuracy of a PPI extraction system, in which This study demonstrates that IL-8 recognizes and activates CXCR1, CXCR2, and the Duffy antigen by distinct mechanisms.</S>
    <S sid="47" ssid="2">The molar ratio of serum retinol-binding protein (RBP) to transthyretin (TTR) is not useful to assess vitamin A status during infection in hospitalised children. the parser output is embedded as statistical features of a machine learning classifier.</S>
    <S sid="48" ssid="3">We run a classifier with features of every possible combination of a parser and a parse representation, by applying conversions between representations when necessary.</S>
    <S sid="49" ssid="4">We also measure the accuracy improvements obtained by parser retraining with GENIA, to examine the domain portability, and to evaluate the effectiveness of domain adaptation.</S>
    <S sid="50" ssid="5">PPI extraction is an NLP task to identify protein pairs that are mentioned as interacting in biomedical papers.</S>
    <S sid="51" ssid="6">Because the number of biomedical papers is growing rapidly, it is impossible for biomedical researchers to read all papers relevant to their research; thus, there is an emerging need for reliable IE technologies, such as PPI identification.</S>
    <S sid="52" ssid="7">Figure 4 shows two sentences that include protein names: the former sentence mentions a protein interaction, while the latter does not.</S>
    <S sid="53" ssid="8">Given a protein pair, PPI extraction is a task of binary classification; for example, (IL-8, CXCR1) is a positive example, and (RBP, TTR) is a negative example.</S>
    <S sid="54" ssid="9">Recent studies on PPI extraction demonstrated that dependency relations between target proteins are effective features for machine learning classifiers (Katrenko and Adriaans, 2006; Erkan et al., 2007; Sartre et al., 2007).</S>
    <S sid="55" ssid="10">For the protein pair IL-8 and CXCR1 in Figure 4, a dependency parser outputs a dependency tree shown in Figure 1.</S>
    <S sid="56" ssid="11">From this dependency tree, we can extract a dependency path shown in Figure 5, which appears to be a strong clue in knowing that these proteins are mentioned as interacting.</S>
    <S sid="57" ssid="12">We follow the PPI extraction method of S&#230;tre et al. (2007), which is based on SVMs with SubSet Tree Kernels (Collins and Duffy, 2002; Moschitti, 2006), while using different parsers and parse representations.</S>
    <S sid="58" ssid="13">Two types of features are incorporated in the classifier.</S>
    <S sid="59" ssid="14">The first is bag-of-words features, which are regarded as a strong baseline for IE systems.</S>
    <S sid="60" ssid="15">Lemmas of words before, between and after the pair of target proteins are included, and the linear kernel is used for these features.</S>
    <S sid="61" ssid="16">These features are commonly included in all of the models.</S>
    <S sid="62" ssid="17">Filtering by a stop-word list is not applied because this setting made the scores higher than S&#230;tre et al. (2007)&#8217;s setting.</S>
    <S sid="63" ssid="18">The other type of feature is syntactic features.</S>
    <S sid="64" ssid="19">For dependency-based parse representations, a dependency path is encoded as a flat tree as depicted in Figure 6 (prefix &#8220;r&#8221; denotes reverse relations).</S>
    <S sid="65" ssid="20">Because a tree kernel measures the similarity of trees by counting common subtrees, it is expected that the system finds effective subsequences of dependency paths.</S>
    <S sid="66" ssid="21">For the PTB representation, we directly encode phrase structure trees.</S>
    <S sid="67" ssid="22">It is widely believed that the choice of representation format for parser output may greatly affect the performance of applications, although this has not been extensively investigated.</S>
    <S sid="68" ssid="23">We should therefore evaluate the parser performance in multiple parse representations.</S>
    <S sid="69" ssid="24">In this paper, we create multiple parse representations by converting each parser&#8217;s default output into other representations when possible.</S>
    <S sid="70" ssid="25">This experiment can also be considered to be a comparative evaluation of parse representations, thus providing an indication for selecting an appropriate parse representation for similar IE tasks.</S>
    <S sid="71" ssid="26">Figure 7 shows our scheme for representation conversion.</S>
    <S sid="72" ssid="27">This paper focuses on five representations as described below.</S>
    <S sid="73" ssid="28">CoNLL The dependency tree format used in the 2006 and 2007 CoNLL shared tasks on dependency parsing.</S>
    <S sid="74" ssid="29">This is a representation format supported by several data-driven dependency parsers.</S>
    <S sid="75" ssid="30">This representation is also obtained from Penn Treebank-style trees by applying constituent-to-dependency conversion8 (Johansson and Nugues, 2007).</S>
    <S sid="76" ssid="31">It should be noted, however, that this conversion cannot work perfectly with automatic parsing, because the conversion program relies on function tags and empty categories of the original Penn Treebank.</S>
    <S sid="77" ssid="32">PTB Penn Treebank-style phrase structure trees without function tags and empty nodes.</S>
    <S sid="78" ssid="33">This is the default output format for phrase structure parsers.</S>
    <S sid="79" ssid="34">We also create this representation by converting ENJU&#8217;s output by tree structure matching, although this conversion is not perfect because forms of PTB and ENJU&#8217;s output are not necessarily compatible.</S>
    <S sid="80" ssid="35">HD Dependency trees of syntactic heads (Figure 8).</S>
    <S sid="81" ssid="36">This representation is obtained by converting PTB trees.</S>
    <S sid="82" ssid="37">We first determine lexical heads of nonterminal nodes by using Bikel&#8217;s implementation of Collins&#8217; head detection algorithm9 (Bikel, 2004; Collins, 1997).</S>
    <S sid="83" ssid="38">We then convert lexicalized trees into dependencies between lexical heads.</S>
    <S sid="84" ssid="39">SD The Stanford dependency format (Figure 9).</S>
    <S sid="85" ssid="40">This format was originally proposed for extracting dependency relations useful for practical applications (de Marneffe et al., 2006).</S>
    <S sid="86" ssid="41">A program to convert PTB is attached to the Stanford parser.</S>
    <S sid="87" ssid="42">Although the concept looks similar to CoNLL, this representation does not necessarily form a tree structure, and is designed to express more fine-grained relations such as apposition.</S>
    <S sid="88" ssid="43">Research groups for biomedical NLP recently adopted this representation for corpus annotation (Pyysalo et al., 2007a) and parser evaluation (Clegg and Shepherd, 2007; Pyysalo et al., 2007b).</S>
    <S sid="89" ssid="44">PAS Predicate-argument structures.</S>
    <S sid="90" ssid="45">This is the default output format for ENJU and ENJU-GENIA.</S>
    <S sid="91" ssid="46">Although only CoNLL is available for dependency parsers, we can create four representations for the phrase structure parsers, and five for the deep parsers.</S>
    <S sid="92" ssid="47">Dotted arrows in Figure 7 indicate imperfect conversion, in which the conversion inherently introduces errors, and may decrease the accuracy.</S>
    <S sid="93" ssid="48">We should therefore take caution when comparing the results obtained by imperfect conversion.</S>
    <S sid="94" ssid="49">We also measure the accuracy obtained by the ensemble of two parsers/representations.</S>
    <S sid="95" ssid="50">This experiment indicates the differences and overlaps of information conveyed by a parser or a parse representation.</S>
    <S sid="96" ssid="51">Since the domain of our target text is different from WSJ, our experiments also highlight the domain portability of parsers.</S>
    <S sid="97" ssid="52">We run two versions of each parser in order to investigate the two types of domain portability.</S>
    <S sid="98" ssid="53">First, we run the original parsers trained with WSJ10 (39832 sentences).</S>
    <S sid="99" ssid="54">The results in this setting indicate the domain portability of the original parsers.</S>
    <S sid="100" ssid="55">Next, we run parsers re-trained with GENIA11 (8127 sentences), which is a Penn Treebankstyle treebank of biomedical paper abstracts.</S>
    <S sid="101" ssid="56">Accuracy improvements in this setting indicate the possibility of domain adaptation, and the portability of the training methods of the parsers.</S>
    <S sid="102" ssid="57">Since the parsers listed in Section 2 have programs for the training 10Some of the parser packages include parsing models trained with extended data, but we used the models trained with WSJ section 2-21 of the Penn Treebank.</S>
    <S sid="103" ssid="58">11The domains of GENIA and AImed are not exactly the same, because they are collected independently. with a Penn Treebank-style treebank, we use those programs as-is.</S>
    <S sid="104" ssid="59">Default parameter settings are used for this parser re-training.</S>
    <S sid="105" ssid="60">In preliminary experiments, we found that dependency parsers attain higher dependency accuracy when trained only with GENIA.</S>
    <S sid="106" ssid="61">We therefore only input GENIA as the training data for the retraining of dependency parsers.</S>
    <S sid="107" ssid="62">For the other parsers, we input the concatenation of WSJ and GENIA for the retraining, while the reranker of RERANK was not retrained due to its cost.</S>
    <S sid="108" ssid="63">Since the parsers other than NO-RERANK and RERANK require an external POS tagger, a WSJ-trained POS tagger is used with WSJtrained parsers, and geniatagger (Tsuruoka et al., 2005) is used with GENIA-retrained parsers.</S>
  </SECTION>
  <SECTION title="4 Experiments" number="4">
    <S sid="109" ssid="1">In the following experiments, we used AImed (Bunescu and Mooney, 2004), which is a popular corpus for the evaluation of PPI extraction systems.</S>
    <S sid="110" ssid="2">The corpus consists of 225 biomedical paper abstracts (1970 sentences), which are sentence-split, tokenized, and annotated with proteins and PPIs.</S>
    <S sid="111" ssid="3">We use gold protein annotations given in the corpus.</S>
    <S sid="112" ssid="4">Multi-word protein names are concatenated and treated as single words.</S>
    <S sid="113" ssid="5">The accuracy is measured by abstract-wise 10-fold cross validation and the one-answer-per-occurrence criterion (Giuliano et al., 2006).</S>
    <S sid="114" ssid="6">A threshold for SVMs is moved to adjust the balance of precision and recall, and the maximum f-scores are reported for each setting.</S>
    <S sid="115" ssid="7">Tables 1 and 2 show the accuracy obtained by using the output of each parser in each parse representation.</S>
    <S sid="116" ssid="8">The row &#8220;baseline&#8221; indicates the accuracy obtained with bag-of-words features.</S>
    <S sid="117" ssid="9">Table 3 shows the time for parsing the entire AImed corpus, and Table 4 shows the time required for 10-fold cross validation with GENIA-retrained parsers.</S>
    <S sid="118" ssid="10">When using the original WSJ-trained parsers (Table 1), all parsers achieved almost the same level of accuracy &#8212; a significantly better result than the baseline.</S>
    <S sid="119" ssid="11">To the extent of our knowledge, this is the first result that proves that dependency parsing, phrase structure parsing, and deep parsing perform equally well in a real application.</S>
    <S sid="120" ssid="12">Among these parsers, RERANK performed slightly better than the other parsers, although the difference in the f-score is small, while it requires much higher parsing cost.</S>
    <S sid="121" ssid="13">When the parsers are retrained with GENIA (Table 2), the accuracy increases significantly, demonstrating that the WSJ-trained parsers are not sufficiently domain-independent, and that domain adaptation is effective.</S>
    <S sid="122" ssid="14">It is an important observation that the improvements by domain adaptation are larger than the differences among the parsers in the previous experiment.</S>
    <S sid="123" ssid="15">Nevertheless, not all parsers had their performance improved upon retraining.</S>
    <S sid="124" ssid="16">Parser retraining yielded only slight improvements for RERANK, BERKELEY, and STANFORD, while larger improvements were observed for MST, KSDEP, NORERANK, and ENJU.</S>
    <S sid="125" ssid="17">Such results indicate the differences in the portability of training methods.</S>
    <S sid="126" ssid="18">A large improvement from ENJU to ENJU-GENIA shows the effectiveness of the specifically designed domain adaptation method, suggesting that the other parsers might also benefit from more sophisticated approaches for domain adaptation.</S>
    <S sid="127" ssid="19">While the accuracy level of PPI extraction is the similar for the different parsers, parsing speed differs significantly.</S>
    <S sid="128" ssid="20">The dependency parsers are much faster than the other parsers, while the phrase structure parsers are relatively slower, and the deep parsers are in between.</S>
    <S sid="129" ssid="21">It is noteworthy that the dependency parsers achieved comparable accuracy with the other parsers, while they are more efficient.</S>
    <S sid="130" ssid="22">The experimental results also demonstrate that PTB is significantly worse than the other representations with respect to cost for training/testing and contributions to accuracy improvements.</S>
    <S sid="131" ssid="23">The conversion from PTB to dependency-based representations is therefore desirable for this task, although it is possible that better results might be obtained with PTB if a different feature extraction mechanism is used.</S>
    <S sid="132" ssid="24">Dependency-based representations are competitive, while CoNLL seems superior to HD and SD in spite of the imperfect conversion from PTB to CoNLL.</S>
    <S sid="133" ssid="25">This might be a reason for the high performances of the dependency parsers that directly compute CoNLL dependencies.</S>
    <S sid="134" ssid="26">The results for ENJUCoNLL and ENJU-PAS show that PAS contributes to a larger accuracy improvement, although this does not necessarily mean the superiority of PAS, because two imperfect conversions, i.e., PAS-to-PTB and PTB-toCoNLL, are applied for creating CoNLL.</S>
    <S sid="135" ssid="27">Table 5 shows the accuracy obtained with ensembles of two parsers/representations (except the PTB format).</S>
    <S sid="136" ssid="28">Bracketed figures denote improvements from the accuracy with a single parser/representation.</S>
    <S sid="137" ssid="29">The results show that the task accuracy significantly improves by parser/representation ensemble.</S>
    <S sid="138" ssid="30">Interestingly, the accuracy improvements are observed even for ensembles of different representations from the same parser.</S>
    <S sid="139" ssid="31">This indicates that a single parse representation is insufficient for expressing the true potential of a parser.</S>
    <S sid="140" ssid="32">Effectiveness of the parser ensemble is also attested by the fact that it resulted in larger improvements.</S>
    <S sid="141" ssid="33">Further investigation of the sources of these improvements will illustrate the advantages and disadvantages of these parsers and representations, leading us to better parsing models and a better design for parse representations.</S>
    <S sid="142" ssid="34">PPI extraction experiments on AImed have been reported repeatedly, although the figures cannot be compared directly because of the differences in data preprocessing and the number of target protein pairs (S&#230;tre et al., 2007).</S>
    <S sid="143" ssid="35">Table 6 compares our best result with previously reported accuracy figures.</S>
    <S sid="144" ssid="36">Giuliano et al. (2006) and Mitsumori et al.</S>
    <S sid="145" ssid="37">(2006) do not rely on syntactic parsing, while the former applied SVMs with kernels on surface strings and the latter is similar to our baseline method.</S>
    <S sid="146" ssid="38">Bunescu and Mooney (2005) applied SVMs with subsequence kernels to the same task, although they provided only a precision-recall graph, and its f-score is around 50.</S>
    <S sid="147" ssid="39">Since we did not run experiments on protein-pair-wise cross validation, our system cannot be compared directly to the results reported by Erkan et al. (2007) and Katrenko and Adriaans (2006), while S&#230;tre et al.</S>
    <S sid="148" ssid="40">(2007) presented better results than theirs in the same evaluation criterion.</S>
  </SECTION>
  <SECTION title="5 Related Work" number="5">
    <S sid="149" ssid="1">Though the evaluation of syntactic parsers has been a major concern in the parsing community, and a couple of works have recently presented the comparison of parsers based on different frameworks, their methods were based on the comparison of the parsing accuracy in terms of a certain intermediate parse representation (Ringger et al., 2004; Kaplan et al., 2004; Briscoe and Carroll, 2006; Clark and Curran, 2007; Miyao et al., 2007; Clegg and Shepherd, 2007; Pyysalo et al., 2007b; Pyysalo et al., 2007a; Sagae et al., 2008).</S>
    <S sid="150" ssid="2">Such evaluation requires gold standard data in an intermediate representation.</S>
    <S sid="151" ssid="3">However, it has been argued that the conversion of parsing results into an intermediate representation is difficult and far from perfect.</S>
    <S sid="152" ssid="4">The relationship between parsing accuracy and task accuracy has been obscure for many years.</S>
    <S sid="153" ssid="5">Quirk and Corston-Oliver (2006) investigated the impact of parsing accuracy on statistical MT.</S>
    <S sid="154" ssid="6">However, this work was only concerned with a single dependency parser, and did not focus on parsers based on different frameworks.</S>
  </SECTION>
  <SECTION title="6 Conclusion and Future Work" number="6">
    <S sid="155" ssid="1">We have presented our attempts to evaluate syntactic parsers and their representations that are based on different frameworks; dependency parsing, phrase structure parsing, or deep parsing.</S>
    <S sid="156" ssid="2">The basic idea is to measure the accuracy improvements of the PPI extraction task by incorporating the parser output as statistical features of a machine learning classifier.</S>
    <S sid="157" ssid="3">Experiments showed that state-of-theart parsers attain accuracy levels that are on par with each other, while parsing speed differs significantly.</S>
    <S sid="158" ssid="4">We also found that accuracy improvements vary when parsers are retrained with domainspecific data, indicating the importance of domain adaptation and the differences in the portability of parser training methods.</S>
    <S sid="159" ssid="5">Although we restricted ourselves to parsers trainable with Penn Treebank-style treebanks, our methodology can be applied to any English parsers.</S>
    <S sid="160" ssid="6">Candidates include RASP (Briscoe and Carroll, 2006), the C&amp;C parser (Clark and Curran, 2004), the XLE parser (Kaplan et al., 2004), MINIPAR (Lin, 1998), and Link Parser (Sleator and Temperley, 1993; Pyysalo et al., 2006), but the domain adaptation of these parsers is not straightforward.</S>
    <S sid="161" ssid="7">It is also possible to evaluate unsupervised parsers, which is attractive since evaluation of such parsers with goldstandard data is extremely problematic.</S>
    <S sid="162" ssid="8">A major drawback of our methodology is that the evaluation is indirect and the results depend on a selected task and its settings.</S>
    <S sid="163" ssid="9">This indicates that different results might be obtained with other tasks.</S>
    <S sid="164" ssid="10">Hence, we cannot conclude the superiority of parsers/representations only with our results.</S>
    <S sid="165" ssid="11">In order to obtain general ideas on parser performance, experiments on other tasks are indispensable.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="7">
    <S sid="166" ssid="1">This work was partially supported by Grant-in-Aid for Specially Promoted Research (MEXT, Japan), Genome Network Project (MEXT, Japan), and Grant-in-Aid for Young Scientists (MEXT, Japan).</S>
  </SECTION>
</PAPER>
