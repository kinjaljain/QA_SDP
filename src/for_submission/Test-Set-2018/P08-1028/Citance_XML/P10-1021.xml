<PAPER>
  <S sid="0">Syntactic and Semantic Factors in Processing Difficulty: An Integrated Measure</S>
  <ABSTRACT>
    <S sid="1" ssid="1">The analysis of reading times can provide insights into the processes that underlie language comprehension, with longer reading times indicating greater cognitive load.</S>
    <S sid="2" ssid="2">There is evidence that the language processor is highly predictive, such that prior context allows upcoming linguistic material to be anticipated.</S>
    <S sid="3" ssid="3">Previous work has investigated the contributions of semantic and syntactic contexts in isolation, essentially treating them as independent factors.</S>
    <S sid="4" ssid="4">In this paper we analyze reading times in terms of a single predictive measure which integrates a model of semantic composition with an incremental parser and a language model.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="5" ssid="1">Psycholinguists have long realized that language comprehension is highly incremental, with readers and listeners continuously extracting the meaning of utterances on a word-by-word basis.</S>
    <S sid="6" ssid="2">As soon as they encounter a word in a sentence, they integrate it as fully as possible into a representation of the sentence thus far (Marslen-Wilson 1973; Konieczny 2000; Tanenhaus et al. 1995; Sturt and Lombardo 2005).</S>
    <S sid="7" ssid="3">Recent research suggests that language comprehension can also be highly predictive, i.e., comprehenders are able to anticipate upcoming linguistic material.</S>
    <S sid="8" ssid="4">This is beneficial as it gives them more time to keep up with the input, and predictions can be used to compensate for problems with noise or ambiguity.</S>
    <S sid="9" ssid="5">Two types of prediction have been observed in the literature.</S>
    <S sid="10" ssid="6">The first type is semantic prediction, as evidenced in semantic priming: a word that is preceded by a semantically related prime or a semantically congruous sentence fragment is processed faster (Stanovich and West 1981; van Berkum et al. 1999; Clifton et al.</S>
    <S sid="11" ssid="7">2007).</S>
    <S sid="12" ssid="8">Another example is argument prediction: listeners are able to launch eye-movements to the predicted argument of a verb before having encountered it, e.g., they will fixate an edible object as soon as they hear the word eat (Altmann and Kamide 1999).</S>
    <S sid="13" ssid="9">The second type of prediction is syntactic prediction.</S>
    <S sid="14" ssid="10">Comprehenders are faster at naming words that are syntactically compatible with prior context, even when they bear no semantic relationship to the context (Wright and Garrett 1984).</S>
    <S sid="15" ssid="11">Another instance of syntactic prediction has been reported by Staub and Clifton (2006): following the word either, readers predict or and the complement that follows it, and process it faster compared to a control condition without either.</S>
    <S sid="16" ssid="12">Thus, human language processing takes advantage of the constraints imposed by the preceding semantic and syntactic context to derive expectations about the upcoming input.</S>
    <S sid="17" ssid="13">Much recent work has focused on developing computational measures of these constraints and expectations.</S>
    <S sid="18" ssid="14">Again, the literature is split into syntactic and semantic models.</S>
    <S sid="19" ssid="15">Probably the best known measure of syntactic expectation is surprisal (Hale 2001) which can be coarsely defined as the negative log probability of word wt given the preceding words, typically computed using a probabilistic context-free grammar.</S>
    <S sid="20" ssid="16">Modeling work on semantic constraint focuses on the degree to which a word is related to its preceding context.</S>
    <S sid="21" ssid="17">Pynte et al. (2008) use Latent Semantic Analysis (LSA, Landauer and Dumais 1997) to assess the degree of contextual constraint exerted on a word by its context.</S>
    <S sid="22" ssid="18">In this framework, word meanings are represented as vectors in a high dimensional space and distance in this space is interpreted as an index of processing difficulty.</S>
    <S sid="23" ssid="19">Other work (McDonald and Brew 2004) models contextual constraint in information theoretic terms.</S>
    <S sid="24" ssid="20">The assumption is that words carry prior semantic expectations which are updated upon seeing the next word.</S>
    <S sid="25" ssid="21">Expectations are represented by a vector of probabilities which reflects the likely location in semantic space of the upcoming word.</S>
    <S sid="26" ssid="22">The measures discussed above are typically computed automatically on real-language corpora using data-driven methods and their predictions are verified through analysis of eye-movements that people make while reading.</S>
    <S sid="27" ssid="23">Ample evidence (Rayner 1998) demonstrates that eye-movements are related to the moment-to-moment cognitive activities of readers.</S>
    <S sid="28" ssid="24">They also provide an accurate temporal record of the on-line processing of natural language, and through the analysis of eyemovement measurements (e.g., the amount of time spent looking at a word) can give insight into the processing difficulty involved in reading.</S>
    <S sid="29" ssid="25">In this paper, we investigate a model of prediction that is incremental and takes into account syntactic as well as semantic constraint.</S>
    <S sid="30" ssid="26">The model essentially integrates the predictions of an incremental parser (Roark 2001) together with those of a semantic space model (Mitchell and Lapata 2009).</S>
    <S sid="31" ssid="27">The latter creates meaning representations compositionally, and therefore builds semantic expectations for word sequences (e.g., phrases, sentences, even documents) rather than isolated words.</S>
    <S sid="32" ssid="28">Some existing models of sentence processing integrate semantic information into a probabilistic parser (Narayanan and Jurafsky 2002; Pad&#180;o et al. 2009); however, the semantic component of these models is limited to semantic role information, rather than attempting to build a full semantic representation for a sentence.</S>
    <S sid="33" ssid="29">Furthermore, the models of Narayanan and Jurafsky (2002) and Pad&#180;o et al. (2009) do not explicitly model prediction, but rather focus on accounting for garden path effects.</S>
    <S sid="34" ssid="30">The proposed model simultaneously captures semantic and syntactic effects in a single measure which we empirically show is predictive of processing difficulty as manifested in eyemovements.</S>
  </SECTION>
  <SECTION title="2 Models of Processing Difficulty" number="2">
    <S sid="35" ssid="1">As described in Section 1, reading times provide an insight into the various cognitive activities that contribute to the overall processing difficulty involved in comprehending a written text.</S>
    <S sid="36" ssid="2">To quantify and understand the overall cognitive load associated with processing a word in context, we will break that load down into a sum of terms representing distinct computational costs (semantic and syntactic).</S>
    <S sid="37" ssid="3">For example, surprisal can be thought of as measuring the cost of dealing with unexpected input.</S>
    <S sid="38" ssid="4">When a word conforms to the language processor&#8217;s expectations, surprisal is low, and the cognitive load associated with processing that input will also be low.</S>
    <S sid="39" ssid="5">In contrast, unexpected words will have a high surprisal and a high cognitive cost.</S>
    <S sid="40" ssid="6">However, high-level syntactic and semantic factors are only one source of cognitive costs.</S>
    <S sid="41" ssid="7">A sizable proportion of the variance in reading times is accounted for by costs associated with low-level features of the stimuli, e.g.. relating to orthography and eye-movement control (Rayner 1998).</S>
    <S sid="42" ssid="8">In addition, there may also be costs associated with the integration of new input into an incremental representation.</S>
    <S sid="43" ssid="9">Dependency Locality Theory (DLT, Gibson 2000) is essentially a distance-based measure of the amount of processing effort required when the head of a phrase is integrated with its syntactic dependents.</S>
    <S sid="44" ssid="10">We do not consider integration costs here (as they have not been shown to correlate reliably with reading times; see Demberg and Keller 2008 for details) and instead focus on the costs associated with semantic and syntactic constraint and low-level features, which appear to make the most substantial contributions.</S>
    <S sid="45" ssid="11">In the following subsections we describe the various features which contribute to the processing costs of a word in context.</S>
    <S sid="46" ssid="12">We begin by looking at the low-level costs and move on to consider the costs associated with syntactic and semantic constraint.</S>
    <S sid="47" ssid="13">For readers unfamiliar with the methodology involved in modeling eye-tracking data, we note that regression analysis (or the more general mixed effects models) is typically used to study the relationship between dependent and independent variables.</S>
    <S sid="48" ssid="14">The independent variables are the various costs of processing effort and the dependent variables are measurements of eyemovements, three of which are routinely used in the literature: first fixation duration (the duration of the first fixation on a word regardless of whether it is the first fixation on a word or the first of multiple fixations on the same word), first pass duration, also known as gaze duration, (the sum of all fixations made on a word prior to looking at another word), and total reading time (the sum of all fixations on a word including refixations after moving on to other words).</S>
    <S sid="49" ssid="15">Low-level features include word frequency (more frequent words are read faster), word length (shorter words are read faster), and the position of the word in the sentence (later words are read faster).</S>
    <S sid="50" ssid="16">Oculomotor variables have also been found to influence reading times.</S>
    <S sid="51" ssid="17">These include previous fixation (indicating whether or not the previous word has been fixated), launch distance (how many characters intervene between the current fixation and the previous fixation), and landing position (which letter in the word the fixation landed on).</S>
    <S sid="52" ssid="18">Information about the sequential context of a word can also influence reading times.</S>
    <S sid="53" ssid="19">McDonald and Shillcock (2003) show that forward and backward transitional probabilities are predictive of first fixation and first pass durations: the higher the transitional probability, the shorter the fixation time.</S>
    <S sid="54" ssid="20">Backward transitional probability is essentially the conditional probability of a word given its immediately preceding word, P(wk|wk&#8722;1).</S>
    <S sid="55" ssid="21">Analogously, forward probability is the conditional probability of the current word given the next word, P(wk|wk+1).</S>
    <S sid="56" ssid="22">As mentioned earlier, surprisal (Hale 2001; Levy 2008) is one of the best known models of processing difficulty associated with syntactic constraint, and has been previously applied to the modeling of reading times (Demberg and Keller 2008; Ferrara Boston et al. 2008; Roark et al.</S>
    <S sid="57" ssid="23">2009; Frank 2009).</S>
    <S sid="58" ssid="24">The basic idea is that the processing costs relating to the expectations of the language processor can be expressed in terms of the probabilities assigned by some form of language model to the input.</S>
    <S sid="59" ssid="25">These processing costs are assumed to arise from the change in the expectations of the language processor as new input arrives.</S>
    <S sid="60" ssid="26">If we express these expectations in terms of a distribution over all possible continuations of the input seen so far, then we can measure the magnitude of this change in terms of the Kullback-Leibler divergence of the old distribution to the updated distribution.</S>
    <S sid="61" ssid="27">This measure of processing cost for an input word, wk+1, given the previous context, w1...wk, can be expressed straightforwardly in terms of its conditional probability as: That is, the processing cost for a word decreases as its probability increases, with zero processing cost incurred for words which must appear in a given context, as these do not result in any change in the expectations of the language processor.</S>
    <S sid="62" ssid="28">The original formulation of surprisal (Hale 2001) used a probabilistic parser to calculate these probabilities, as the emphasis was on the processing costs incurred when parsing structurally ambiguous garden path sentences.1 Several variants of calculating surprisal have been developed in the literature since using different parsing strategies 1While hearing a sentence like The horse raced past the barn fell (Bever 1970), English speakers are inclined to interpreted horse as the subject of raced expecting the sentence to end at the word barn.</S>
    <S sid="63" ssid="29">So upon hearing the word fell they are forced to revise their analysis of the sentence thus far and adopt a reduced relative reading.</S>
    <S sid="64" ssid="30">(e.g., left-to-right vs. top-down, PCFGs vs dependency parsing) and different degrees of lexicalization (see Roark et al. 2009 for an overview) .</S>
    <S sid="65" ssid="31">For instance, unlexicalized surprisal can be easily derived by substituting the words in Equation (1) with parts of speech (Demberg and Keller 2008).</S>
    <S sid="66" ssid="32">Surprisal could be also defined using a vanilla language model that does not take any structural or grammatical information into account (Frank 2009).</S>
    <S sid="67" ssid="33">Distributional models of meaning have been commonly used to quantify the semantic relation between a word and its context in computational studies of lexical processing.</S>
    <S sid="68" ssid="34">These models are based on the idea that words with similar meanings will be found in similar contexts.</S>
    <S sid="69" ssid="35">In putting this idea into practice, the meaning of a word is then represented as a vector in a high dimensional space, with the vector components relating to the strength on occurrence of that word in various types of context.</S>
    <S sid="70" ssid="36">Semantic similarities are then modeled in terms of geometric similarities within the space.</S>
    <S sid="71" ssid="37">To give a concrete example, Latent Semantic Analysis (LSA, Landauer and Dumais 1997) creates a meaning representation for words by constructing a word-document co-occurrence matrix from a large collection of documents.</S>
    <S sid="72" ssid="38">Each row in the matrix represents a word, each column a document, and each entry the frequency with which the word appeared within that document.</S>
    <S sid="73" ssid="39">Because this matrix tends to be quite large it is often transformed via a singular value decomposition (Berry et al. 1995) into three component matrices: a matrix of word vectors, a matrix of document vectors, and a diagonal matrix containing singular values.</S>
    <S sid="74" ssid="40">Re-multiplying these matrices together using only the initial portions of each (corresponding to the use of a lower dimensional spatial representation) produces a tractable approximation to the original matrix.</S>
    <S sid="75" ssid="41">In this framework, the similarity between two words can be easily quantified, e.g., by measuring the cosine of the angle of the vectors representing them.</S>
    <S sid="76" ssid="42">As LSA is one the best known semantic space models it comes as no surprise that it has been used to analyze semantic constraint.</S>
    <S sid="77" ssid="43">Pynte et al. (2008) measure the similarity between the next word and its preceding context under the assumption that high similarity indicates high semantic constraint (i.e., the word was expected) and analogously low similarity indicates low semantic constraint (i.e., the word was unexpected).</S>
    <S sid="78" ssid="44">They operationalize preceding contexts in two ways, either as the word immediately preceding the next word as the sentence fragment preceding it.</S>
    <S sid="79" ssid="45">Sentence fragments are represented as the average of the words they contain independently of their order.</S>
    <S sid="80" ssid="46">The model takes into account only content words, function words are of little interest here as they can be found in any context.</S>
    <S sid="81" ssid="47">Pynte et al. (2008) analyze reading times on the French part of the Dundee corpus (Kennedy and Pynte 2005) and find that word-level LSA similarities are predictive of first fixation and first pass durations, whereas sentence-level LSA is only predictive of first pass duration (i.e., for a measure that includes refixation).</S>
    <S sid="82" ssid="48">This latter finding is somewhat counterintuitive, one would expect longer contexts to have an immediate effect as they are presumably more constraining.</S>
    <S sid="83" ssid="49">One reason why sentence-level influences are only visible on first pass duration may be due to LSA itself, which is syntax-blind.</S>
    <S sid="84" ssid="50">Another reason relates to the way sentential context was modeled as vector addition (or averaging).</S>
    <S sid="85" ssid="51">The idea of averaging is not very attractive from a linguistic perspective as it blends the meanings of individual words together.</S>
    <S sid="86" ssid="52">Ideally, the combination of simple elements onto more complex ones must allow the construction of novel meanings which go beyond those of the individual elements (Pinker 1994).</S>
    <S sid="87" ssid="53">The only other model of semantic constraint we are aware of is Incremental Contextual Distinctiveness (ICD, McDonald 2000; McDonald and Brew 2004).</S>
    <S sid="88" ssid="54">ICD assumes that words carry prior semantic expectations which are updated upon seeing the next word.</S>
    <S sid="89" ssid="55">Context is represented by a vector of probabilities which reflects the likely location in semantic space of the upcoming word.</S>
    <S sid="90" ssid="56">When the latter is observed, the prior expectation is updated using a Bayesian inference mechanism to reflect the newly arrived information.</S>
    <S sid="91" ssid="57">Like LSA, ICD is based on word co-occurrence vectors, however it does not employ singular value decomposition, and constructs a word-word rather than a word-document co-occurrence matrix.</S>
    <S sid="92" ssid="58">Although this model has been shown to successfully simulate single- and multiple-word priming (McDonald and Brew 2004), it failed to predict processing costs in the Embra eye-tracking corpus (McDonald and Shillcock 2003).</S>
    <S sid="93" ssid="59">In this work we model semantic constraint using the representational framework put forward in Mitchell and Lapata (2008).</S>
    <S sid="94" ssid="60">Their aim is not so much to model processing difficulty, but to construct vector-based meaning representations that go beyond individual words.</S>
    <S sid="95" ssid="61">They introduce a general framework for studying vector composition, which they formulate as a function f of two vectors u and v: where h denotes the composition of u and v. Different composition models arise, depending on how f is chosen.</S>
    <S sid="96" ssid="62">Assuming that h is a linear function of the Cartesian product of u and v allows to specify additive models which are by far the most common method of vector combination in the literature: Alternatively, we can assume that h is a linear function of the tensor product of u and v, and thus derive models based on multiplication: Mitchell and Lapata (2008) show that several additive and multiplicative models can be formulated under this framework, including the wellknown tensor products (Smolensky 1990) and circular convolution (Plate 1995).</S>
    <S sid="97" ssid="63">Importantly, composition models are not defined with a specific semantic space in mind, they could easily be adapted to LSA, or simple co-occurrence vectors, or more sophisticated semantic representations (e.g., Griffiths et al. 2007), although admittedly some composition functions may be better suited for particular semantic spaces.</S>
    <S sid="98" ssid="64">Composition models can be straightforwardly used as predictors of processing difficulty, again via measuring the cosine of the angle between a vector w representing the upcoming word and a vector h representing the words preceding it: where h is created compositionally, via some (additive or multiplicative) function f. In this paper we evaluate additive and compositional models in their ability to capture semantic prediction.</S>
    <S sid="99" ssid="65">We also examine the influence of the underlying meaning representations by comparing a simple semantic space similar to McDonald (2000) against Latent Dirichlet Allocation (Blei et al. 2003; Griffiths et al.</S>
    <S sid="100" ssid="66">2007).</S>
    <S sid="101" ssid="67">Specifically, the simpler space is based on word cooccurrence counts; it constructs the vector representing a given target word, t, by identifying all the tokens of t in a corpus and recording the counts of context words, ci (within a specific window).</S>
    <S sid="102" ssid="68">The context words, ci, are limited to a set of the n most common content words and each vector component is given by the ratio of the probability of a ci given t to the overall probability of ci.</S>
    <S sid="103" ssid="69">Despite its simplicity, the above semantic space (and variants thereof) has been used to successfully simulate lexical priming (e.g., McDonald 2000), human judgments of semantic similarity (Bullinaria and Levy 2007), and synonymy tests (Pad&#180;o and Lapata 2007) such as those included in the Test of English as Foreign Language (TOEFL).</S>
    <S sid="104" ssid="70">LDA is a probabilistic topic model offering an alternative to spatial semantic representations.</S>
    <S sid="105" ssid="71">It is similar in spirit to LSA, it also operates on a word-document co-occurrence matrix and derives a reduced dimensionality description of words and documents.</S>
    <S sid="106" ssid="72">Whereas in LSA words are represented as points in a multi-dimensional space, LDA represents words using topics.</S>
    <S sid="107" ssid="73">Specifically, each document in a corpus is modeled as a distribution over K topics, which are themselves characterized as distribution over words.</S>
    <S sid="108" ssid="74">The individual words in a document are generated by repeatedly sampling a topic according to the topic distribution and then sampling a single word from the chosen topic.</S>
    <S sid="109" ssid="75">Under this framework, word meaning is represented as a probability distribution over a set of latent topics, essentially a vector whose dimensions correspond to topics and values to the probability of the word given these topics.</S>
    <S sid="110" ssid="76">Topic models have been recently gaining ground as a more structured representation of word meaning (Griffiths et al. 2007; Steyvers and Griffiths 2007).</S>
    <S sid="111" ssid="77">In contrast to more standard semantic space models where word senses are conflated into a single representation, topics have an intuitive correspondence to coarse-grained sense distinctions.</S>
  </SECTION>
  <SECTION title="3 Integrating Semantic Constraint into Surprisal" number="3">
    <S sid="112" ssid="1">The treatment of semantic and syntactic constraint in models of processing difficulty has been somewhat inconsistent.</S>
    <S sid="113" ssid="2">While surprisal is a theoretically well-motivated measure, formalizing the idea of linguistic processing being highly predictive in terms of probabilistic language models, the measurement of semantic constraint in terms of vector similarities lacks a clear motivation.</S>
    <S sid="114" ssid="3">Moreover, the two approaches, surprisal and similarity, produce mathematically different types of measures.</S>
    <S sid="115" ssid="4">Formally, it would be preferable to have a single approach to capturing constraint and the obvious solution is to derive some form of semantic surprisal rather than sticking with similarity.</S>
    <S sid="116" ssid="5">This can be achieved by turning a vector model of semantic similarity into a probabilistic language model.</S>
    <S sid="117" ssid="6">There are in fact a number of approaches to deriving language models from distributional models of semantics (e.g., Bellegarda 2000; Coccaro and Jurafsky 1998; Gildea and Hofmann 1999).</S>
    <S sid="118" ssid="7">We focus here on the model of Mitchell and Lapata (2009) which tackles the issue of the composition of semantic vectors and also integrates the output of an incremental parser.</S>
    <S sid="119" ssid="8">The core of their model is based on the product of a trigram model p(wn|wn&#8722;1 n&#8722;2) and a semantic component &#916;(wn,h) which determines the factor by which this probability should be scaled up or down given the prior semantic context h: The factor &#916;(wn,h) is essentially based on a comparison between the vector representing the current word wn and the vector representing the prior history h. Varying the method for constructing word vectors (e.g., using LDA or a simpler semantic space model) and for combining them into a representation of the prior context h (e.g., using additive or multiplicative functions) produces distinct models of semantic composition.</S>
    <S sid="120" ssid="9">The calculation of &#916; is then based on a weighted dot product of the vector representing the upcoming word w, with the vector representing the prior context h: As shown in Equation (7) this semantic factor then modulates the trigram probabilities, to take account of the effect of the semantic content outside the n-gram window.</S>
    <S sid="121" ssid="10">Mitchell and Lapata (2009) show that a combined semantic-trigram language model derived from this approach and trained on the Wall Street Journal outperforms a baseline trigram model in terms of perplexity on a held out set.</S>
    <S sid="122" ssid="11">They also linearly interpolate this semantic language model with the output of an incremental parser, which computes the following probability: where p1(w|h) is computed as in Equation (7) and p2(w|h) is computed by the parser.</S>
    <S sid="123" ssid="12">Their implementation uses Roark&#8217;s (2001) top-down incremental parser which estimates the probability of the next word based upon the previous words of the sentence.</S>
    <S sid="124" ssid="13">These prefix probabilities are calculated from a grammar, by considering the likelihood of seeing the next word given the possible grammatical relations representing the prior context.</S>
    <S sid="125" ssid="14">Equation (9) essentially defines a language model which combines semantic, syntactic and n-gram structure, and Mitchell and Lapata (2009) demonstrate that it improves further upon a semantic language model in terms of perplexity.</S>
    <S sid="126" ssid="15">We argue that the probabilities from this model give us a means to model the incrementally and predictivity of the language processor in a manner that integrates both syntactic and semantic constraints.</S>
    <S sid="127" ssid="16">Converting these probabilities to surprisal should result in a single measure of the processing cost associated with semantic and syntactic expectations.</S>
  </SECTION>
  <SECTION title="4 Method" number="4">
    <S sid="128" ssid="1">Data The models discussed in the previous section were evaluated against an eye-tracking corpus.</S>
    <S sid="129" ssid="2">Specifically, we used the English portion of the Dundee Corpus (Kennedy and Pynte 2005) which contains 20 texts taken from The Independent newspaper.</S>
    <S sid="130" ssid="3">The corpus consists of 51,502 tokens and 9,776 types in total.</S>
    <S sid="131" ssid="4">It is annotated with the eye-movement records of 10 English native speakers, who each read the whole corpus.</S>
    <S sid="132" ssid="5">The eye-tracking data was preprocessed following the methodology described in Demberg and Keller (2008).</S>
    <S sid="133" ssid="6">From this data, we computed total reading time for each word in the corpus.</S>
    <S sid="134" ssid="7">Our statistical analyses were based on actual reading times, and so we only included words that were not skipped.</S>
    <S sid="135" ssid="8">We also excluded words for which the previous word had been skipped, and words on which the normal left-to-right movement of gaze had been interrupted, i.e., by blinks, regressions, etc.</S>
    <S sid="136" ssid="9">Finally, because our focus is the influence of semantic context, we selected only content words whose prior sentential context contained at least two further content words.</S>
    <S sid="137" ssid="10">The resulting data set consisted of 53,704 data points, which is about 10% of the theoretically possible total.2 2The total of all words read by all subjects is 515,020.</S>
    <S sid="138" ssid="11">The pre-processing recommended by Demberg and Keller&#8217;s (2008) results in a data sets containing 436,000 data points.</S>
    <S sid="139" ssid="12">Removing non-content words leaves 205,922 data points.</S>
    <S sid="140" ssid="13">It only makes sense to consider words that were actually fixated (the eye-tracking measures used are not defined on skipped words), which leaves 162,129 data points.</S>
    <S sid="141" ssid="14">Following Pynte et al. (2008), we require that the previous word was fixated, with 70,051 data points remaining.</S>
    <S sid="142" ssid="15">We exclude words on which the normal left to right movement of gaze had been interrupted, e.g., by blinks and regressions, which results in the final total to 53,704 data points.</S>
    <S sid="143" ssid="16">Model Implementation All elements of our model were trained on the BLLIP corpus, a collection of texts from the Wall Street Journal (years 1987&#8211;89).</S>
    <S sid="144" ssid="17">The training corpus consisted of 38,521,346 words.</S>
    <S sid="145" ssid="18">We used a development corpus of 50,006 words and a test corpus of similar size.</S>
    <S sid="146" ssid="19">All words were converted to lowercase and numbers were replaced with the symbol (num).</S>
    <S sid="147" ssid="20">A vocabulary of 20,000 words was chosen and the remaining tokens were replaced with (unk).</S>
    <S sid="148" ssid="21">Following Mitchell and Lapata (2009), we constructed a simple semantic space based on cooccurrence statistics from the BLLIP training set.</S>
    <S sid="149" ssid="22">We used the 2,000 most frequent word types as contexts and a symmetric five word window.</S>
    <S sid="150" ssid="23">Vector components were defined as in Equation (6).</S>
    <S sid="151" ssid="24">We also trained the LDA model on BLLIP, using the Gibb&#8217;s sampling procedure discussed in Griffiths et al. (2007).</S>
    <S sid="152" ssid="25">We experimented with different numbers of topics on the development set (from 10 to 1,000) and report results on the test set with 100 topics.</S>
    <S sid="153" ssid="26">In our experiments, the hyperparameter a was initialized to .5, and the b word probabilities were initialized randomly.</S>
    <S sid="154" ssid="27">We integrated our compositional models with a trigram model which we also trained on BLLIP.</S>
    <S sid="155" ssid="28">The model was built using the SRILM toolkit (Stolcke 2002) with backoff and Kneser-Ney smoothing.</S>
    <S sid="156" ssid="29">As our incremental parser we used Roark&#8217;s (2001) parser trained on sections 2&#8211;21 of the Penn Treebank containing 936,017 words.</S>
    <S sid="157" ssid="30">The parser produces prefix probabilities for each word of a sentence which we converted to conditional probabilities by dividing each current probability by the previous one.</S>
    <S sid="158" ssid="31">Statistical Analysis The statistical analyses in this paper were carried out using linear mixed effects models (LME, Pinheiro and Bates 2000).</S>
    <S sid="159" ssid="32">The latter can be thought of as generalization of linear regression that allows the inclusion of random factors (such as participants or items) as well as fixed factors (e.g., word frequency).</S>
    <S sid="160" ssid="33">In our analyses, we treat participant as a random factor, which means that our models contain an intercept term for each participant, representing the individual differences in the rates at which they read.3 We evaluated the effect of adding a factor to a model by comparing the likelihoods of the models with and without that factor.</S>
    <S sid="161" ssid="34">If a c2 test on the 3Other random factors that are appropriate for our analyses are word and sentence; however, due to the large number of instances for these factors (given that the Dundee corpus contains 51,502 tokens), we were not able to include them: the model fitting algorithm we used (implemented in the R package lme4) does not converge for such large models. for total reading time likelihood ratio is significant, then this indicates that the new factor significantly improves model fit.</S>
    <S sid="162" ssid="35">We also experimented with adding random slopes for participant to the model (in addition to the random intercept); however, this either led to non-convergence of the model fitting procedure, or failed to result in an increase in model fit according to the likelihood ratio test.</S>
    <S sid="163" ssid="36">Therefore, all models reported in the rest of this paper contain random intercept of participants as the sole random factor.</S>
    <S sid="164" ssid="37">Rather than model raw reading times, we model times on the log scale.</S>
    <S sid="165" ssid="38">This is desirable for a number of reasons.</S>
    <S sid="166" ssid="39">Firstly, the raw reading times tend to have a skew distribution and taking logs produces something closer to normal, which is preferable for modeling.</S>
    <S sid="167" ssid="40">Secondly, the regression equation makes more sense on the log scale as the contribution of each term to raw reading time is multiplicative rather than additive.</S>
    <S sid="168" ssid="41">That is, log(t) = Ei Pixi implies t = r1i ePixi.</S>
    <S sid="169" ssid="42">In particular, the intercept term for each participant now represents a multiplicative factor by which that participant is slower or faster.</S>
  </SECTION>
  <SECTION title="5 Results" number="5">
    <S sid="170" ssid="1">We computed separate mixed effects models for three dependent variables, namely first fixation duration, first pass duration, and total reading time.</S>
    <S sid="171" ssid="2">We report results for total times throughout, as the results of the other two dependent variables are broadly similar.</S>
    <S sid="172" ssid="3">Our strategy was to first construct a baseline model of low-level factors influencing reading time, and then to take the residuals from that model as the dependent variable in subsequent analyses.</S>
    <S sid="173" ssid="4">In this way we removed the effects of low-level factors before investigating the factors associated with syntactic and semantic constraint.</S>
    <S sid="174" ssid="5">This avoids problems with collinearity between low-level factors and the factors we are interested in (e.g., trigram probability is highly correlated with word frequency).</S>
    <S sid="175" ssid="6">The baseline model contained the factors word length, word frequency, launch distance, landing position, and the reading time for the last fixated word, and its parameter estimates are given in Table 1.</S>
    <S sid="176" ssid="7">To further reduce collinearity, we also centered all fixed factors, both in the baseline model, and in the models fitted on the residuals that we report in the following.</S>
    <S sid="177" ssid="8">Note that some intercorrelations remain between the factors, which we will discuss at the end of Section 5.</S>
    <S sid="178" ssid="9">Before investigating whether an integrated model of semantic and syntactic constraint improves the goodness of fit over the baseline, we examined the influence of semantic constraint alone.</S>
    <S sid="179" ssid="10">This was necessary as compositional models have not been previously used to model processing difficulty.</S>
    <S sid="180" ssid="11">Besides, replicating Pynte et al.&#8217;s (2008) finding, we were also interested in assessing whether the underlying semantic representation (simple semantic space or LDA) and composition function (additive versus multiplicative) modulate reading times differentially.</S>
    <S sid="181" ssid="12">We built an LME model that predicted the residual reading times of the baseline model using the similarity scores from our composition models as factors.</S>
    <S sid="182" ssid="13">We then carried out a x2 test on the likelihood ratio of a model only containing the random factor and the intercept, and a model also containing the semantic factor (cosine similarity).</S>
    <S sid="183" ssid="14">The addition of the semantic factor significantly improves model fit for both the simple semantic space and LDA.</S>
    <S sid="184" ssid="15">This result is observed for both additive and multiplicative composition functions.</S>
    <S sid="185" ssid="16">Our results are summarized in Table 2 which reports the coefficients of the four LME models fitted against the residuals of the baseline model, together with the p-values of the x2 test.</S>
    <S sid="186" ssid="17">Before evaluating our integrated surprisal measure, we evaluated its components individually in order to tease their contributions apart.</S>
    <S sid="187" ssid="18">For example, it may be the case that syntactic surprisal is an overwhelmingly better predictor of reading time than semantic surprisal, however we would not be able to detect this by simply adding a factor based on Equation (9) to the baseline model.</S>
    <S sid="188" ssid="19">The p1 ) .00882*** .00133 Table 3: Coefficients of nested LME models with the components of SSS or LDA surprisal as factors; only the coefficient of the additional factor at each step are shown integrated surprisal measure can be written as: Where p2 is the incremental parser probability and p1 is the product of the semantic component, &#916;, and the trigram probability, p. This can be broken down into the sum of two terms: Since the first term,&#8722;log(p1) is itself a product it can also be broken down further: Thus, to evaluate the contribution of the three components to the integrated surprisal measure we fitted nested LME models, i.e., we entered these terms one at a time into a mixed effects model and tested the significance of the improvement in model fit for each additional term.</S>
    <S sid="189" ssid="20">We again start with an LME model that only contains the random factor and the intercept, with the residuals of the baseline models as the dependent variable.</S>
    <S sid="190" ssid="21">Considering the trigram model first, we find that adding this factor to the model gives a significant improvement in fit.</S>
    <S sid="191" ssid="22">Also adding the semantic component (&#8722;log(&#916;)) improves fit further, both for additive and multiplicative composition functions using a simple semantic space.</S>
    <S sid="192" ssid="23">Finally, the addition of the parser probabilities (log(&#955; + (1&#8722;&#955;) p2 p1 )) again improves model fit significantly.</S>
    <S sid="193" ssid="24">As far as LDA is concerned, the additive model significantly improves model fit, whereas the multiplicative one does not.</S>
    <S sid="194" ssid="25">These results mirror the findings of Mitchell and Lapata (2009), who report that a multiplicative composition function produced the lowest perplexity for the simple semantic space model, whereas an additive function gave the best perplexity for the LDA space.</S>
    <S sid="195" ssid="26">Table 3 lists the coefficients for the nested models for LDA Additive .00817*** Multiplicative .00640*** Table 4: Coefficients of LME models with integrated surprisal measure (based on SSS or LDA) as factor all four variants of our semantic constraint measure.</S>
    <S sid="196" ssid="27">Finally, we built a separate LME model where we added the integrated surprisal measure (see Equation (9)) to the model only containing the random factor and the intercept (see Table 4).</S>
    <S sid="197" ssid="28">We did this separately for all four versions of the integrated surprisal measure (SSS, LDA; additive, multiplicative).</S>
    <S sid="198" ssid="29">We find that model fit improved significantly all versions of integrated surprisal.</S>
    <S sid="199" ssid="30">One technical issue that remains to be discussed is collinearity, i.e., intercorrelations between the factors in a model.</S>
    <S sid="200" ssid="31">The presence of collinearity is problematic, as it can render the model fitting procedure unstable; it can also affect the significance of individual factors.</S>
    <S sid="201" ssid="32">As mentioned in Section 4 we used two techniques to reduce collinearity: residualizing and centering.</S>
    <S sid="202" ssid="33">Table 5 gives an overview of the correlation coefficients for all pairs of factors.</S>
    <S sid="203" ssid="34">It becomes clear that collinearity has mostly been removed; there is a remaining relationship between word length and word frequency, which is expected as shorter words tend to be more frequent.</S>
    <S sid="204" ssid="35">This correlation is not a problem for our analysis, as it is confined to the baseline model.</S>
    <S sid="205" ssid="36">Furthermore, word frequency and trigram probability are highly correlated.</S>
    <S sid="206" ssid="37">Again this is expected, given that the frequencies of unigrams and higher-level n-grams tend to be related.</S>
    <S sid="207" ssid="38">This correlation is taken care of by residualizing, which isolates the two factors: word frequency is part of the baseline model, while trigram probability is part of the separate models that we fit on the residuals.</S>
    <S sid="208" ssid="39">All other correlations are small (with coefficients of .27 or less), with one exception: there is a high correlation between the&#8722;log(&#916;) term and the log(&#955; + (1 &#8722; &#955;) p2 p1) term in the multiplicative LDA model.</S>
    <S sid="209" ssid="40">This collinearity issue may explain the absence of a significant improvement in model fit when these two terms are added to the baseline (see Table 3).</S>
    <S sid="210" ssid="41">Mult</S>
  </SECTION>
  <SECTION title="6 Discussion" number="6">
    <S sid="211" ssid="1">In this paper we investigated the contributions of syntactic and semantic constraint in modeling processing difficulty.</S>
    <S sid="212" ssid="2">Our work departs from previous approaches in that we propose a single measure which integrates syntactic and semantic factors.</S>
    <S sid="213" ssid="3">Evaluation on an eye-tracking corpus shows that our measure predicts reading time better than a baseline model that captures low-level factors in reading (word length, landing position, etc.).</S>
    <S sid="214" ssid="4">Crucially, we were able to show that the semantic component of our measure improves reading time predictions over and above a model that includes syntactic measures (based on a trigram model and incremental parser).</S>
    <S sid="215" ssid="5">This means that semantic costs are a significant predictor of reading time in addition to the well-known syntactic surprisal.</S>
    <S sid="216" ssid="6">An open issue is whether a single, integrated measure (as evaluated in Table 4) fits the eyemovement data significantly better than separate measures for trigram, syntactic, and semantic surprisal (as evaluated in Table 3.</S>
    <S sid="217" ssid="7">However, we are not able to investigate this hypothesis: our approach to testing the significance of factors requires nested models; the log-likelihood test (see Section 4) is only able to establish whether adding a factor to a model improves its fit; it cannot compare models with disjunct sets of factors (such as a model containing the integrated surprisal measure and one containing the three separate ones).</S>
    <S sid="218" ssid="8">However, we would argue that a single, integrated measure that captures human predictive processing is preferable over a collection of separate measures.</S>
    <S sid="219" ssid="9">It is conceptually simpler (as it is more parsimonious), and is also easier to use in applications (such as readability prediction).</S>
    <S sid="220" ssid="10">Finally, an integrated measure requires less parameters; our definition of surprisal in 12 is simply the sum of the trigram, syntactic, and semantic components.</S>
    <S sid="221" ssid="11">An LME model containing separate factors, on the other hand, requires a coefficient for each of them, and thus has more parameters.</S>
    <S sid="222" ssid="12">In evaluating our model, we adopted a broad coverage approach using the reading time data from a naturalistic corpus rather than artificially constructed experimental materials.</S>
    <S sid="223" ssid="13">In doing so, we were able to compare different syntactic and semantic costs on the same footing.</S>
    <S sid="224" ssid="14">Previous analyses of semantic constraint have been conducted on different eye-tracking corpora (Dundee and Embra Corpus) and on different languages (English, French).</S>
    <S sid="225" ssid="15">Moreover, comparisons of the individual contributions of syntactic and semantic factors were generally absent from the literature.</S>
    <S sid="226" ssid="16">Our analysis showed that both of these factors can be captured by our integrated surprisal measure which is uniformly probabilistic and thus preferable to modeling semantic and syntactic costs disjointly using a mixture of probabilistic and nonprobabilistic measures.</S>
    <S sid="227" ssid="17">An interesting question is which aspects of semantics our model is able to capture, i.e., why does the combination of LSA or LDA representations with an incremental parser yield a better fit of the behavioral data.</S>
    <S sid="228" ssid="18">In the psycholinguistic literature, various types of semantic information have been investigated: lexical semantics (word senses, selectional restrictions, thematic roles), sentential semantics (scope, binding), and discourse semantics (coreference and coherence); see Keller (2010) of a detailed discussion.</S>
    <S sid="229" ssid="19">We conjecture that our model is mainly capturing lexical semantics (through the vector space representation of words) and sentential semantics (through the multiplication or addition of words).</S>
    <S sid="230" ssid="20">However, discourse coreference effects (such as the ones reported by Altmann and Steedman (1988) and much subsequent work) are probably not amenable to a treatment in terms of vector space semantics; an explicit representation of discourse entities and coreference relations is required (see Dubey 2010 for a model of human sentence processing that can handle coreference).</S>
    <S sid="231" ssid="21">A key objective for future work will be to investigate models that integrate semantic constraint with syntactic predictions more tightly.</S>
    <S sid="232" ssid="22">For example, we could envisage a parser that uses semantic representations to guide its search, e.g., by pruning syntactic analyses that have a low semantic probability.</S>
    <S sid="233" ssid="23">At the same time, the semantic model should have access to syntactic information, i.e., the composition of word representations should take their syntactic relationships into account, rather than just linear order.</S>
  </SECTION>
</PAPER>
