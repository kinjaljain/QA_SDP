<PAPER>
  <S sid="0">Joint Chinese Word Segmentation, POS Tagging and Parsing</S>
  <ABSTRACT>
    <S sid="1" ssid="1">In this paper, we propose a novel decoding algorithm for discriminative joint Chinese word segmentation, part-of-speech (POS) tagging, and parsing.</S>
    <S sid="2" ssid="2">Previous work often used a pipeline method &#8211; Chinese word segmentation followed by POS tagging and parsing, which suffers from error propagation and is unable to leverage information in later modules for earlier components.</S>
    <S sid="3" ssid="3">In our approach, we train the three individual models separately during training, and incorporate them together in a unified framework during decoding.</S>
    <S sid="4" ssid="4">We extend the CYK parsing algorithm so that it can deal with word segmentation and POS tagging features.</S>
    <S sid="5" ssid="5">As far as we know, this is the first work on joint Chinese word segmentation, POS tagging and parsing.</S>
    <S sid="6" ssid="6">Our experimental results on Chinese Tree Bank 5 corpus show that our approach outperforms the state-of-the-art pipeline system.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="7" ssid="1">For Asian languages such as Japanese and Chinese that do not contain explicitly marked word boundaries, word segmentation is an important first step for many subsequent language processing tasks, such as POS tagging, parsing, semantic role labeling, and various applications.</S>
    <S sid="8" ssid="2">Previous studies for POS tagging and syntax parsing on these languages sometimes assume that gold standard word segmentation information is provided, which is not the real scenario.</S>
    <S sid="9" ssid="3">In a fully automatic system, a pipeline approach is often adopted, where raw sentences are first segmented into word sequences, then POS tagging and parsing are performed.</S>
    <S sid="10" ssid="4">This kind of approach suffers from error propagation.</S>
    <S sid="11" ssid="5">For example, word segmentation errors will result in tagging and parsing errors.</S>
    <S sid="12" ssid="6">Additionally, early modules cannot use information from subsequent modules.</S>
    <S sid="13" ssid="7">Intuitively a joint model that performs the three tasks together should help the system make the best decisions.</S>
    <S sid="14" ssid="8">In this paper, we propose a unified model for joint Chinese word segmentation, POS tagging, and parsing.</S>
    <S sid="15" ssid="9">Three sub-models are independently trained using the state-of-the-art methods.</S>
    <S sid="16" ssid="10">We do not use the joint inference algorithm for training because of the high complexity caused by the large amount of parameters.</S>
    <S sid="17" ssid="11">We use linear chain Conditional Random Fields (CRFs) (Lafferty et al., 2001) to train the word segmentation model and POS tagging model, and averaged perceptron (Collins, 2002) to learn the parsing model.</S>
    <S sid="18" ssid="12">During decoding, parameters of each sub-model are scaled to represent its importance in the joint model.</S>
    <S sid="19" ssid="13">Our decoding algorithm is an extension of CYK parsing.</S>
    <S sid="20" ssid="14">Initially, weights of all possible words together with their POS tags are calculated.</S>
    <S sid="21" ssid="15">When searching the parse tree, the word and POS tagging features are dynamically generated and the transition information of POS tagging is considered in the span merge operation.</S>
    <S sid="22" ssid="16">Experiments are conducted on Chinese Tree Bank (CTB) 5 dataset, which is widely used for Chinese word segmentation, POS tagging and parsing.</S>
    <S sid="23" ssid="17">We compare our proposed joint model with the pipeline system, both built using the state-of-the-art submodels.</S>
    <S sid="24" ssid="18">We also propose an evaluation metric to calculate the bracket scores for parsing in the face of word segmentation errors.</S>
    <S sid="25" ssid="19">Our experimental results show that the joint model significantly outperforms the pipeline method based on the state-of-the-art sub-models.</S>
  </SECTION>
  <SECTION title="2 Related Work" number="2">
    <S sid="26" ssid="1">There is very limited previous work on joint Chinese word segmentation, POS tagging, and parsing.</S>
    <S sid="27" ssid="2">Previous joint models mainly focus on word segmentation and POS tagging task, such as the virtual nodes method (Qian et al., 2010), cascaded linear model (Jiang et al., 2008a), perceptron (Zhang and Clark, 2008), sub-word based stacked learning (Sun, 2011), reranking (Jiang et al., 2008b).</S>
    <S sid="28" ssid="3">These joint models showed about 0.2 &#8722; 1% F-score improvement over the pipeline method.</S>
    <S sid="29" ssid="4">Recently, joint tagging and dependency parsing has been studied as well (Li et al., 2011; Lee et al., 2011).</S>
    <S sid="30" ssid="5">Previous research has showed that word segmentation has a great impact on parsing accuracy in the pipeline method (Harper and Huang, 2009).</S>
    <S sid="31" ssid="6">In (Jiang et al., 2009), additional data was used to improve Chinese word segmentation, which resulted in significant improvement on the parsing task using the pipeline framework.</S>
    <S sid="32" ssid="7">Joint segmentation and parsing was also investigated for Arabic (Green and Manning, 2010).</S>
    <S sid="33" ssid="8">A study that is closely related to ours is (Goldberg and Tsarfaty, 2008), where a single generative model was proposed for joint morphological segmentation and syntactic parsing for Hebrew.</S>
    <S sid="34" ssid="9">Different from that work, we use a discriminative model, which benefits from large amounts of features and is easier to deal with unknown words.</S>
    <S sid="35" ssid="10">Another main difference is that, besides segmentation and parsing, we also incorporate the POS tagging model into the CYK parsing framework.</S>
  </SECTION>
  <SECTION title="3 Methods" number="3">
    <S sid="36" ssid="1">For a given Chinese sentence, our task is to generate the word sequence, its POS tag sequence, and the parse tree (constituent parsing).</S>
    <S sid="37" ssid="2">A joint model is expected to make more optimal decisions than a pipeline approach; however, such a model will be too complex and it is difficult to estimate model parameters.</S>
    <S sid="38" ssid="3">Therefore we do not perform joint inference for training.</S>
    <S sid="39" ssid="4">Instead, we develop three individual models independently during training and perform joint decoding using them.</S>
    <S sid="40" ssid="5">In this section, we first describe the three sub-models and then the joint decoding algorithm.</S>
    <S sid="41" ssid="6">Methods for Chinese word segmentation can be broadly categorized into character based and word based models.</S>
    <S sid="42" ssid="7">Previous studies showed that character-based models are more effective to detect out-of-vocabulary words while word-based models are more accurate to predict in-vocabulary words (Zhang et al., 2006).</S>
    <S sid="43" ssid="8">Here, we use order-0 semiMarkov model (Sarawagi and Cohen, 2004) to take advantages of both approaches.</S>
    <S sid="44" ssid="9">More specifically, given a sentence x = c1, c2, ... , cl (where cz is the ith Chinese character, l is the sentence length), the character-based model assigns each character with a word boundary tag.</S>
    <S sid="45" ssid="10">Here we use the BCDIES tag set, which achieved the best official performance (Zhao and Kit, 2008): B, C, D, E denote the first, second, third, and last character of a multi-character word respectively, I denotes the other characters, and S denotes the single character word.</S>
    <S sid="46" ssid="11">We use the same characterbased feature templates as in the best official system, shown in Table 1 (1.1-1.3), including character unigram and bigram features, and transition features.</S>
    <S sid="47" ssid="12">Linear chain CRFs are used for training.</S>
    <S sid="48" ssid="13">Feature templates in the word-based model are shown in Table 1 (1.4-1.6), including word features, sub-word features, and character bigrams within words.</S>
    <S sid="49" ssid="14">The word feature is activated if a predicted word w is in the vocabulary (i.e., appears in training data).</S>
    <S sid="50" ssid="15">Subword(w) is the longest in-vocabulary word within w. To use word features, we adopt a Kbest reranking approach.</S>
    <S sid="51" ssid="16">The top K candidate segmentation results for each training sample are generated using the character-based model, and the gold segmentation is added if it is not in the candidate set.</S>
    <S sid="52" ssid="17">We use the Maximum Entropy (ME) model to learn the weights of word features such that the probability of the gold candidate is maximal.</S>
    <S sid="53" ssid="18">A problem arises when combining the two models and using it in joint segmentation and parsing, since the linear chain used in the character-based model is incompatible with CYK parsing model and the word-based model due to the transition information.</S>
    <S sid="54" ssid="19">Thus, we slightly modify the linear chain CRFs by fixing the weights of transition features during training and testing.</S>
    <S sid="55" ssid="20">That is, weights of impossible transition features (e.g., B&#8212;*B) are set to &#8722;oc, and weights of the other transition features (e.g., E&#8212;*B) are set to 0.</S>
    <S sid="56" ssid="21">In this way, the transition feature could be neglected in testing for two reasons.</S>
    <S sid="57" ssid="22">First, all illegal label assignments are prohibited in prediction, since their weights are &#8722;oc; second, because weights of legal transition features are 0, they do not affect the prediction at all.</S>
    <S sid="58" ssid="23">In the following, transition features are excluded.</S>
    <S sid="59" ssid="24">Now we can use order-0 semi Markov model as the hybrid model.</S>
    <S sid="60" ssid="25">We define the score of a word as the sum of the weights of all the features within the word.</S>
    <S sid="61" ssid="26">Formally, the score of a multi-character word where fCRF and fME are the feature vectors in the character and word based models respectively, and BCRF, BME are their corresponding weight vectors.</S>
    <S sid="62" ssid="27">For simplicity, we denote Bseg = BCRF&#174;ME, fseg = fCRF&#174;ME, where BCRF&#174;ME means the concatenation of BCRF and BME.</S>
    <S sid="63" ssid="28">Scores for single character words are defined similarly.</S>
    <S sid="64" ssid="29">These word scores will be used in the joint segmentation and parsing task Section 3.4.</S>
    <S sid="65" ssid="30">Though syntax parsing model can directly predict the POS tag itself, we choose not to use this, but use an independent POS tagger for two reasons.</S>
    <S sid="66" ssid="31">First, there is a large amount of data with labeled POS tags but no syntax annotations, such as the People&#8217;s Daily corpus and SIGHAN bakeoff corpora (Jin and Chen, 2008).</S>
    <S sid="67" ssid="32">Such data can only be used to train POS taggers, but not for training the parsing model.</S>
    <S sid="68" ssid="33">Often using a larger training set will result in a better POS tagger.</S>
    <S sid="69" ssid="34">Second, the state-of-the-art POS tagging systems are often trained by sequence labeling models, not parsing models.</S>
    <S sid="70" ssid="35">The POS tagging problem is to assign a POS tag t E T to each word in a sentence.</S>
    <S sid="71" ssid="36">We also use linear chain CRFs for POS tagging.</S>
    <S sid="72" ssid="37">Feature templates shown in Table 2 are the same as those in (Qian et al., 2010), which have been shown effective on CTB corpus.</S>
    <S sid="73" ssid="38">Three feature sets are considered: (i) word level features, including surrounding word unigrams, bigrams, and word length; (ii) character level features, such as the first and last characters in the words; (iii) transition features.</S>
    <S sid="74" ssid="39">We choose discriminative models for parsing since it is easy to handle unknown words by simply adding character level features.</S>
    <S sid="75" ssid="40">Online structured learning algorithms were demonstrated to be effective for training, such as stochastic optimization (Finkel et al., 2008).</S>
    <S sid="76" ssid="41">In this study, we use averaged perceptron algorithm for parameter estimation since it is easier to implement and has competitive performance.</S>
    <S sid="77" ssid="42">A Context Free Grammar (CFG) consists of (i) a set of terminals; (ii) a set of nonterminals {Nk}; (iii) a designated start symbol ROOT; and (iv) a set of rules, {r = Ni &#8212;* (j}, where (j is a sequence of terminals and nonterminals.</S>
    <S sid="78" ssid="43">In the parsing task, terminals are the words, and nonterminals are the POS tags and phrase types.</S>
    <S sid="79" ssid="44">In this paper, nonterminal is named state for short.</S>
    <S sid="80" ssid="45">A parse tree T of sentence x can be factorized into several one-level subtrees, each corresponding to a rule r. In practice, binarization of rules is necessary to obtain cubic parsing time.</S>
    <S sid="81" ssid="46">That is, the right hand side of each rule should contain no more than 2 states.</S>
    <S sid="82" ssid="47">We used right branching binarization, as illustrated in Figure 1.</S>
    <S sid="83" ssid="48">We did not use parent annotation, since we found it degraded the performance in our experiments (shown in Section 4).</S>
    <S sid="84" ssid="49">We used the same preprocessing step as (Harper and Huang, 2009), collapsing all the allowed nonterminal-yield unary chains to single unary rules.</S>
    <S sid="85" ssid="50">Therefore, all spans in the binarized trees contain no more than one unary rules.</S>
    <S sid="86" ssid="51">To facilitate decoding, we unify the form of spans so that each span contains exactly one unary rule.</S>
    <S sid="87" ssid="52">This is done by adding identity unary rules (N &#8212;* N ) to spans that have no unary rule.</S>
    <S sid="88" ssid="53">These identity unary rules will be removed in evaluation.</S>
    <S sid="89" ssid="54">Hence, there are two states of a span: the top state N and the bottom state N that correspond to the left and right hand of the unary rule runary = N &#8212;* N respectively, as shown in Figure 2.</S>
    <S sid="90" ssid="55">Table 3 lists the feature templates we use for parsing.</S>
    <S sid="91" ssid="56">There are 4 feature sets: (i) bottom state features fbottom(i, j, x, Ni,j), which depend on the bottom states; (ii) top state features ftop(i, j, x, Ni,j); (iii) unary rule features funary(i, j, x, runary i,j ), which extract the transition information from bottom states to top states; (iv) binary rule features where Ni,k&#8722;1, Nk,r are the top states of the left and right children.</S>
    <S sid="92" ssid="57">The score function for a sentence x with parse tree T is defined as: where &#952;bottom, &#952;top, &#952;unary, &#952;binary are the weight vectors of the four feature sets.</S>
    <S sid="93" ssid="58">Given the training corpus {(xi, &#732;Ti)}, the learning task is to estimate the weight vectors so that for each sentence xi, the gold standard tree &#732;Ti achieves the maximal score among all the possible trees.</S>
    <S sid="94" ssid="59">The perceptron algorithm is guaranteed to find the solution if it exists.</S>
    <S sid="95" ssid="60">The three models described above are separately trained to make parameter estimation feasible as well as optimize each individual component.</S>
    <S sid="96" ssid="61">In testbigram of word, POS tag.</S>
    <S sid="97" ssid="62">Xl+a/Xr_a denotes the first/last ath X in the span, while Xl_a/Xr+a denotes the ath X left/right to span.</S>
    <S sid="98" ssid="63">Xm is the first X of right child, and Xm_1 is the last X of the left child. len, lenl, lenr denote the length of the span, left child and right child respectively. wl is the length of word.</S>
    <S sid="99" ssid="64">ROOT/LEAF means the template can only generate the features for the root/initial span. ing, we perform joint decoding to combine information from the three models.</S>
    <S sid="100" ssid="65">Parameters of word segmentation (&#952;seg), POS tagging (&#952;pos), and parsing models (&#952;parse = &#952;bottom&#174;top&#174; unary&#174;bianry) are scaled by three positive hyper-parameters &#945;, &#946;, and &#947; respectively, which control their contribution in the joint model.</S>
    <S sid="101" ssid="66">If &#945; &gt;&gt; &#946; &gt;&gt; &#947;, then the joint model is equivalent to a pipeline model, in which there is no feedback from downstream models to upstream ones.</S>
    <S sid="102" ssid="67">For well tuned hyper-parameters, we expect that segmentation and POS tagging results can be improved by parsing information.</S>
    <S sid="103" ssid="68">The hyperparameters are tuned on development data.</S>
    <S sid="104" ssid="69">In the following sections, for simplicity we drop &#945;, &#946;, &#947;, and just use &#952;seg, &#952;pos, &#952;parse to represent the scaled parameters.</S>
    <S sid="105" ssid="70">The basic idea of our decoding algorithm is to extend the CYK parsing algorithm so that it can deal with transition features in POS tagging and segmentation scores in word segmentation.</S>
    <S sid="106" ssid="71">The joint decoding algorithm is shown in Algorithm 1.</S>
    <S sid="107" ssid="72">Given a sentence x = c1, ... , cl, Line 0 calculates the scores of all possible words in the sentence using Eq(1).</S>
    <S sid="108" ssid="73">There are l(l + 1)/2 word candidates in total.</S>
    <S sid="109" ssid="74">Surrounding words are important features for POS tagging and parsing; however, they are unavailable because segmentation is incomplete before parsing.</S>
    <S sid="110" ssid="75">Therefore, we adopt pseudo surrounding features by simply fixing the context words as the single most likely ones.</S>
    <S sid="111" ssid="76">Given a word candidate wi,j from ci to cj, its previous word s&#8242; is the rightmost one in the best word sequence of c1, ... , ci&#8722;1, which can be obtained by dynamic programming.</S>
    <S sid="112" ssid="77">Recursively, the second word left to wi,j is the previous word of s&#8242;.</S>
    <S sid="113" ssid="78">The next word of wi,j is defined similarly.</S>
    <S sid="114" ssid="79">In Line 1, we use bidirectional Viterbi decoding to obtain all the surrounding words.</S>
    <S sid="115" ssid="80">In the forward direction, the algorithm starts from the first character boundary to the last, and finds the best previous word for the ith character boundary bi.</S>
    <S sid="116" ssid="81">In the backward direction, the algorithm starts from right to left, and finds the best next word of each bi.</S>
    <S sid="117" ssid="82">In Line 2, for each word candidate, we can calculate the score of each POS tag using state features in the POS tagging model, since the context words are available now.</S>
    <S sid="118" ssid="83">The score function of word wi,j with POS tag t is: In Line 3, POS tags of surrounding words can be obtained similarly using bidirectional decoding.</S>
    <S sid="119" ssid="84">That is, for wiJ with POS tag t, we use Viterbi algorithm to search the optimal POS tags of its left and right words.</S>
    <S sid="120" ssid="85">In Lines 4-9, each word was initialized as a basic span.</S>
    <S sid="121" ssid="86">A span structure in the joint model is a 6-tuple: 5(i, j, w, t, N, N), where i, j are the boundary indices, w, t are the word sequence and POS sequence within the span respectively, and N, N are the bottom and top states.</S>
    <S sid="122" ssid="87">There are two types of surrounding n-grams: one is inside the span, for example, the first word of a span, which can be obtained from w; the other is outside the span, for example, the previous word of a span, which is obtained from the pseudo context information.</S>
    <S sid="123" ssid="88">The score of a basic span depends on its corresponding word and POS pair score, and the weights of the active state and unary features.</S>
    <S sid="124" ssid="89">To avoid enumerating the combination of the bottom and top states, initialization for each span is divided into 2 steps.</S>
    <S sid="125" ssid="90">In the first step, the score of every bottom state is calculated using bottom state features, and only the B best states are maintained (see Line 6-7).</S>
    <S sid="126" ssid="91">In the second step, top state features and unary rule features are used to get the score of each top state (Line 9), and only the top B states are preserved.</S>
    <S sid="127" ssid="92">Similarly, there are two steps in the merge operation: S(i, j, w, t, N, N) = Sl(i, k, wl, tl, Nl, Nl) + Sr(k + 1, j, wr, tr, Nr, Nr).</S>
    <S sid="128" ssid="93">The score of the bottom state N is calculated using binary features fbinary(x, i, j, k, w, t, N &#8212;* Nr+Nr), bottom state features fbottom(x, i, j, w, t, N), and POS tag transition features that depend on the boundary POS tags of Sl and Sr. See Line 14 of Algorithm 1, where tlast l and tfirst r are the POS tags of the last word in the left child span and the first word in the right child span respectively.</S>
    <S sid="129" ssid="94">Given a sentence of length l, the complexity for each line of Algorithm 1 is listed in Table 4, where |T  |is the size of POS tag set, M is the number of states, and B is the beam size.</S>
  </SECTION>
  <SECTION title="4 Experiments" number="4">
    <S sid="130" ssid="1">For comparison with other systems, we use the CTB5 corpus, which has been studied for Chinese word segmentation, POS tagging and parsing.</S>
    <S sid="131" ssid="2">We use the standard train/develop/test split of the data.</S>
    <S sid="132" ssid="3">Details are shown in Table 5.</S>
    <S sid="133" ssid="4">For joint word segmentation and POS tagging, a word is correctly predicted if both the boundaries and the POS tag are correctly identified.</S>
    <S sid="134" ssid="5">For joint segmentation, POS tagging, and parsing task, when calculating the bracket scores using existing parseval tools, we need to consider possible word segmentation errors.</S>
    <S sid="135" ssid="6">To do this, we add the word boundary information in states &#8211; a bracket is correct only if its boundaries, label and word segmentation are all correct.</S>
    <S sid="136" ssid="7">One example is shown in Figure 3.</S>
    <S sid="137" ssid="8">Notice that identity unary rules are removed during evaluation.</S>
    <S sid="138" ssid="9">The basic spans are characters, not words, because the number of words in reference and prediction may be different.</S>
    <S sid="139" ssid="10">POS tags are removed since they do not affect the bracket scores.</S>
    <S sid="140" ssid="11">If the segmentation is perfect, then the bracket scores of the modified tree are exactly the same as the original tree.</S>
    <S sid="141" ssid="12">This is similar to evaluating parsing performance on speech transcripts with automatic sentence segmentation (Roark et al., 2006).</S>
    <S sid="142" ssid="13">We evaluate system performance on the individual tasks, as well as the joint tasks.'</S>
    <S sid="143" ssid="14">For word segmentation, three metrics are used for evaluation: precision (P), recall (R), and F-score (F) defined by 2PR/(P+R).</S>
    <S sid="144" ssid="15">Precision is the percentage of correct words in the system output.</S>
    <S sid="145" ssid="16">Recall is the percentage of words in gold standard annotations that are correctly predicted.</S>
    <S sid="146" ssid="17">For parsing, we use the standard parseval evaluation metrics: bracketing precision, recall and F-score.</S>
    <S sid="147" ssid="18">'Note that the joint task refers to automatic segmentation and tagging/parsing.</S>
    <S sid="148" ssid="19">It can be achieved using a pipeline system or our joint decoding method.</S>
    <S sid="149" ssid="20">We train three submodels using the gold features, that is, POS tagger is trained using the perfect segmentation, and parser is trained using perfect segmentation and POS tags.</S>
    <S sid="150" ssid="21">Some studies reported that better performance may be achieved by training subsequent models using representative output of the preceding models (Che et al., 2009).</S>
    <S sid="151" ssid="22">Hence for comparison we trained another parser using automatically generated POS tags obtained from 10-fold cross validation, but did not find significant difference between these two parsers when testing on the perfectly segmented development dataset.</S>
    <S sid="152" ssid="23">Therefore we use the parser trained with perfect POS tags for the joint task.</S>
    <S sid="153" ssid="24">Three hyper-parameters, &#945;, 0, and -y, are tuned on development data using a heuristic search.</S>
    <S sid="154" ssid="25">Parameters that achieved the best joint parsing result are selected.</S>
    <S sid="155" ssid="26">In the search, we fixed -y = 1 and varied &#945;, 0.</S>
    <S sid="156" ssid="27">First, we set 0 = 1, and enumerate &#945; = 4, 2, 1, 2, ... , and choose the best &#945;*.</S>
    <S sid="157" ssid="28">Then, we set&#945; = &#945;* and vary 0 = 4, 2, 1, 2, ... , and select the best 0*.</S>
    <S sid="158" ssid="29">Table 6 lists the parameters we used for training the submodels, as well as the hyper-parameters for joint decoding.</S>
    <S sid="159" ssid="30">In this section we first show that our sub-models are better than or comparable to state-of-the-art systems, and then the joint model is superior to the pipeline approach.</S>
    <S sid="160" ssid="31">Table 7 shows word segmentation results using our word segmentation submodel, in comparison to a few state-of-the-art systems.</S>
    <S sid="161" ssid="32">For our segmentor, we show results for two variants: one removes transition features as described in Section 3.1, the other uses CRFs to learn the weights of transition features.</S>
    <S sid="162" ssid="33">We can see that our system is competitive with all the others except Sun&#8217;s that used additional idiom resources.</S>
    <S sid="163" ssid="34">Our two word segmentors have similar performance.</S>
    <S sid="164" ssid="35">Since the one without transition features can be naturally integrated into the joint system, we use it in the following joint tasks.</S>
    <S sid="165" ssid="36">For the POS tagging only task that takes gold standard word segmentation as input, we have two systems.</S>
    <S sid="166" ssid="37">One uses the linear chain CRFs as described in Section 3.2, the other is obtained using the parser described in Section 3.3 &#8211; the parser generates POS tag hypotheses when POS tag features are not used.</S>
    <S sid="167" ssid="38">The POS tagging accuracy is 95.53% and 95.10% using these two methods respectively.</S>
    <S sid="168" ssid="39">The better performance from the former system may be because the local label dependency is more helpful for POS tagging than the long distance dependencies that might be noisy.</S>
    <S sid="169" ssid="40">This result also confirms our choice of using an independent POS tagger for the sub-model, rather than relying on a parser for POS tagging.</S>
    <S sid="170" ssid="41">However, since there are no reported results for this setup, we demonstrate the competence of our POS tagger using the joint word segmentation and POS tagging task.</S>
    <S sid="171" ssid="42">Table 8 shows the performance of a few systems along with ours, all using the pipeline approach where automatic segmentation is followed by POS tagging.</S>
    <S sid="172" ssid="43">We can see that our POS tagger is comparable to the others.</S>
    <S sid="173" ssid="44">For parsing, Table 9 presents the parsing result on gold standard segmented sentence.</S>
    <S sid="174" ssid="45">Notice that the result of (Harper and Huang, 2009; Zhang and Clark, 2011) are not directly comparable to ours, as they used a different data split.</S>
    <S sid="175" ssid="46">The best published system result on CTB5 is Petrov and Klein&#8217;s, which used PCFG with latent Variables.</S>
    <S sid="176" ssid="47">Our system performs better mainly because it benefits from a large amount of features.</S>
    <S sid="177" ssid="48">For our parser, besides the model described in Section 3.3, we tried two variations: one does not use the automatic POS tag features, the other one is learned on the parent annotated training data.</S>
    <S sid="178" ssid="49">The results in Table 9 show that there is a performance degradation when using parent annotation.</S>
    <S sid="179" ssid="50">This may be due to the introduction of a large number of states, resulting in sparse features.</S>
    <S sid="180" ssid="51">We also notice that with the help of the POS tag information, even automatically generated, the parser gained 0.9% improvement in F-score.</S>
    <S sid="181" ssid="52">This demonstrates the advantage of using a better independent POS tagger and incorporating it in parsing.</S>
    <S sid="182" ssid="53">Finally Table 10 shows the results for the three tasks using our joint decoding method in comparison to the pipeline method.</S>
    <S sid="183" ssid="54">We can see that the joint model outperforms the pipeline one.</S>
    <S sid="184" ssid="55">This is mainly because of a better parsing module as well as joint decoding.</S>
    <S sid="185" ssid="56">In the table we also include results of (Jiang et al., 2009), which is the only reported joint parsing result we found using the same data split on CTB5.</S>
    <S sid="186" ssid="57">They achieved 80.28% parsing F-score using automatic word segmentation.</S>
    <S sid="187" ssid="58">Their adapted system Jiang09+ leveraged additional corpus to improve Chinese word segmentation, resulting in an Fscore of 81.07%.</S>
    <S sid="188" ssid="59">Our system has better performance than these.</S>
    <S sid="189" ssid="60">We compared the results from the pipeline and our joint decoding systems in order to understand the impact of the joint model on word segmentation and POS tagging.</S>
    <S sid="190" ssid="61">We notice that the joint model tend to generate more words than the pipeline model.</S>
    <S sid="191" ssid="62">For example, &#8220;&#24052;&#23572;&#19968;&#34892;&#8221; is one word in the pipeline model, but correctly segmented as two words &#8220;&#24052; &#23572;/&#19968;&#34892;&#8221; in the joint model.</S>
    <S sid="192" ssid="63">This tendency of segmentation also makes it fail to recognize some long words, especially OOV words.</S>
    <S sid="193" ssid="64">For example, &#8220;&#20107; &#23454;&#19978;&#8221; is segmented as &#8220;&#20107;&#23454;/&#19978;&#8221;.</S>
    <S sid="194" ssid="65">In the data set, we find that, the joint model corrected 10 missing boundaries over the pipeline method, and introduced 3 false positive segmentation errors.</S>
    <S sid="195" ssid="66">For the analysis of POS tags, we only examined the words that are correctly segmented by both the pipeline and the joint models.</S>
    <S sid="196" ssid="67">Table 11 shows the increase and decrease of error patterns of the joint model over the pipeline POS tagger.</S>
    <S sid="197" ssid="68">An error pattern &#8220;X -* Y&#8221; means that the word whose true tag is &#8216;X&#8217; is assigned a tag &#8216;Y&#8217;.</S>
    <S sid="198" ssid="69">All the patterns are ranked in descending order of the reduction/increase of the error number.</S>
    <S sid="199" ssid="70">We can see that the joint model has a clear advantage in the disambiguation of {VV, NN} and {DEG, DEC}, which results in the overall improved performance.</S>
    <S sid="200" ssid="71">In contrast, the joint method performs worse on ambiguous POS pairs such as {NN, NR}.</S>
    <S sid="201" ssid="72">This observation is similar to those reported by (Li et al., 2011; Hatori et al., 2011).</S>
  </SECTION>
  <SECTION title="5 Conclusion" number="5">
    <S sid="202" ssid="1">In this paper, we proposed a new algorithm for joint Chinese word segmentation, POS tagging, and parsing.</S>
    <S sid="203" ssid="2">Our algorithm is an extension of the CYK number of the corresponding pattern made by the pipeline tagging model.</S>
    <S sid="204" ssid="3">&#8595; and &#8593; mean the error number reduced or increased by the joint model. parsing method.</S>
    <S sid="205" ssid="4">The sub-models are independently trained for the three tasks to reduce model complexity and optimize individual sub-models.</S>
    <S sid="206" ssid="5">Our experiments demonstrate the advantage of the joint models.</S>
    <S sid="207" ssid="6">In the future work, we will compare this joint model to the pipeline approach that uses multiple candidates or soft decisions in the early modules.</S>
    <S sid="208" ssid="7">We will also investigate methods for joint learning as well as ways to speed up the joint decoding algorithm.</S>
    <S sid="209" ssid="8">Acknowledgments The authors thank Zhongqiang Huang for his help with experiments.</S>
    <S sid="210" ssid="9">This work is partly supported by DARPA under Contract No.</S>
    <S sid="211" ssid="10">HR0011-12-C-0016.</S>
    <S sid="212" ssid="11">Any opinions expressed in this material are those of the authors and do not necessarily reflect the views of DARPA.</S>
  </SECTION>
</PAPER>
