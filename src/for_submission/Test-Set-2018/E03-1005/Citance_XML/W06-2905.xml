<PAPER>
  <S sid="0">What Are The Productive Units Of Natural Language Grammar? A DOP Approach To The Automatic Identification Of Constructions</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We explore a novel computational approach to identifying &#8220;constructions&#8221; or &#8220;multi-word expressions&#8221; (MWEs) in an annotated corpus.</S>
    <S sid="2" ssid="2">In this MWEs have no special status, but emerge in a general procedure for finding the best statistical grammar to describe the training corpus.</S>
    <S sid="3" ssid="3">The statistical grammar formalism used is that of stochastic tree substitution grammars (STSGs), such as used in Data-Oriented Parsing.</S>
    <S sid="4" ssid="4">We present an algorithm for calculating the expected frequencies of arbitrary subtrees given the parameters of an STSG, and a method for estimating the parameters of an STSG given observed frequencies in a tree bank.</S>
    <S sid="5" ssid="5">We report quantitative results on the ATIS corpus of phrase-structure annotated sentences, and give examples of the MWEs extracted from this corpus.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="6" ssid="1">Many current theories of language use and acquisition assume that language users store and use much larger fragments of language than the single words and rules of combination of traditional linguistic models.</S>
    <S sid="7" ssid="2">Such fragments are often called constructions, and the theories that assign them a central role &#8220;construction grammar&#8221; (Goldberg, 1995; Kay and Fillmore, 1999; Tomasello, 2000; Jackendoff, 2002, among others).</S>
    <S sid="8" ssid="3">For construction grammarians, multi-word expressions (MWEs) such as idioms, collocations, fixed expressions and compound verbs and nouns, are not so much exceptions to the rule, but rather extreme cases that reveal some fundamental properties of natural language.</S>
    <S sid="9" ssid="4">In the construction grammar tradition, cooccurrence statistics from corpora have often been used as evidence for hypothesized constructions.</S>
    <S sid="10" ssid="5">However, such statistics are typically gathered on a case-by-case basis, and no reliable procedure exists to automatically identify constructions.</S>
    <S sid="11" ssid="6">In contrast, in computational linguistics, many automatic procedures are studied for identifying MWEs (Sag et al., 2002) &#8211; with varying success &#8211; but here they are treated as exceptions: identifying multi-word expressions is a pre-processing step, where typically adjacent words are grouped together after which the usual procedures for syntactic or semantic analysis can be applied.</S>
    <S sid="12" ssid="7">In this paper I explore an alternative formal and computational approach, where multi-word constructions have no special status, but emerge in a general procedure to find the best statistical grammar to describe a training corpus.</S>
    <S sid="13" ssid="8">Crucially, I use a formalism known as &#8220;Stochastic Tree Substitution Grammars&#8221; (henceforth, STSGs), which can represent single words, contiguous and noncontiguous MWEs, context-free rules or complete parse trees in a unified representation.</S>
    <S sid="14" ssid="9">My approach is closely related to work in statistical parsing known as Data-Oriented Parsing (DOP), an empirically highly successful approach with labeled recall and precision scores on the Penn Tree Bank that are among the best currently obtained (Bod, 2003).</S>
    <S sid="15" ssid="10">DOP, first proposed in (Scha, 1990), can be seen as an early formalization and combination of ideas from construction grammar and statistical parsing.</S>
    <S sid="16" ssid="11">Its key innovations were (i) the proposal to use fragments of trees from a tree bank as the symbolic backbone; (ii) the proposal to allow, in principle, trees of arbitrary size and shape as the elementary units of combination; (iii) the proposal to use the occurrence and co-occurrence frequencies as the basis for structural disambiguation in parsing.</S>
    <S sid="17" ssid="12">The model I develop in this paper is true to these general DOP ideals, although it differs in important respects from the many DOP implementations that have been studied since its first inception (Bod, 1993; Goodman, 1996; Bod, 1998; Sima&#8217;an, 2002; Collins and Duffy, 2002; Bod et al., 2003, and many others).</S>
    <S sid="18" ssid="13">The crucial difference is in the estimation procedure for choosing the weights of the STSG based on observed frequencies in a corpus.</S>
    <S sid="19" ssid="14">Existing DOP models converge to STSGs that either (i) give all subtrees of the observed trees nonzero weights (Bod, 1993; Bod, 2003), or (ii) give only the largest possible fragments nonzero weights (Sima&#8217;an and Buratto, 2003; Zollmann and Sima&#8217;an, 2005).</S>
    <S sid="20" ssid="15">The model in this paper, in contrast, aims at finding the smallest set of productive units that explain the occurrences and co-occurrences in a corpus.</S>
    <S sid="21" ssid="16">Large subtrees only receive non-zero weights, if they occur more frequently than can be expected on the basis of the weights of smaller subtrees.</S>
  </SECTION>
  <SECTION title="2 Formalism, Notation and Definitions" number="2">
    <S sid="22" ssid="1">STSGs are a simple generalization of Stochastic Context Free Grammars (henceforth, SCFGs), where the productive units are elementary trees of arbitrary size instead of the rewrite rules in SCFGs (which can be viewed as trees of depth 1).</S>
    <S sid="23" ssid="2">STSGs form a restricted subclass of Stochastic Tree Adjoining Grammars (henceforth, STAGs) (Resnik, 1992; Schabes, 1992), the difference being that STSGs only allow for substitution and not for adjunction (Joshi and Sarkar, 2003).</S>
    <S sid="24" ssid="3">This limits the generative capacity to that of context-free grammars, and means STSGs cannot be fully lexicalized.</S>
    <S sid="25" ssid="4">These limitations notwithstanding, the close relationship with STAGs is an attractive feature with extensions to the class of mildly context-sensitive languages (Joshi et al., 1991) in mind.</S>
    <S sid="26" ssid="5">Most importantly, however, STSGs are already able to model a vast range of statistical dependencies between words and constituents, which allows them to rightly predict the occurrences of many constructions (Bod, 1998).</S>
    <S sid="27" ssid="6">For completeness, we include the usual definitions of STSGs, the substitution operation and derivation and parse probabilities (Bod, 1998), using our own notation.</S>
    <S sid="28" ssid="7">An STSG is a 5-tuple (Vn, Vt, 5, T, w), where Vn is the set of non-terminal symbols; Vt is the set of terminal symbols; 5 E Vn is the start symbol; T is a set of elementary trees, such that for every t E T the unique root node r(t) E Vn, the set of internal nodes i(t) C Vn and the set of leaf nodes l(t) C Vn U Vt; finally, w : T &#8212;* [0, 1] is a probability (weight) distribution over the elementary trees, such that for any t E T, Et&#65533;CR(t) w(t') = 1, where R(t) is the set of elementary trees with the same root label as t. It will prove useful to also define the set of all possible trees 0 over the defined alphabets (with the same conditions on root, internal and leaf nodes as for T), and the set of all possible complete parse trees O (with r(t) = 5 and all leaf nodes l(t) C Vt).</S>
    <S sid="29" ssid="8">Obviously, T C 0 and O C 0.</S>
    <S sid="30" ssid="9">The substitution operation o is defined if the leftmost nonterminal leaf in t1 is identical to the root of t2.</S>
    <S sid="31" ssid="10">Performing substitution t1 o t2 yields t3, if t3 is identical to t1 with the leftmost nonterminal leaf replaced by t2.</S>
    <S sid="32" ssid="11">A derivation is a sequence of elementary trees, where the first tree t E T has root-label 5 and every next tree combines through substitution with the result of the substitutions before it.</S>
    <S sid="33" ssid="12">The probability of a derivation d is defined as the product of weights of the elementary trees involved: A parse tree is any tree t E O.</S>
    <S sid="34" ssid="13">Multiple derivations can yield the same parse tree; the probability of a parse tree p equals the sum of the probabilities of the different derivations that yield that same tree: where d is the tree derived by derivation d. In this paper, we are only concerned with grammars that define proper probability distributions over trees, such that the probability of all derivations sum up to 1 and no probability mass gets lost in derivations that never reach a terminal yield.</S>
    <S sid="35" ssid="14">We require: In addition to these conventional definitions, we will make use in this paper of the concepts &#8220;usage frequency&#8221; and &#8220;occurrence frequency&#8221;.</S>
    <S sid="36" ssid="15">When we consider an arbitrary subtree t, the usage frequency u(t) describes the relative frequency with which elementary tree t is involved in a set of derivations.</S>
    <S sid="37" ssid="16">Given a grammar G E STSG, the expected usage frequency is: where C (t, d) gives the number of occurrences of t in d. The set of derivations, and hence usage frequency, is usually considered hidden information.</S>
    <S sid="38" ssid="17">The occurrence frequency f(t) describes the relative frequency with which t occurs as a subtree of a set of parse trees, which is usually assumed to be observable information.</S>
    <S sid="39" ssid="18">If grammar G is used to generate trees, it will create a tree bank where each parse tree will occur with an expected frequency as in equation (2).</S>
    <S sid="40" ssid="19">More generally, the expected occurrence frequency f(t) (relative to the number n of complete trees in the tree bank) of a subtree t is: where p* is the multiset of all subtrees of p. Hence, w(t), u(t) and f(t) all assign values (the latter two not necessarily between 0 and 1) to trees.</S>
    <S sid="41" ssid="20">An important question is how these different values can be related.</S>
    <S sid="42" ssid="21">For STSGs which have only elementary trees of depth 1, and are thus equivalent to SCFGs, these relations are straightforward: the usage frequency of an elementary tree simply equals its expected frequency, and can be derived from the weights by multiplying inside and outside probabilities (Lari and Young, 1990).</S>
    <S sid="43" ssid="22">Estimating the weights of an (unconstrained and untransformed) SCFG from an tree bank is straightforward, as weights, in the limit, simply equal the relative frequency of each depth-1 subtree (relative to other depth-1 subtrees with the same root label).</S>
    <S sid="44" ssid="23">When elementary trees can be of arbitrary depth, however, many different derivations can yield the same tree, and a given subtree t can emerge without the corresponding elementary tree ever having been used.</S>
    <S sid="45" ssid="24">The expected frequencies are sums of products, and &#8211; if one wants to avoid exhaustively enumerating all possible parse trees &#8211; surprisingly difficult to calculate, as will become clear below.</S>
    <S sid="46" ssid="25">Relating usage frequencies to weights is relatively simple.</S>
    <S sid="47" ssid="26">With a bit of algebra we can work out the following relations: where Ct0 t gives the number of occurrences of the root label r(t) of t among the leaves of t'.</S>
    <S sid="48" ssid="27">The inverse relation is straightforward: The two remaining problems &#8211; calculating expected frequencies from weights and estimating the weights from observed frequencies &#8211; are surprisingly difficult and heretofore not satisfactorily solved.</S>
    <S sid="49" ssid="28">In (Zuidema, 2006) we evaluate existing estimation methods for Data-Oriented Parsing, and show that they are ill-suited for learning tasks such as studied in this paper.</S>
    <S sid="50" ssid="29">In the next section, we present a new algorithm for estimation, which makes use of a method for calculating expected frequencies that we sketch in this section.</S>
    <S sid="51" ssid="30">This method makes use of sub- and supertree relations that we explain first.</S>
    <S sid="52" ssid="31">We define two types of subtrees of a given tree t, which, for lack of better terminology, we will call &#8220;twigs&#8221; and &#8220;prunes&#8221; of t. Twigs are those subtrees headed by any of t&#8217;s internal nodes and everything below.</S>
    <S sid="53" ssid="32">Prunes are those subtrees headed by t&#8217;s rootnode, pruned at any number (&#8805; 0) of internal nodes.</S>
    <S sid="54" ssid="33">Using &#9702; to indicate left-most substitution, we write: Thus defined, the set of all subtrees st(t) of t corresponds to the set of all prunes of all twigs of t: st(t) = {t''|&#8707;t'(t' &#8712; tw(t) &#8743; t'' &#8712; pr(t')).</S>
    <S sid="55" ssid="34">We further define the sets of supertwigs, superprunes and supertrees as follows: Using these sets, and the set of derivations D(t) of the fragment t, a general expression for the expected frequency of t is: where hd1, ... , dni is the sequence of elementary trees in derivation d. A derivation of this equation is provided on the author&#8217;s websites.</S>
    <S sid="56" ssid="35">Note that it 'http://staff.science.uva.nl/&#8212;jzuidema.</S>
    <S sid="57" ssid="36">The intuition behind it is as follows.</S>
    <S sid="58" ssid="37">Observe first that there are many ways in which an arbitrary fragment t can emerge, many of which do not involve the usage of the elementary tree t. It is useful to partition the set of all derivations of complete parse trees according to the substitution sites inside t that they involve, and hence according to the corresponding derivations of t. The first summation in (8) simply sums over all these cases.</S>
    <S sid="59" ssid="38">Each derivation of t involves a first elementary tree d1, and possibly a sequence of further elementary trees (d2, ... , dn).</S>
    <S sid="60" ssid="39">Roughly speaking, the &#945;-term in equation (8) describes the frequency with which a d1 will be generated.</S>
    <S sid="61" ssid="40">The 3-term then describes the probability that d1 will be expanded as t. The equation simplifies considerably for those fragments that have no nonterminal leaves: the set pr;(t) then only contains t, and the two summations over this set disappear.</S>
    <S sid="62" ssid="41">The equation further simplifies if only depth-1 elementary trees have nonzero weights (i.e. for SCFGs): &#945; and ,3 then essentially give outside and inside probabilities (Lari and Young, 1990).</S>
    <S sid="63" ssid="42">However, for unconstrained STSGs we need all sums and products in (8). will, in general, be computationally extremely expensive to calculate E[f(t)] .</S>
    <S sid="64" ssid="43">We will come back to computational efficiency issues in the discussion.</S>
  </SECTION>
  <SECTION title="3 Estimation: push-n-pull" number="3">
    <S sid="65" ssid="1">The goal of this paper is an automatic discovery procedure for finding &#8220;constructions&#8221; based on occurrence and co-occurrence frequencies in a corpus.</S>
    <S sid="66" ssid="2">Now that we have introduced the necessary terminology, we can reformulate this goal as follows: What are the elementary trees with multiple words with the highest usage frequency in the STSG estimatedfrom an annotated corpus?</S>
    <S sid="67" ssid="3">Thus phrased, the crucial next step is to decide on an estimation procedure for learning an STSG from a corpus.</S>
    <S sid="68" ssid="4">Here we develop an estimation procedure we call &#8220;push-n-pull&#8221;.</S>
    <S sid="69" ssid="5">The basic idea is as follows.</S>
    <S sid="70" ssid="6">Given an initial setting of the parameters, the method calculates the expected frequency of all complete and incomplete trees.</S>
    <S sid="71" ssid="7">If a tree&#8217;s expected frequency is higher than its observed frequency, the method subtracts the difference from the tree&#8217;s score, and distributes (&#8220;pushes&#8221;) it over the trees involved in its derivations.</S>
    <S sid="72" ssid="8">If it is lower, it &#8220;pulls&#8221; the difference from these same derivations.</S>
    <S sid="73" ssid="9">The method includes a bias for moving probability mass to smaller elementary trees, to avoid overfitting; its effects become smaller as more data gets observed.</S>
    <S sid="74" ssid="10">Because the method for calculating estimated frequency works with usage-frequencies, the push-npull algorithm also uses these as parameters.</S>
    <S sid="75" ssid="11">More precisely, it manipulates a &#8220;score&#8221;, which is the product of usage frequency and the total number of parse trees observed.</S>
    <S sid="76" ssid="12">Implicit here is the assumption that by shifting usage frequencies between different derivations, the relation with weights remains as in equation (6).</S>
    <S sid="77" ssid="13">Simulations suggest this is reasonable.</S>
    <S sid="78" ssid="14">In the current implementation, the method starts with all frequency mass in the longest derivations, i.e. in the depth-1 elementary trees.</S>
    <S sid="79" ssid="15">Finally, the current implementation is incremental.</S>
    <S sid="80" ssid="16">It keeps track of the frequencies with which it observes subtrees in a corpus.</S>
    <S sid="81" ssid="17">For each tree received, it finds all derivations and all probabilities, updates frequencies and scores according to the rules sketched above.</S>
    <S sid="82" ssid="18">In pseudocode, the push-n-pull algorithm is as follows: for each observed parse tree p where sc(t) is the score of t, B is the bias towards smaller subtrees, -y is the learning rate parameter and f(t) is the observed frequency of t. A0 thus gives the actual change in the score of t, based on the difference between expected and observed frequency, bias, learning rate and how much scores can be pushed or pulled2.</S>
    <S sid="83" ssid="19">For computational efficiency, only subtrees with a depth no larger than d = 3 or d = 4 and only derivations involving 2 elementary trees are considered.</S>
  </SECTION>
  <SECTION title="4 Results" number="4">
    <S sid="84" ssid="1">We have implemented the algorithms for calculating the expected frequency, and the push-n-pull algorithm for estimation.</S>
    <S sid="85" ssid="2">We have evaluated the algorithms on a number of simple example STSGs and found that the expected frequency algorithm correctly predicts observed frequencies.</S>
    <S sid="86" ssid="3">We have further found that &#8211; unlike existing estimation methods &#8211; the push-n-pull algorithm converges to STSGs that closely model the observed frequencies (i.e. that maximize the likelihood of the data) without putting all probability mass in the largest elementary trees (i.e. whilst retaining generalizations about the data).</S>
    <S sid="87" ssid="4">Here we report first quantitative results on the ATIS3 corpus (Hemphill et al., 1990).</S>
    <S sid="88" ssid="5">Before processing, all trees (train and test set) were converted to a format that our current implementation requires (all non-terminal labels are unique, all internal nodes have two daughters, all preterminal nodes have a single lexical daughter; all unary productions and all traces were removed).</S>
    <S sid="89" ssid="6">The set of trees was randomly split in a train set of 462 trees, and a test set 2An important topic for future research is to clarify the relation between push-n-pull and Expectation Maximization. of 116 trees.</S>
    <S sid="90" ssid="7">The push-n-pull algorithm was then run in 10 passes over the train set, with d = 3, B = 0 and -y = 0.1.</S>
    <S sid="91" ssid="8">By calculating the most probable parse3 for each yield of the trees in test set, and running &#8220;evalb&#8221; we arrive at the following quantitative results: a string set coverage of 84% (19 failed parses), labeled recall of 95.07, and labeled precision of 95.07.</S>
    <S sid="92" ssid="9">We obtained almost identical numbers on the same data with a reimplementation of the DOP1 algorithm (Bod, 1998). on the same 462-116 random train-testset split of a treebank derived from the ATIS3 corpus (we emphasize that all trees, also those of the test-set, were converted to Chomsky Normal Form, whereby unary production and traces were removed and top-nodes relabeled &#8220;TOP&#8221;.</S>
    <S sid="93" ssid="10">These results are thus not comparable to previous methods evaluated on the ATIS3 corpus.)</S>
    <S sid="94" ssid="11">EM is &#8220;exact match&#8221;. method # rules Cov.</S>
    <S sid="95" ssid="12">LR LP EM sc &gt; 0.3 8593 77% 80.8 80.8 46.3 sc &gt; 0.1 98443 77% 81.9 81.9 48.8 Table 2: Parseval scores using a p-n-p induced STSG on the same treebank as in table 1, using a different random 525-53 train-testset split.</S>
    <S sid="96" ssid="13">Shown are results were only elementary trees with scores higher than 0.3 and 0.1 respectively are used.</S>
    <S sid="97" ssid="14">However, more interesting is a qualitative analysis of the STSG induced, which shows that, unlike DOP1, push-n-pull arrives at a grammar that gives high weights (and scores) to those elementary 3We approximated the most probable parse as follows (following (Bod, 2003)).</S>
    <S sid="98" ssid="15">We first converted the induced STSG to an isomorph SCFG, by giving the internal nodes of every elementary tree t unique address-labels, and reading off all CFG productions (all with weight 1.0, except for the top-production, which receives the weight of t).</S>
    <S sid="99" ssid="16">An existing SCFG parser (Schmid, 2004) was then used, with a simple unknown word heuristic, to generate the Viterbi n-best parses with n = 100, and, after removing the address labels, all equal parses and their probabilities were summed, and the one with highest probability chosen. trees that best explain the overrepresentation of certain constructions in the data.</S>
    <S sid="100" ssid="17">For instance, in a run with d = 4,'y = 1.0, B = 1.0, the 50 elementary trees with the highest scores, as shown in figure 1, are all exemplary of frequent formulas in the ATIS corpus such as &#8220;show me X&#8221;, &#8220;I&#8217;d like to X&#8221;, &#8220;which of these&#8221;, &#8220;what is the X&#8221;, &#8220;cheapest fare&#8221; and &#8220;flights from X to Y&#8221;.</S>
    <S sid="101" ssid="18">In short, the push-n-pull algorithm &#8211; while starting out considering all possible subtrees &#8211; converges to a grammar which makes linguistically relevant generalizations.</S>
    <S sid="102" ssid="19">This allows for a more compact grammar (58799 rules in the SCFG reduction, vs. 77852 for DOP1), whilst retaining DOP&#8217;s excellent empirical performance.</S>
  </SECTION>
  <SECTION title="5 Discussion" number="5">
    <S sid="103" ssid="1">Calculating E[f(t)] using equation (8) can be extremely expensive in computational terms.</S>
    <S sid="104" ssid="2">One will typically want to calculate this value for all subtrees, the number of which is exponential in the size of the trees in the training data.</S>
    <S sid="105" ssid="3">For each subtree t, we will need to consider the set of all its derivations (exponential in the size of t), and for each derivation the set of supertwigs of the first elementary trees and, for incompletely lexicalized subtrees, the set of superprunes of all elementary trees in their derivations.</S>
    <S sid="106" ssid="4">The latter two sets, however, need not be constructed for every time the expected frequency E[f(t)] is calculated.</S>
    <S sid="107" ssid="5">Instead, we can, as we do in the current implementation, keep track of the two sums for every change of the weights.</S>
    <S sid="108" ssid="6">However, there are many further possibilities for improving the efficiency of the algorithm that are currently not implemented.</S>
    <S sid="109" ssid="7">Equation (8) remains valid under various restrictions on the elementary trees that we are willing to consider as productive units.</S>
    <S sid="110" ssid="8">Some of these will remove the exponential dependence on the size of the trees in the training data.</S>
    <S sid="111" ssid="9">For instance, in the case where we restrict the productive units (with nonzero weights) to depth-1 trees (i.e.</S>
    <S sid="112" ssid="10">CFG rules), equation (8) collapses to the product of inside and outside probabilities, which can be calculated using dynamical programming in polynomial time (Lari and Young, 1990).</S>
    <S sid="113" ssid="11">A major topic for future research is to define linguistically motivated restrictions that allow for efficient computation.</S>
    <S sid="114" ssid="12">Another concern is the size of the grammar the estimation procedure produces, and hence the time and space efficiency of the resulting parser.</S>
    <S sid="115" ssid="13">Table 1 already showed that push-n-pull leads to a more concise grammar.</S>
    <S sid="116" ssid="14">The reason is that many potential elementary trees receive a score (and weight) 0.</S>
    <S sid="117" ssid="15">More generally, push-n-pull generates extremely tilted score distributions, which allows for even more compact but highly accurate approximations.</S>
    <S sid="118" ssid="16">In table 2 we show, for the d = 4 grammar of figure 1, that a 10-fold reduction of the grammar size by pruning elementary trees with low scores, leads only to a small decrease in the LP and LR measures.</S>
    <S sid="119" ssid="17">Another interesting question is if and how the current algorithm can be extended to the full class of Stochastic Tree-Adjoining Grammars (Schabes, 1992; Resnik, 1992).</S>
    <S sid="120" ssid="18">With the added operation of adjunction, equation (8) is not valid anymore.</S>
    <S sid="121" ssid="19">Given the computational complexities that it already gives rise to, however, it seems that issue of linguistically motivated restrictions (other than lexicalization) should be considered first.</S>
    <S sid="122" ssid="20">Finally, given that the current approach is dependent on the availability of a large annotated corpus, an important question is if and how it can be extended to work with unlabeled data.</S>
    <S sid="123" ssid="21">That is, can we transform the push-npull algorithm to perform the unsupervised learning of STSGs?</S>
    <S sid="124" ssid="22">Although most work on unsupervised grammar learning concerns SCFGs (including some of our own (Zuidema, 2003)) it is interesting to note that much of the evidence for construction grammar in fact comes from the language acquisition literature (Tomasello, 2000).</S>
  </SECTION>
  <SECTION title="6 Conclusions" number="6">
    <S sid="125" ssid="1">Theoretical linguistics has long strived to account for the unbounded productivity of natural language syntax with as few units and rules of combination as possible.</S>
    <S sid="126" ssid="2">In contrast, construction grammar and related theories of grammar postulate a heterogeneous and redundant storage of &#8220;constructions&#8221;.</S>
    <S sid="127" ssid="3">If this view is correct, we expect to see statistical signatures of these constructions in the distributional information that can be derived from corpora of natural language utterances.</S>
    <S sid="128" ssid="4">How can we recover those signatures?</S>
    <S sid="129" ssid="5">In this paper we have presented an approach to identifying the relevant statistical correlations in a corpus based on the assumption that the (a) The &#8220;show me NP PP&#8221; frame, (b) The complete parse tree (c) The frame for &#8220;flights from NP to which occurs very frequently in for the sentence &#8220;Which of NP&#8221; the training data and is repre- these flights&#8221;, which occurs sented in several elementary trees 16 times in training data. with high weight. using the push-n-pull algorithm on the ATIS3 corpus.</S>
    <S sid="130" ssid="6">For use in the current implementation, the parse trees have been converted to Chomsky Normal Form (all occurrences of A &#8594; B, B &#8594; w are replaced by A &#8594; w; all occurrences of A &#8594; BCw are replaced by A &#8594; BA&#8727;, A&#8727; &#8594; Cw), all non-terminal labels are made unique for a particular parse tree (address labeling not shown) and all top nodes are replaced by the non-terminal &#8220;TOP&#8221;.</S>
    <S sid="131" ssid="7">Listed are the elementary trees of the induced STSG with for each tree the score, the weight and the frequency with which it occurs in the training set. corpus is generated by an STSG, and by inferring the properties of that underlying STSG.</S>
    <S sid="132" ssid="8">Given our best guess of the STSG that generated the data, we can start to ask questions like: which subtrees are overrepresented in the corpus?</S>
    <S sid="133" ssid="9">Which correlations are so strong that it is reasonable to think of the correlated phrases as a single unit?</S>
    <S sid="134" ssid="10">We presented a new algorithm for estimating weights of an STSG from a corpus, and reported promising empirical results on a small corpus.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="7">
    <S sid="135" ssid="1">The author is funded by the Netherlands Organisation for Scientific Research (Exacte Wetenschappen), project number 612.066.405.</S>
    <S sid="136" ssid="2">Many thanks to Yoav Seginer, Rens Bod and Remko Scha and the anonymous reviewers for very useful comments.</S>
  </SECTION>
</PAPER>
