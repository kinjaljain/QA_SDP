<PAPER>
  <S sid="0">Efficient Parsing of Well-Nested Linear Context-Free Rewriting Systems</S>
  <ABSTRACT>
    <S sid="1" ssid="1">The use of well-nested linear context-free rewriting systems has been empirically motivated for modeling of the syntax of languages with discontinuous constituents or relatively free word order.</S>
    <S sid="2" ssid="2">We present a chart-based parsing algorithm that asymptotically improves the known running time upper bound for this class of rewriting systems.</S>
    <S sid="3" ssid="3">Our result is obtained through a linear space construction of a binary normal form for the grammar at hand.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="4" ssid="1">Since its earliest years, one of the main goals of computational linguistics has been the modeling of natural language syntax by means of formal grammars.</S>
    <S sid="5" ssid="2">Following results by Huybregts (1984) and Shieber (1985), special attention has been given to formalisms that enlarge the generative power of context-free grammars, but still remain below the full generative power of context-sensitive grammars.</S>
    <S sid="6" ssid="3">On this line of investigation, mildly context-sensitive grammar formalisms have been introduced (Joshi, 1985), including, among several others, the tree adjoining grammars (TAGs) of Joshi et al. (1975).</S>
    <S sid="7" ssid="4">Linear context-free rewriting system (LCFRS), introduced by Vijay-Shanker et al. (1987), is a mildly context-sensitive formalism that allows the derivation of tuples of strings, i.e., discontinuous phrases.</S>
    <S sid="8" ssid="5">This feature has been used to model phrase structure treebanks with discontinuous constituents (Maier and S&#248;gaard, 2008), as well as to map non-projective dependency trees into discontinuous phrase structures (Kuhlmann and Satta, 2009).</S>
    <S sid="9" ssid="6">Informally, in an LCFRS G, each nonterminal can generate string tuples with a fixed number of components.</S>
    <S sid="10" ssid="7">The fan-out of G is defined as the maximum number of tuple components generated by G. During a derivation of an LCFRS, tuple components generated by the nonterminals in the right-hand side of a production are concatenated to form new tuples, possibly adding some terminal symbols.</S>
    <S sid="11" ssid="8">The only restriction applying to these generalized concatenation operations is linearity, that is, components cannot be duplicated or deleted.</S>
    <S sid="12" ssid="9">The freedom in the rearrangement of components has specific consequences in terms of the computational and descriptional complexity of LCFRS.</S>
    <S sid="13" ssid="10">Even for grammars with bounded fan-out, the universal recognition problem is NP-hard (Satta, 1992), and these systems lack Chomsky-like normal forms for fixed fan-out (Rambow and Satta, 1999) that are especially convenient in tabular parsing.</S>
    <S sid="14" ssid="11">This is in contrast with other mildly context-sensitive formalisms, and TAG in particular: TAGs can be parsed in polynomial time both with respect to grammar size and string size, and they can be cast in normal forms having binary derivation trees only.</S>
    <S sid="15" ssid="12">It has recently been argued that LCFRS might be too powerful for modeling languages with discontinuous constituents or with relatively free word order, and that additional restrictions on the rearrangement of components might be needed.</S>
    <S sid="16" ssid="13">More specifically, analyses of both dependency and constituency treebanks (Kuhlmann and Nivre, 2006; Havelka, 2007; Maier and Lichte, 2009) have shown that rearrangements of argument tuples almost always satisfy the so-called well-nestedness condition, a generalization of the standard condition on balanced brackets.</S>
    <S sid="17" ssid="14">This condition states that any two components x1, x2 of some tuple will never be composed with any two components y1, y2 of some other tuple in such a way that a &#8216;crossing&#8217; configuration is realized.</S>
    <S sid="18" ssid="15">In this paper, we contribute to a better understanding of the formal properties of well-nested LCFRS.</S>
    <S sid="19" ssid="16">We show that, when fan-out is bounded by any integer &#981; &#8805; 1, these systems can always be transformed, in an efficient way, into a specific normal form with no more than two nonterminals in their productions&#8217; right-hand sides.</S>
    <S sid="20" ssid="17">On the basis of this result, we then develop an efficient parsing algorithm for wellnested LCFRS, running in time O(&#981; &#183; |G |&#183; |w|2&#981;+2), where G and w are the input grammar and string, respectively.</S>
    <S sid="21" ssid="18">Well-nested LCFRS with fan-out &#981; = 2 are weakly equivalent to TAG, and our complexity result reduces to the well-known upper bound O(|G |&#183; |w|6) for this class.</S>
    <S sid="22" ssid="19">For &#981; &gt; 2, our upper bound is asymptotically better than the one obtained from existing parsing algorithms for general LCFRS or equivalent formalisms (Seki et al., 1991).</S>
    <S sid="23" ssid="20">Well-nested LCFRS are generatively equivalent to (among others) coupled context-free grammars (CCFG), introduced by Hotz and Pitsch (1996).</S>
    <S sid="24" ssid="21">These authors also provide a normal form and develop a parsing algorithm for CCFGs.</S>
    <S sid="25" ssid="22">One difference with respect to our result is that the normal form for CCFGs allows more than two nonterminals to appear in the right-hand side of a production, even though no nonterminal may contribute more than two tuple components.</S>
    <S sid="26" ssid="23">Also, the construction in (Hotz and Pitsch, 1996) results in a blow-up of the grammar that is exponential in its fan-out, and the parsing algorithm that is derived runs in time O(4&#981; &#183; |G |&#183; |w|2&#981;+2).</S>
    <S sid="27" ssid="24">Our result is therefore a considerable asymptotic improvement over the CCFG result, both with respect to the normal form construction and the parsing efficiency.</S>
    <S sid="28" ssid="25">Finally, under a practical perspective, our parser is a simple chart-based algorithm, while the algorithm in (Hotz and Pitsch, 1996) involves two passes and is considerably more complex to analyze and to implement than ours.</S>
    <S sid="29" ssid="26">Kanazawa and Salvati (2010) mention a normal form for well-nested multiple context-free grammars.</S>
    <S sid="30" ssid="27">Structure In Section 2, we introduce LCFRS and the class of well-nested LCFRS that is the focus of this paper.</S>
    <S sid="31" ssid="28">In Section 3, we discuss the parsing complexity of LCFRS, and show why grammars using our normal form can be parsed efficiently.</S>
    <S sid="32" ssid="29">Section 4 presents the transformation of a well-nested LCFRS into the normal form.</S>
    <S sid="33" ssid="30">Section 5 concludes the paper.</S>
  </SECTION>
  <SECTION title="2 Linear Context-Free Rewriting Systems" number="2">
    <S sid="34" ssid="1">We write [n] to denote the set of positive integers up to and including n: [n] = {1, ... , n}.</S>
    <S sid="35" ssid="2">Let &#931; be an alphabet.</S>
    <S sid="36" ssid="3">For integers m &#8805; 0 and k1, ... , km, k &#8805; 1, a total function is called a linear, non-erasing function over &#931; with type k1 &#215; &#183; &#183; &#183; &#215; km &#8594; k, if it can be defined by an equation of the form f(hx1,1, ... , x1,k1i, ... , hxm,1, ..., xm,kmi) = &#945;~ , where &#945;~ is a k-tuple of strings over the variables on the left-hand side of the equation and &#931; with the property that each variable occurs in &#945;~ exactly once.</S>
    <S sid="37" ssid="4">The values m and k are called the rank and the fanout of f, and denoted by &#961;(f) and &#981;(f).</S>
    <S sid="38" ssid="5">For the purposes of this paper, a linear context-free rewriting system, henceforth LCFRS, is a construct G = (N, T, P, S), where N is an alphabet of nonterminal symbols in which each symbol A is associated with a positive integer &#981;(A) called its fan-out, T is an alphabet of terminal symbols, S &#8712; N is a distinguished start symbol with &#981;(S) = 1; and P is a finite set of productions of the form where m &#8805; 0, A, A1, ... , Am &#8712; N, and f is a linear, non-erasing function over the terminal alphabet T with type &#981;(A1) &#215; &#183; &#183; &#183; &#215; &#981;(Am) &#8594; &#981;(A), called the composition operation associated with p. The rank of G and the fan-out of G are defined as the maximal rank and fan-out of the composition operations of G, and are denoted by &#961;(G) and &#981;(G).</S>
    <S sid="39" ssid="6">The sets of derivation trees of G are the smallest indexed family of sets DA, A &#8712; N, such that, if is a production of G and ti E DAi for all i E [m], then t = p(t1, ... , tm) E DA.</S>
    <S sid="40" ssid="7">By interpreting productions as their associated composition operations in the obvious way, a derivation tree t E DA evaluates to a cp(A)-tuple of strings over T; we denote this tuple by val(t).</S>
    <S sid="41" ssid="8">The string language generated by G, denoted by L(G), is then defined as Two LCFRS are called weakly equivalent, if they generate the same string language.</S>
    <S sid="42" ssid="9">Example Figure 1 shows a sample LCFRS G with p(G) = 1 and cp(G) = 2.</S>
    <S sid="43" ssid="10">The sets of its derivation trees are DR = { pn2(p3)  |n &gt; 0 } and DS = { p1(t)  |t E DR }.</S>
    <S sid="44" ssid="11">The string language generated by G is { anbncndn  |n &gt; 0 }.</S>
    <S sid="45" ssid="12">In the remainder of this paper, we use the following convenient syntax for tuples of strings.</S>
    <S sid="46" ssid="13">Instead of using the $-symbol to mark the component boundaries.</S>
    <S sid="47" ssid="14">We call this the characteristic string of the tuple, and an occurrence of the symbol $ a gap marker.</S>
    <S sid="48" ssid="15">We also use this notation for composition operations.</S>
    <S sid="49" ssid="16">For example, the characteristic string of the operation is a x1,1 x2,1 $ x1,2 b.</S>
    <S sid="50" ssid="17">If we assume the variables on the left-hand side of an equation to be named according to the schema used in Section 2.1, then the characteristic string of a composition operation determines that operation completely.</S>
    <S sid="51" ssid="18">We will therefore freely identify the two, and write productions as where the string inside the brackets is the characteristic string of some composition operation.</S>
    <S sid="52" ssid="19">The substrings v1, ... , vk are called the components of the characteristic string.</S>
    <S sid="53" ssid="20">Note that the characteristic string of a composition operation with type k1 x &#183; &#183; &#183; x km &#8212;* k is a sequence of terminal symbols, gap markers, and variables from the set { xi,j  |i E [m], j E [ki] } in which the number of gap markers is k&#8722;1, and each variable occurs exactly once.</S>
    <S sid="54" ssid="21">When in the context of such a composition operation we refer to &#8216;a variable of the form xi,j&#8217;, then it will always be the case that i E [m] and j E [ki].</S>
    <S sid="55" ssid="22">The identification of composition operations and their characteristic strings allows us to construct new operations by string manipulations: if, for example, we delete some variables from a characteristic string, then the resulting string still defines a composition operation (after a suitable renaming of the remaining variables, which we leave implicit).</S>
    <S sid="56" ssid="23">To simplify our presentation, we will assume that LCFRS are given in a certain canonical form.</S>
    <S sid="57" ssid="24">Intuitively, this canonical form requires the variables in the characteristic string of a composition operation to be ordered in a certain way.</S>
    <S sid="58" ssid="25">Formally, the defining equation of a composition operation f with type k1 x &#183; &#183; &#183; x km &#8212;* k is called canonical, if (i) the sequence obtained from f by reading variables of the form xi,1 from left to right has the form x1,1 &#183; &#183; &#183; xm,1; and (ii) for each i E [m], the sequence obtained from f by reading variables of the form xi,j from left to right has the form xi,1 &#183; &#183; &#183; xi,ki.</S>
    <S sid="59" ssid="26">An LCFRS is called canonical, if each of its composition operations is canonical.</S>
    <S sid="60" ssid="27">We omit the proof that every LCFRS can be transformed into a weakly equivalent canonical LCFRS.</S>
    <S sid="61" ssid="28">However, we point out that both the normal form and the parsing algorithm that we present in this paper can be applied also to general LCFRS.</S>
    <S sid="62" ssid="29">This is in contrast to some left-to-right parsers in the literature on LCFRS and equivalent formalisms (de la Clergerie, 2002; Kallmeyer and Maier, 2009), which actually depend on productions in canonical form.</S>
    <S sid="63" ssid="30">We now characterize the class of well-nested LCFRS that are the focus of this paper.</S>
    <S sid="64" ssid="31">Well-nestedness was first studied in the context of dependency grammars (Kuhlmann and M&#246;hl, 2007).</S>
    <S sid="65" ssid="32">Kanazawa (2009) defines well-nested multiple context-free grammars, which are weakly equivalent to well-nested LCFRS.</S>
    <S sid="66" ssid="33">A composition operation is called well-nested, if it does not contain a substring of the form For example, the operation x1,1 x2,1$x2,2 x1,2 is wellnested, while x1,1 x2,1 $ x1,2 x2,2 is not.</S>
    <S sid="67" ssid="34">An LCFRS is called well-nested, if it contains only well-nested composition operations.</S>
    <S sid="68" ssid="35">The class of languages generated by well-nested LCFRS is properly included in the class of languages generated by general LCFRS; see Kanazawa and Salvati (2010) for further discussion.</S>
  </SECTION>
  <SECTION title="3 Parsing LCFRS" number="3">
    <S sid="69" ssid="1">We now discuss the parsing complexity of LCFRS, and motivate our interest in a normal form for wellnested LCFRS.</S>
    <S sid="70" ssid="2">A bottom-up, chart-based parsing algorithm for the class of (not necessarily well-nested) LCFRS can be defined by using the formalism of parsing schemata (Sikkel, 1997).</S>
    <S sid="71" ssid="3">The parsing schemata approach considers parsing as a deduction process (as in Shieber et al. (1995)), generating intermediate results called items.</S>
    <S sid="72" ssid="4">Starting with an initial set of items obtained from each input sentence, a parsing schema defines a set of deduction steps that can be used to infer new items from existing ones.</S>
    <S sid="73" ssid="5">Each item contains information about the sentence&#8217;s structure, and a successful parsing process will produce at least one final item containing a full parse for the input.</S>
    <S sid="74" ssid="6">The item set used by our bottom-up algorithm to parse an input string w = a1 &#183; &#183; &#183; an with an LCFRS where an item [A, (l1, r1), ... , (lk, rk)] can be interpreted as the set of those derivation trees t &#8712; DA of G for which val(t) = al1+1 &#183;&#183;&#183; ar1 $ &#183;&#183;&#183; $ alk+1 &#183;&#183;&#183; ark .</S>
    <S sid="75" ssid="7">The set of final items is thus F = {[S, (0, n)]}, containing full derivation trees that evaluate to w. For simplicity of definition of the sets of initial items and deduction steps, let us assume that productions of rank &gt; 0 in our grammar do not contain terminal symbols in their right-hand sides.</S>
    <S sid="76" ssid="8">This can be easily achieved from a starting grammar by creating a nonterminal Aa for each terminal a &#8712; T, a corresponding rank-0 production pa = Aa &#8594; [a](), and then changing each occurrence of a in the characteristic string of a production to the single variable associated with the fan-out 1 nonterminal Aa.</S>
    <S sid="77" ssid="9">With this, our initial item set for a string a1 &#183; &#183; &#183; an will be and each production p = A0 &#8594; f(A1,..., Am) of G (excluding the ones we created for the terminals) will produce a deduction step of the form given in Figure 2a, where the indexes are subject to the following constraints, imposed by the semantics of f. The time complexity of parsing LCFRS with respect to the length of the input can be analyzed by counting the maximum number of indexes that can appear in an instance of the inference rule above.</S>
    <S sid="78" ssid="10">Although the total number of indexes is Emi= 2 &#183; &#981;(Ai), some of 0 these indexes are equated by the constraints.</S>
    <S sid="79" ssid="11">To count the number of independent indexes, consider all the indexes of the form l0,i (corresponding to the left endpoints of each component of the characteristic string of f) and those of the form rj,k for j &gt; 0 (corresponding to the right endpoints of each variable in the characteristic string).</S>
    <S sid="80" ssid="12">By the constraints above, these indexes are mutually independent, and it is easy to check that any other index is equated to one of these: indexes r0,i are equated to the index rj,k corresponding to the last variable xj,k of the ith component of the characteristic string, or to l0,i if there is no such variable; while indexes lj,k with j &gt; 0 are equated to an index l0,i if the variable xj,k is at the beginning of a component of the characteristic string, or to an index rj0,k0(j' &gt; 1) if the variable xj,k follows another variable xj0,k0.</S>
    <S sid="81" ssid="13">Thus, the parsing complexity (Gildea, 2010) of a production p = A0 &#8594; f(A1, ... , Am) is determined by &#981;(A0) l-indexes and i&#8712;[m]&#981;(Ai) r-indexes, for a total complexity of where |w |is the length of the input string.</S>
    <S sid="82" ssid="14">The parsing complexity of an LCFRS will correspond to the maximum parsing complexity among its productions.</S>
    <S sid="83" ssid="15">Note that this general complexity matches the result given by Seki et al. (1991).</S>
    <S sid="84" ssid="16">In an LCFRS of rank &#961; and fan-out &#981;, the maximum possible parsing complexity is O(|w|&#981;(&#961;+1)), obtained by applying the above expression to a production of rank &#961; and where each nonterminal has fanout &#981;.</S>
    <S sid="85" ssid="17">The asymptotic time complexity of LCFRS parsing is therefore exponential both in its rank and its fan-out.</S>
    <S sid="86" ssid="18">This means that it is interesting to transform LCFRS into equivalent forms that reduce their rank while preserving the fan-out.</S>
    <S sid="87" ssid="19">For sets of LCFRS that can be transformed into a binary form (i.e., such that all its rules have rank at most 2), the &#961; factor in the complexity is reduced to a constant, and complexity is improved to O(|w|3&#981;) (see G&#243;mez-Rodr&#237;guez et al. (2009) for further discussion).</S>
    <S sid="88" ssid="20">Unfortunately, it is known by previous results (Rambow and Satta, 1999) that it is not always possible to convert an LCFRS into such a binary form without increasing the fan-out.</S>
    <S sid="89" ssid="21">However, we will show that it is always possible to build such a binarization for well-nested LCFRS.</S>
    <S sid="90" ssid="22">Combining this result with the inference rule and complexity analysis given above, we would obtain a parser for well-nested LCFRS running in O(|w|3&#981;) time.</S>
    <S sid="91" ssid="23">But the construction of our binary normal form additionally restricts binary composition operations in the binarized LCFRS to be of two specific forms, concatenation and wrapping, which further improves the parsing complexity to O(|w|2&#981;+2), as we will see below.</S>
    <S sid="92" ssid="24">A composition operation is called a concatenation operation, if its characteristic string has the form x1,1 $ &#183;&#183;&#183; $ x1,m x2,1 $ &#183;&#183;&#183; $ x2,n , where m, n &#8805; 1.</S>
    <S sid="93" ssid="25">Intuitively, such an operation corresponds to the bottom-up combination of two adjacent discontinuous constituents into one.</S>
    <S sid="94" ssid="26">An example of a concatenation operation is the binary parsing rule used by the standard CKY parser for context-free grammars, which combines continuous constituents (represented as 1-tuples of strings in the LCFRS notation).</S>
    <S sid="95" ssid="27">In the general case, a concatenation operation will take an m-tuple and an n-tuple and return an (m + n &#8722; 1)-tuple, as the joined constituents may have gaps that will also appear in the resulting tuple.</S>
    <S sid="96" ssid="28">If we apply the general parsing rule given in Figure 2a to a production A &#8594; conc(B, C), where conc is a concatenation operation, then we obtain the deduction step given in Figure 2b.</S>
    <S sid="97" ssid="29">This step uses 2m different l- and r-indexes, and 2n &#8722; 1 different l0and r0-indexes (excluding l01 which must equal rm), for a total of 2m+2n&#8722;1 = 2(m+n&#8722;1)+1 indexes.</S>
    <S sid="98" ssid="30">Since m + n &#8722; 1 is the fan-out of the nonterminal A, we conclude that the maximum number of indexes in the step associated with a concatenation operation in an LCFRS of fan-out &#981; is 2&#981; + 1.</S>
    <S sid="99" ssid="31">A linear, non-erasing function is called a wrapping operation, if its characteristic string has the form where m, n &gt; 1 and i E [m &#8722;1].</S>
    <S sid="100" ssid="32">Intuitively, such an operation wraps the tuple derived from a nonterminal B around the tuple derived from a nonterminal C, filling the ith gap in the former.</S>
    <S sid="101" ssid="33">An example of a wrapping operation is the adjunction of an auxiliary tree in tree-adjoining grammar.</S>
    <S sid="102" ssid="34">In the general case, a wrapping operation will take an m-tuple and an n-tuple and return an (m + n &#8722; 2)-tuple of strings: the gaps of the argument tuples appear in the obtained tuple, except for one gap in the tuple derived from B which is filled by the tuple derived from C. By applying the general parsing rule in Figure 2a to a production A &#8212;* wrapi(B, C), where wrapi is a wrapping operation, then we obtain the deduction step given in Figure 2c.</S>
    <S sid="103" ssid="35">This step uses 2m different land r-indexes, and 2n &#8722; 2 different l0- and r0-indexes (discounting l01 and r0n which are equal to other indexes), for a total of 2m+2n&#8722;2 = 2(m+n&#8722;2)+2 indexes.</S>
    <S sid="104" ssid="36">Since the fan-out of A is m + n &#8722; 2, this means that a wrapping operation needs at most 2cp+2 indexes for an LCFRS of fan-out cp.</S>
    <S sid="105" ssid="37">From this, we conclude that an LCFRS of fanout cp in which all composition operations are either concatenation operations, wrapping operations, or operations of rank 0 or 1, can be parsed in time O(|w|2&#981;+2).</S>
    <S sid="106" ssid="38">In particular, nullary and unary composition operations do not affect this worst-case complexity, since their associated deduction steps can never have more than 2cp indexes.</S>
  </SECTION>
  <SECTION title="4 Transformation" number="4">
    <S sid="107" ssid="1">We now show how to transform a well-nested LCFRS into the normal form that we have just described.</S>
    <S sid="108" ssid="2">Consider a production p = A &#8212;* f(A1,..., Am), where m &gt; 2 and f is neither a concatenation nor a wrapping operation.</S>
    <S sid="109" ssid="3">We will construct new productions p0, q, r such that every derivation that uses p can be rewritten into a derivation that uses the new productions, and the new productions do not license any other derivations.</S>
    <S sid="110" ssid="4">Formally, this can be understood as implementing a tree transformation, where the input trees are derivations of the original grammar, and the output trees are derivations of the new grammar.</S>
    <S sid="111" ssid="5">The situation is illustrated in Figure 3.</S>
    <S sid="112" ssid="6">The tree on top represents a derivation in the original grammar; this derivation starts with the rewriting of the nonterminal A using the production p, and continues with the subderivations t1, ... , tm.</S>
    <S sid="113" ssid="7">The tree at the bottom represents a derivation in the transformed grammar.</S>
    <S sid="114" ssid="8">This derivation starts with the rewriting of A using the new production p0, and continues with two independent subderivations that start with the new productions q and r, respectively.</S>
    <S sid="115" ssid="9">The sub-derivations t1, ... , tm have been partitioned into two sequences t1,1, ... ,t1,m1 and t2,1, ... ,t2,m2 .</S>
    <S sid="116" ssid="10">The new production p0 will be either a concatenation or a wrapping operation, and the rank of both q and r will be strictly smaller than the rank of p. The transformation will continue with q and r, unless these have rank one.</S>
    <S sid="117" ssid="11">By applying this strategy exhaustively, we will thus eventually end up with a grammar that only has productions with rank at most 2, and in which all productions with rank 2 are either concatenation or wrapping operations.</S>
    <S sid="118" ssid="12">To transform the production p, we first factorize the composition operation f associated with p into three new composition operations f0, g, h as follows.</S>
    <S sid="119" ssid="13">Recall that we represent composition operations by their characteristic strings.</S>
    <S sid="120" ssid="14">In the following, we will assume that no characteristic string starts or ends with a gap marker, or contains immediate repetitions of gap markers.</S>
    <S sid="121" ssid="15">This property can be ensured, without affecting the asymptotic complexity, by adding intermediate steps to the transformation that we report here; we omit the details due to space reasons.</S>
    <S sid="122" ssid="16">When this property holds, we are left with the following two cases.</S>
    <S sid="123" ssid="17">Let us call a sequence of variables joint, if it contains all and only variables associated with a given nonterminal.</S>
    <S sid="124" ssid="18">Case 1 f = x1 f1 x2 &#183;&#183;&#183; xk&#8722;1 fk&#8722;1 xk f* , where k &gt; 1, x1, ... , xk are joint variables, and the suffix f* contains at least one variable.</S>
    <S sid="125" ssid="19">Let let h = f*, and let f' = conc.</S>
    <S sid="126" ssid="20">As f is well-nested, both g and h define well-nested composition operations.</S>
    <S sid="127" ssid="21">By the specific segmentation of f, the ranks of these operations are strictly smaller than the rank of f. Furthermore, we have &#981;(f) = &#981;(g) + &#981;(h) &#8212; 1.</S>
    <S sid="128" ssid="22">Case 2 f = x1 f1 x2 &#183; &#183; &#183; xk&#8722;1 fk&#8722;1 xk , where k &gt; 2, x1, ... , xk are joint variables, and there exist at least one i such that the sequence fi contains at least one variable.</S>
    <S sid="129" ssid="23">Choose an index j as follows: if there is at least one i such that fi contains at least one variable and one gap marker, let j be the minimal such i; otherwise, let j be the minimal i such that fi contains at least one variable.</S>
    <S sid="130" ssid="24">Now, let let h = fj, and let f' = wrapj.</S>
    <S sid="131" ssid="25">As in Case 1, both g and h define well-nested composition operations whose ranks are strictly smaller than the rank of f. Furthermore, we have &#981;(f) = &#981;(g) + &#981;(h) &#8212; 2.</S>
    <S sid="132" ssid="26">Note that at most one of the two cases can apply to f. Furthermore, since f is well-nested, it is also true that at least one of the two cases applies.</S>
    <S sid="133" ssid="27">This is so because for two distinct nonterminals Ai, AiA, either all variables associated with AiA precede the leftmost variable associated with Ai, succeed the rightmost variable associated with Ai, or are placed between two variables associated with Ai without another variable associated with Ai intervening.</S>
    <S sid="134" ssid="28">(Here, we have left out the symmetric cases.)</S>
    <S sid="135" ssid="29">Based on the composition operations, we now construct three new productions p', q, r as follows.</S>
    <S sid="136" ssid="30">Let B and C be two fresh nonterminals with &#981;(B) = &#981;(g) and &#981;(C) = &#981;(h), and let p' = A &#8212; f'(B, C).</S>
    <S sid="137" ssid="31">The production p' rewrites A into B and C and combines the two subderivations that originate at these nonterminals using either a concatenation or a wrapping operation.</S>
    <S sid="138" ssid="32">Now, let Aq,1, ... , Aq,m9 and Ar,1, .</S>
    <S sid="139" ssid="33">.</S>
    <S sid="140" ssid="34">.</S>
    <S sid="141" ssid="35">, Ar,m,. be the sequences of nonterminals that are obtained from the sequence A1, ... , Am by deleting those nonterminals that are not associated with any variable in g or h, respectively.</S>
    <S sid="142" ssid="36">Then, let We now illustrate the transformation using the concrete production p = A &#8212; f(A1, A2, A3), where Note that this operation has rank 3 and fan-out 3.</S>
    <S sid="143" ssid="37">The composition operations are constructed as follows.</S>
    <S sid="144" ssid="38">The operation f matches the pattern of Case 1, and hence induces the operations where B1 and C1 are fresh nonterminals with fanout 2.</S>
    <S sid="145" ssid="39">The production r1 has rank one, so it does not require any further transformations.</S>
    <S sid="146" ssid="40">The transformation thus continues with q1.</S>
    <S sid="147" ssid="41">The operation g1 matches the pattern of Case 2, and induces the operations g2 = x1,1 $ x1,2 , h2 = x2,1$, f'2 = wrap1 .</S>
    <S sid="148" ssid="42">The productions constructed from these are where B2 and C2 are fresh nonterminals with fanout 2.</S>
    <S sid="149" ssid="43">At this point, the transformation terminates.</S>
    <S sid="150" ssid="44">We can now delete p from the original grammar, and replace it with the productions {p'1, r1, p'2, q2, r2}.</S>
    <S sid="151" ssid="45">To see that the transformation is correct, we need to verify that each production of the original grammar is transformed into a set of equivalent normal-form productions, and that the fan-out of the new grammar does not exceed the fan-out of the old grammar.</S>
    <S sid="152" ssid="46">For the first point, we note that the transformation preserves well-nestedness, decreases the rank of a production, and is always applicable as long as the rank of a production is at most 2 and the production does not use a concatenation or wrapping operation.</S>
    <S sid="153" ssid="47">That the new productions are equivalent to the old ones in the sense of Figure 3 can be proved by induction on the length of a derivation in the original and the new grammar, respectively.</S>
    <S sid="154" ssid="48">Let us now convince ourselves that the fan-out of the new grammar does not exceed the fan-out of the old grammar.</S>
    <S sid="155" ssid="49">This is clear in Case 1, where implies that both cp(g) &#8804; cp(f) and cp(h) &#8804; cp(f).</S>
    <S sid="156" ssid="50">For Case 2, we reason as follows.</S>
    <S sid="157" ssid="51">The fan-out of the operation h, being constructed from an infix of the characteristic string of the original operation f, is clearly bounded by the fan-out of f. For g, we have Now suppose that the index j was chosen according to the first alternative.</S>
    <S sid="158" ssid="52">In this case, cp(h) &#8805; 2, and For the case where j was chosen according to the second alternative, cp(f) &lt; k (since there are no immediate repetitions of gap markers), cp(h) = 1, and cp(g) &#8804; k. If we assume that each nonterminal is productive, then this means that the underlying LCFRS has at least one production with fan-out k or more; therefore, the fan-out of g does not increase the fan-out of the original grammar.</S>
    <S sid="159" ssid="53">To conclude, we now briefly discuss the space complexity of the normal-form transformation.</S>
    <S sid="160" ssid="54">We measure it in terms of the length of a production, defined as the length of its string representation, that is, the string A &#8594; [v1 $ &#183;&#183;&#183; $ vk](A1, ... , Am) .</S>
    <S sid="161" ssid="55">Looking at Figure 3, we note that the normal-form transformation of a production p can be understood as the construction of a (not necessarily complete) binary-branching tree whose leaves correspond to the productions obtained by splitting the characteristic string of p and whose non-leaf nodes are labeled with concatenation and wrapping operations.</S>
    <S sid="162" ssid="56">By construction, the sum of the lengths of leaf-node productions is O(|p|).</S>
    <S sid="163" ssid="57">Since the number of inner nodes of a binary tree with n leaves is bounded by n &#8722; 1, we know that the tree has O(p(p)) inner nodes.</S>
    <S sid="164" ssid="58">As these nodes correspond to concatenation and wrapping operations, each inner-node production has length O(cp(p)).</S>
    <S sid="165" ssid="59">Thus, the sum of the lengths of the productions created from |p |is O(|p |+ p(p)cp(p)).</S>
    <S sid="166" ssid="60">Since the rank of a production is always smaller than its length, this is reduced to O(|p|cp(p)).</S>
    <S sid="167" ssid="61">Therefore, the size of the normal-form transformation of an LCFRS G of fan-out cp is O(cp|G|) in the worst case, and linear space in practice, since the fan-out is typically bounded by a small integer.</S>
    <S sid="168" ssid="62">Taking the normal-form transformation into account, our parser therefore runs in time O(cp &#183; |G |&#183; |w|2cp+2) where |G |is the original grammar size.</S>
  </SECTION>
  <SECTION title="5 Conclusion" number="5">
    <S sid="169" ssid="1">In this paper, we have presented an efficient parsing algorithm for well-nested linear context-free rewriting systems, based on a new normal form for this formalism.</S>
    <S sid="170" ssid="2">The normal form takes up linear space with respect to grammar size, and the algorithm is based on a bottom-up process that can be applied to any LCFRS, achieving O(cp &#183; |G |&#183; |w|2cp+2) time complexity when applied to LCFRS of fan-out cp in our normal form.</S>
    <S sid="171" ssid="3">This complexity is an asymptotic improvement over existing results for this class, both from parsers specifically geared to well-nested LCFRS or equivalent formalisms (Hotz and Pitsch, 1996) and from applying general LCFRS parsing techniques to the well-nested case (Seki et al., 1991).</S>
    <S sid="172" ssid="4">The class of well-nested LCFRS is an interesting syntactic formalism for languages with discontinuous constituents, providing a good balance between coverage of linguistic phenomena in natural language treebanks (Kuhlmann and Nivre, 2006; Maier and Lichte, 2009) and desirable formal properties (Kanazawa, 2009).</S>
    <S sid="173" ssid="5">Our results offer a further argument in support of well-nested LCFRS: while the complexity of parsing general LCFRS depends on two dimensions (rank and fan-out), this bidimensional hierarchy collapses into a single dimension in the well-nested case, where complexity is only conditioned by the fan-out.</S>
    <S sid="174" ssid="6">Acknowledgments G&#243;mez-Rodr&#237;guez has been supported by MEC/FEDER (HUM2007-66607-C04) and Xunta de Galicia (PGIDIT07SIN005206PR, Redes Galegas de PL e RI e de Ling. de Corpus, Bolsas Estad&#237;as INCITE/FSE cofinanced).</S>
    <S sid="175" ssid="7">Kuhlmann has been supported by the Swedish Research Council.</S>
  </SECTION>
</PAPER>
