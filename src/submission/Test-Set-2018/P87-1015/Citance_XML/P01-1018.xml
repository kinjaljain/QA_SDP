<PAPER>
  <S sid="0">Constraints On Strong Generative Power</S>
  <ABSTRACT>
    <S sid="1" ssid="1">We consider the question &#8220;How much strong generative power can be squeezed out of a formal system without increasing its weak generative power?&#8221; and propose some theoretical and practical constraints on this problem.</S>
    <S sid="2" ssid="2">We then introduce a formalism which, under these constraints, maximally squeezes strong generative power out of context-free grammar.</S>
    <S sid="3" ssid="3">Finally, we generalize this result to formalisms beyond CFG.</S>
  </ABSTRACT>
  <SECTION title="1 Introduction" number="1">
    <S sid="4" ssid="1">&#8220;How much strong generative power can be squeezed out of a formal system without increasing its weak generative power?&#8221; This question, posed by Joshi (2000), is important for both linguistic description and natural language processing.</S>
    <S sid="5" ssid="2">The extension of tree adjoining grammar (TAG) to tree-local multicomponent TAG (Joshi, 1987), or the extension of context free grammar (CFG) to tree insertion grammar (Schabes and Waters, 1993) or regular form TAG (Rogers, 1994) can be seen as steps toward answering this question.</S>
    <S sid="6" ssid="3">But this question is difficult to answer with much finality unless we pin its terms down more precisely.</S>
    <S sid="7" ssid="4">First, what is meant by strong generative power?</S>
    <S sid="8" ssid="5">In the standard definition (Chomsky, 1965) a grammar G weakly generates a set of sentences L(G) and strongly generates a set of structural descriptions E(G); the strong generative capacity of a formalism Fis then {E(G) | F provides G}.</S>
    <S sid="9" ssid="6">There is some vagueness in the literature, however, over what structural descriptions are and how they can reasonably be compared across theories (Miller (1999) gives a good synopsis).</S>
    <S sid="10" ssid="7">The approach that Vijay-Shanker et al. (1987) and Weir (1988) take, elaborated on by Becker et al.</S>
    <S sid="11" ssid="8">(1992), is to identify a very general class of formalisms, which they call linear contextfree rewriting systems (CFRSs), and define for this class a large space of structural descriptions which serves as a common ground in which the strong generative capacities of these formalisms can be compared.</S>
    <S sid="12" ssid="9">Similarly, if we want to talk about squeezing strong generative power out of a formal system, we need to do so in the context of some larger space of structural descriptions.</S>
    <S sid="13" ssid="10">Second, why is preservation of weak generative power important?</S>
    <S sid="14" ssid="11">If we interpret this constraint to the letter, it is almost vacuous.</S>
    <S sid="15" ssid="12">For example, the class of all tree adjoining grammars which generate context-free languages includes the grammar shown in Figure 1a (which generates the language {a, b}*).</S>
    <S sid="16" ssid="13">We can also add the tree shown in Figure 1b without increasing the grammar&#8217;s weak generative capacity; indeed, we can add any trees we please, provided they yield only as and bs.</S>
    <S sid="17" ssid="14">Intuitively, the constraint of weak context-freeness has little force.</S>
    <S sid="18" ssid="15">This intuition is verified if we consider that weak context-freeness is desirable for computational efficiency.</S>
    <S sid="19" ssid="16">Though a weakly context-free TAG might be recognizable in cubic time (if we know the equivalent CFG), it need not be parsable in cubic time&#8212;that is, given a string, to compute all its possible structural descriptions will take O(n6) time in general.</S>
    <S sid="20" ssid="17">If we are interested in computing structural descriptions from strings, then we need a tighter constraint than preservation of weak generative power.</S>
    <S sid="21" ssid="18">In Section 3 below we examine some restrictions on tree adjoining grammar which are weakly context-free, and observe that their parsers all work in the same way: though given a TAG G, they implicitly parse using a CFG G' which derives the same strings as G, but also their corresponding structural descriptions under G, in such a way that preserves the dynamic-programming structure of the parsing algorithm.</S>
    <S sid="22" ssid="19">Based on this observation, we replace the constraint of preservation of weak generative power with a constraint of simulability: essentially, a grammar G' simulates another grammar G if it generates the same strings that G does, as well as their corresponding structural descriptions under G (see Figure 2).</S>
    <S sid="23" ssid="20">So then, within the class of context-free rewriting systems, how does this constraint of simulability limit strong generative power?</S>
    <S sid="24" ssid="21">In Section 4.1 we define a formalism called multicomponent multifoot TAG (MMTAG) which, when restricted to a regular form, characterizes precisely those CFRSs which are simulable by a CFG.</S>
    <S sid="25" ssid="22">Thus, in the sense we have set forth, this formalism can be said to squeeze as much strong generative power out of CFG as is possible.</S>
    <S sid="26" ssid="23">Finally, we generalize this result to formalisms beyond CFG.</S>
  </SECTION>
  <SECTION title="2 Characterizing structural descriptions" number="2">
    <S sid="27" ssid="1">First we define context-free rewriting systems.</S>
    <S sid="28" ssid="2">What these formalisms have in common is that their derivation sets are all local sets (that is, generable by a CFG).</S>
    <S sid="29" ssid="3">These derivations are taken as structural descriptions.</S>
    <S sid="30" ssid="4">The following definitions are adapted from Weir (1988).</S>
    <S sid="31" ssid="5">Definition 1 A generalized context-free grammar G is a tuple (V, S, F, P), where 4.</S>
    <S sid="32" ssid="6">P is a finite set of productions of the form A &#8212;&#65533; f(A1, ..., An) where n &gt;_ 0, f E F, and A, Ai E V. A generalized CFG G generates a set T(G) of terms, which are interpreted as derivations under some formalism.</S>
    <S sid="33" ssid="7">In this paper we require that G be free of spurious ambiguity, that is, that each term be uniquely generated.</S>
    <S sid="34" ssid="8">Definition 2 We say that a formalism 9-is a context-free rewriting system (CFRS) if its derivation sets can be characterized by generalized CFGs, and its derived structures are produced by a function ~+, from terms to strings such that for each function symbol f, there is a yield function f9- such that (A linear CFRS is subject to further restrictions, which we do not make use of.)</S>
    <S sid="35" ssid="9">As an example, Figure 3 shows a simple TAG with a corresponding GCFG and interpretation.</S>
    <S sid="36" ssid="10">A nice property of CFRS is that any formalism which can be defined as a CFRS immediately lends itself to several extensions, which arise when we give additional interpretations to the function symbols.</S>
    <S sid="37" ssid="11">For example, we can interpret the functions as ranging over probabilities, creating a stochastic grammar; or we can interpret them as yield functions of another grammar, creating a synchronous grammar.</S>
    <S sid="38" ssid="12">Now we define strong generative capacity as the relationship between strings and structural descriptions.1 Definition 3 The strong generative capacity of a grammar G a CFRS Fis the relation For example, the strong generative capacity of the grammar of Figure 3 is {hambncndm, &#945;(&#946;m 1 (&#65533;()), &#946;n 2(~()))i} whereas any equivalent CFG must have a strong generative capacity of the form {hambncndm, fm(gn(e()))i} That is, in a CFG the n bs and cs must appear later in the derivation than the m as and ds, whereas in our example they appear in parallel.</S>
  </SECTION>
  <SECTION title="3 Simulating structural descriptions" number="3">
    <S sid="39" ssid="1">We now take a closer look at some examples of &#8220;squeezed&#8221; context-free formalisms to illustrate how a CFG can be used to simulate formalisms with greater strong generative power than CFG.</S>
    <S sid="40" ssid="2">Tree substitution grammar (TSG), tree insertion grammar (TIG), and regular-form TAG (RF-TAG) are all weakly context free formalisms which can additionally be parsed in cubic time (with a caveat for RF-TAG below).</S>
    <S sid="41" ssid="3">For each of these formalisms a CKY-style parser can be written whose items are of the form [X, i, j] and are combined in various ways, but always according to the schema [X, i, j] [Y, j, k] [Z, i, k] just as in the CKY parser for CFG.</S>
    <S sid="42" ssid="4">In effect the parser dynamically converts the TSG, TIG, or RFTAG into an equivalent CFG&#8212;each parser rule of the above form corresponds to the rule schema Z &#8594; XY.</S>
    <S sid="43" ssid="5">More importantly, given a grammar G and a string w, a parser can reconstruct all possible derivations of w under G by storing inside each chart item how that item was inferred.</S>
    <S sid="44" ssid="6">If we think of the parser as dynamically converting G into a CFG G0, then this CFG is likewise able to compositionally reconstruct TSG, TIG, or RF-TAG derivations&#8212;we say that G0 simulates G. Note that the parser specifies how to convert G into G0, but G0 is not itself a parser.</S>
    <S sid="45" ssid="7">Thus these three formalisms have a special relationship to CFG that is independent of any particular parsing algorithm: for any TSG, TIG, or RF-TAG G, there is a CFG that simulates G. We make this notion more precise below.</S>
    <S sid="46" ssid="8">Strictly speaking, the recognition algorithm Rogers gives cannot be extended to parsing; that is, it generates all possible derived trees for a given string, but not all possible derivations.</S>
    <S sid="47" ssid="9">It is correct, however, as a parser for a further restricted subclass of TAGs: Definition 4 We say that a TAG is in strict regular form if there exists some partial ordering &lt; over the nonterminal alphabet such that for every auxiliary tree &#946;, if the root and foot of &#946; are labeled X, then for every node &#951; along &#946;&#8217;s spine where adjunction is allowed, X &lt; label(&#951;), and X = label(&#951;) only if &#951; is a foot node.</S>
    <S sid="48" ssid="10">(In this variant adjunction at foot nodes is permitted.)</S>
    <S sid="49" ssid="11">Thus the only kinds of adjunction which can occur to unbounded depth are off-spine adjunction and adjunction at foot nodes.</S>
    <S sid="50" ssid="12">This stricter definition still has greater strong generative capacity than CFG.</S>
    <S sid="51" ssid="13">For example, the TAG in Figure 3 is in strict regular form, because the only nodes along spines where adjunction is allowed are foot nodes.</S>
    <S sid="52" ssid="14">So far we have not placed any restrictions on how these structural descriptions are computed.</S>
    <S sid="53" ssid="15">Even though we might imagine attaching arbitrary functions to the rules of a parser, an algorithm like CKY is only really capable of computing values of bounded size, or else structuresharing in the chart will be lost, increasing the complexity of the algorithm possibly to exponential complexity.</S>
    <S sid="54" ssid="16">For a parser to compute arbitrary-sized objects, such as the derivations themselves, it must use back-pointers, references to the values of subcomputations but not the values themselves.</S>
    <S sid="55" ssid="17">The only functions on a back-pointer the parser can compute online are the identity function (by copying the back-pointer) and constant functions (by replacing the back-pointer); any other function would have to dereference the back-pointer and destroy the structure of the algorithm.</S>
    <S sid="56" ssid="18">Therefore such functions must be computed offline.</S>
    <S sid="57" ssid="19">Definition 5 A simulating interpretation ~&#183;&#8226; is a bijection between two recognizable sets of terms such that 1.</S>
    <S sid="58" ssid="20">For each function symbol &#966;, there is a function &#966;&#175; such that where each wi can take one of the following forms: We say that [&#183;] is trivial if every &#966;&#175; is definable as &#175; &#966;(x1,... xn) = f(x&#960;(1),... x&#960;(n)) where &#960; is a permutation of {1, ... , n}.2 The rationale for requirement (3) is that it should not be possible, simply by imposing local constraints on the simulating grammar, to produce a simulated grammar which does not even come from a CFRS.3 Definition 6 We say that a grammar G from a CFRS Fis (trivially) simulable by a grammar G&#8217; from another CFRS F if there is a (trivial) simulating interpretation [&#183;]s : T(G0) &#8594; T(G) which satisfies [t]F0 = [[t]s]F for all t &#8712; T(G0).</S>
    <S sid="59" ssid="21">As an example, a CFG which simulates the TAG of Figure 3 is shown in Figure 4.</S>
    <S sid="60" ssid="22">Note that if we give additional interpretations to the simulated yield functions &#945;, &#946;1, and &#946;2, this CFG can compute any probabilities, translations, etc., that the original TAG can.</S>
    <S sid="61" ssid="23">Note that if G0 trivially simulates G, they are very nearly strongly equivalent, except that the yield functions of G0 might take their arguments in a different order than G, and there might be several yield functions of G0 which correspond to a single yield function of G used in several different contexts.</S>
    <S sid="62" ssid="24">In fact, for technical reasons we will use this notion instead of strong equivalence for testing the strong generative power of a formal system.</S>
    <S sid="63" ssid="25">Thus the original problem, which was, given a formalism F , to find a formalism that has as much strong generative power as possible but remains weakly equivalent to F , is now recast as the following problem: find a formalism that trivially simulates as many grammars as possible but remains simulable by F .</S>
  </SECTION>
  <SECTION title="3.4 Results" number="4">
    <S sid="64" ssid="1">The following is easy to show: Proposition 1 Simulability is reflexive and transitive.</S>
    <S sid="65" ssid="2">Because of transitivity, it is impossible that a formalism which is simulable by F could simulate a grammar that is not simulable by F .</S>
    <S sid="66" ssid="3">So we are looking for a formalism that can trivially simulate exactly those grammars that F can.</S>
    <S sid="67" ssid="4">In Section 4.1 we define a formalism called multicomponent multifoot TAG (MMTAG), and then in Section 4.2 we prove the following result: Proposition 2 A grammar G from a CFRS is simulable by a CFG if and only if it is trivially simulable by an MMTAG in regular form.</S>
    <S sid="68" ssid="5">The &#8220;if&#8221; direction (&#8656;) implies (because simulability is reflexive) that RF-MMTAG is simulable by a CFG, and therefore cubic-time parsable.</S>
    <S sid="69" ssid="6">(The proof below does give an effective procedure for constructing a simulating CFG for any RF-MMTAG.)</S>
    <S sid="70" ssid="7">The &#8220;only if&#8221; direction (&#8658;) shows that, in the sense we have defined, RF-MMTAG is the most powerful such formalism.</S>
    <S sid="71" ssid="8">We can generalize this result using the notion of a meta-level grammar (Dras, 1999). f1 is the meta-level formalism, which generates derivations for f2.</S>
    <S sid="72" ssid="9">Obviously f1 must be a treerewriting system.</S>
    <S sid="73" ssid="10">Proposition 3 For any CFRS f', a grammar G from a (possibly different) CFRS is simulable by a grammar in f' if and only if it is trivially simulable by a grammar in f' o RF-MMTAG.</S>
    <S sid="74" ssid="11">The &#8220;only if' direction (=&gt;) follows from the fact that the MMTAG constructed in the proof of Proposition 2 generates the same derived trees as the CFG.</S>
    <S sid="75" ssid="12">The &#8220;if' direction (,t=) is a little trickier because the constructed CFG inserts and relabels nodes.</S>
  </SECTION>
  <SECTION title="4 Multicomponent multifoot TAG" number="5">
    <S sid="76" ssid="1">MMTAG resembles a cross between set-local multicomponent TAG (Joshi, 1987) and ranked node rewriting grammar (Abe, 1988), a variant of TAG in which auxiliary trees may have multiple foot nodes.</S>
    <S sid="77" ssid="2">It also has much in common with dtree substitution grammar (Rambow et al., 1995).</S>
    <S sid="78" ssid="3">Definition 8 An elementary tree set &#945;l is a finite set of trees (called the components of l&#945;) with the following properties: A multicomponent multifoot tree adjoining grammar is a tuple (E, P, S), where: Definition 9 A component &#945; is adjoinable at a node rl if rl is an adjunction node and the type of &#945; equals the label of rl.</S>
    <S sid="79" ssid="4">The result of adjoining a component &#945; at a node rl is the tree set formed by separating rl from its children, replacing rl with the root of &#945;, and replacing the ith foot node of &#945; with the ith child of rl.</S>
    <S sid="80" ssid="5">(Thus adjunction of a one-foot component is analogous to TAG adjunction, and adjunction of a zero-foot component is analogous to substitution.)</S>
    <S sid="81" ssid="6">A tree set &#945;l is adjoinable at an adjunction site rll if there is a way to adjoin each component of &#945;l at a different node of rll (with no nodes left over) such that the dominance and precedence relations within &#945;l are preserved.</S>
    <S sid="82" ssid="7">(See Figure 5 for an example.)</S>
    <S sid="83" ssid="8">We now define a regular form for MMTAG that is analogous to strict regular form for TAG.</S>
    <S sid="84" ssid="9">A spine is the path from the root to a foot of a single component.</S>
    <S sid="85" ssid="10">Whenever adjunction takes place, several spines are inserted inside or concatenated with other spines.</S>
    <S sid="86" ssid="11">To ensure that unbounded insertion does not take place, we impose an ordering on spines, by means of functions pi that map the type of a component to the rank of that component&#8217;s ith spine.</S>
    <S sid="87" ssid="12">Definition 10 We say that an adjunction node rl E rll is safe in a spine if it is the lowest node (except the foot) in that spine, and if each component under that spine consists only of a member of rll and zero or more foot nodes.</S>
    <S sid="88" ssid="13">We say that an MMTAG G is in regular form if there are functions &#961;i from E into the domain of some partial ordering &lt; such that for each component &#945; of type X, for each adjunction node &#951; &#8712; &#945;, if the jth child of &#951; dominates the ith foot node of &#945; (that is, another component&#8217;s jth spine would adjoin into the ith spine), then &#961;i(X) &lt; &#961;j(label(&#951;)), and &#961;i(X) = &#961;j(label(&#951;)) only if &#951; is safe in the ith spine.</S>
    <S sid="89" ssid="14">Thus the only kinds of adjunction which can occur to unbounded depth are off-spine adjunction and safe adjunction.</S>
    <S sid="90" ssid="15">The adjunction shown in Figure 5 is an example of safe adjunction.</S>
    <S sid="91" ssid="16">(&#8656;) First we describe how to construct a simulating CFG for any RF-MMTAG; then this direction of the proof follows from the transitivity of simulability.</S>
    <S sid="92" ssid="17">When a CFG simulates a regular form TAG, each nonterminal must encapsulate a stack (of bounded depth) to keep track of adjunctions.</S>
    <S sid="93" ssid="18">In the multicomponent case, these stacks must be generalized to trees (again, of bounded size).</S>
    <S sid="94" ssid="19">So the nonterminals of G0 are of the form [&#951;, t], where t is a derivation fragment of G with a dot (&#183;) at exactly one node ~&#945;, and &#951; is a node of ~&#945;.</S>
    <S sid="95" ssid="20">Let &#951;&#175; be the node in the derived tree where &#951; ends up.</S>
    <S sid="96" ssid="21">A fragment t can be put into a normal form as follows: path which name the same tree set and &#951;&#175; lies along the same spine or same d-edge in both of them, collapse ~&#945;1 and ~&#945;2, deleting everything in between.</S>
    <S sid="97" ssid="22">Basically this process removes all unboundedly long paths, so that the set of normal forms is finite.</S>
    <S sid="98" ssid="23">In the rule schemata below, the terms in the lefthand sides range over normalized terms, and their corresponding right-hand sides are renormalized.</S>
    <S sid="99" ssid="24">Let up(t) denote the tree that results from moving the dot in t up one step.</S>
    <S sid="100" ssid="25">The value of a subderivation t0 of G0 under ~&#183;&#8226;s is a tuple of partial derivations of G, one for each &gt; symbol in the root label of t0, in order.</S>
    <S sid="101" ssid="26">Where we do not define a yield function for a production below, the identity function is understood.</S>
    <S sid="102" ssid="27">For every set &#945;~ with a single, S-type component rooted by &#951;, add the rule For every non-adjunction, non-foot node &#951; with children &#951;1, ... ,&#951;n (n &#8805; 0), [&#951;, t] &#8594; [&#951;1, t] &#183;&#183;&#183; [&#951;n, t] For every component with root &#951;0 that is adjoinable at &#951;, [&#951;, up(t)] &#8594; [&#951;0, t] If &#951;0 is the root of the whole set ~&#945;0, this rule rewrites a &gt; to several &gt; symbols; the corresponding yield function is then h... , ~&#945;0(x1, ... , xn), ...i &#8592;&#65533; h... , x1, ... , xn, ...i For every component with ith foot &#951;0i that is adjoinable at a node with ith child &#951;i, This last rule skips over deleted parts of the derivation tree, but this is harmless in a regular form MMTAG, because all the skipped adjunctions are safe.</S>
    <S sid="103" ssid="28">(&#8658;) First we describe how to decompose any given derivation t0 of G0 into a set of elementary tree sets.</S>
    <S sid="104" ssid="29">Let t = ~t0&#8226;s.</S>
    <S sid="105" ssid="30">(Note the convention that primed variables always pertain to the simulating grammar, unprimed variables to the simulated grammar.)</S>
    <S sid="106" ssid="31">If, during the computation of t, a node &#951;0 creates the node &#951;, we say that &#951;0 is productive and produces &#951;.</S>
    <S sid="107" ssid="32">Without loss of generality, let us assume that there is a one-to-one correspondence between productive nodes and nodes of t.4 To start, let &#951; be the root of t, and &#951;1, ... , &#951;n its children.</S>
    <S sid="108" ssid="33">Define the domain of &#951;i as follows: any node in t0 that produces &#951;i or any of its descendants is in the domain of &#951;i, and any non-productive node whose parent is in the domain of &#951;i is also in the domain of &#951;i.</S>
    <S sid="109" ssid="34">For each &#951;i, excise each connected component of the domain of &#951;i.</S>
    <S sid="110" ssid="35">This operation is the reverse of adjunction (see Figure 6): each component gets mar of Figure 4, and first step of decomposition.</S>
    <S sid="111" ssid="36">Non-adjunction nodes are shown with the placeholder &#8226; (because the yield functions in the original grammar were anonymous), the Greek letters indicating what is produced by each node.</S>
    <S sid="112" ssid="37">Adjunction nodes are shown with labels Qi in place of the (very long) true labels.</S>
    <S sid="113" ssid="38">Figure 7: MMTAG converted from CFG of Figure 4 (cf. the original TAG in Figure 3).</S>
    <S sid="114" ssid="39">Each components&#8217; type is written to its left. foot nodes to replace its lost children, and the components are connected by d-edges according to their original configuration.</S>
    <S sid="115" ssid="40">Meanwhile an adjunction node is created in place of each component.</S>
    <S sid="116" ssid="41">This node is given a label (which also becomes the type of the excised component) whose job is to make sure the final grammar does not overgenerate; we describe how the label is chosen below.</S>
    <S sid="117" ssid="42">The adjunction nodes are partitioned such that the ith site contains all the adjunction nodes created when removing z7i.</S>
    <S sid="118" ssid="43">The tree set that is left behind is the elementary tree set corresponding to z7 (rather, the function symbol that labels z7); this process is repeated recursively on the children of z7, if any.</S>
    <S sid="119" ssid="44">Thus any derivation of G' can be decomposed into elementary tree sets.</S>
    <S sid="120" ssid="45">Let G&#710; be the union of the decompositions of all possible derivations of G' (see Figure 7 for an example).</S>
    <S sid="121" ssid="46">Labeling adjunction nodes For any node z7', and any list of nodes (z7'1, ... , z7'n), let the signature of z7' with respect to (z7'1, ... , z7'n) be (A, a1, ... , am), where A is the left-hand side of the GCFG production that generated z7', and ai = (j, k) if z7' gets its ith field from the kth field of z7'j, or * if z7' produces a function symbol in its ith field.</S>
    <S sid="122" ssid="47">So when we excise the domain of z7i, the label of the node left behind by a component &#945; is (s, s1, ... , sn), where s is the signature of the root of &#945; with respect to the foot nodes and s1, ... , sn are the signatures of the foot nodes with respect to their d-children.</S>
    <S sid="123" ssid="48">Note that the number of possible adjunction labels is finite, though large.</S>
    <S sid="124" ssid="49">G&#710; trivially simulates G. Since each tree of G&#710; corresponds to a function symbol (though not necessarily one-to-one), it is easy to write a trivial simulating interpretation Q&#183;1 : T( &#710;G) &#8594; T(G).</S>
    <S sid="125" ssid="50">To see that G&#710; does not overgenerate, observe that the nonterminal labels inside the signatures ensure that every derivation of G&#710; corresponds to a valid derivation of G', and therefore G. To see that [&#183;] is one-to-one, observe that the adjunction labels keep track of how G' constructed its simulated derivations, ensuring that for any derivation t&#710; of &#710;G, the decomposition of the derived tree of t&#710; is t&#710; itself.</S>
    <S sid="126" ssid="51">Therefore two derivations of G&#710; cannot correspond to the same derivation of G', nor of G. G&#710; is finite.</S>
    <S sid="127" ssid="52">Briefly, suppose that the number of components per tree set is unbounded.</S>
    <S sid="128" ssid="53">Then it is possible, by intersecting G' with a recognizable set, to obtain a grammar whose simulated derivation set is non-recognizable.</S>
    <S sid="129" ssid="54">The idea is that multicomponent tree sets give rise to dependent paths in the derivation set, so if there is no bound on the number of components in a tree set, neither is there a bound on the length of dependent paths.</S>
    <S sid="130" ssid="55">This contradicts the requirement that a simulating interpretation map recognizable sets to recognizable sets.</S>
    <S sid="131" ssid="56">Suppose that the number of nodes per component is unbounded.</S>
    <S sid="132" ssid="57">If the number of components per tree set is bounded, so must the number of adjunction nodes per component; then it is possible, again by intersecting G' with a recognizable set, to obtain a grammar which is infinitely ambiguous with respect to simulated derivations, which contradicts the requirement that simulating interpretations be bijective.</S>
    <S sid="133" ssid="58">G&#710; is in regular form.</S>
    <S sid="134" ssid="59">A component of G&#710; corresponds to a derivation fragment of G' which takes fields from several subderivations and processes them, combining some into a larger structure and copying some straight through to the root.</S>
    <S sid="135" ssid="60">Let &#961;i(X) be the number of fields that a component of type X copies from its ith foot up to its root.</S>
    <S sid="136" ssid="61">This information is encoded in X, in the signature of the root.</S>
    <S sid="137" ssid="62">Then G&#710; satisfies the regular form constraint, because when adjunction inserts one spine into another spine, the the inserted spine must copy at least as many fields as the outer one.</S>
    <S sid="138" ssid="63">Furthermore, if the adjunction site is not safe, then the inserted spine must additionally copy the value produced by some lower node.</S>
  </SECTION>
  <SECTION title="5 Discussion" number="6">
    <S sid="139" ssid="1">We have proposed a more constrained version of Joshi&#8217;s question, &#8220;How much strong generative power can be squeezed out of a formal system without increasing its weak generative power,&#8221; and shown that within these constraints, a variant of TAG called MMTAG characterizes the limit of how much strong generative power can be squeezed out of CFG.</S>
    <S sid="140" ssid="2">Moreover, using the notion of a meta-level grammar, this result is extended to formalisms beyond CFG.</S>
    <S sid="141" ssid="3">It remains to be seen whether RF-MMTAG, whether used directly or for specifying meta-level grammars, provides further practical benefits on top of existing &#8220;squeezed&#8221; grammar formalisms like tree-local MCTAG, tree insertion grammar, or regular form TAG.</S>
    <S sid="142" ssid="4">This way of approaching Joshi&#8217;s question is by no means the only way, but we hope that this work will contribute to a better understanding of the strong generative capacity of constrained grammar formalisms as well as reveal more powerful formalisms for linguistic analysis and natural language processing.</S>
  </SECTION>
  <SECTION title="Acknowledgments" number="7">
    <S sid="143" ssid="1">This research is supported in part by NSF grant SBR-89-20230-15.</S>
    <S sid="144" ssid="2">Thanks to Mark Dras, William Schuler, Anoop Sarkar, Aravind Joshi, and the anonymous reviewers for their valuable help.</S>
    <S sid="145" ssid="3">S. D. G.</S>
  </SECTION>
</PAPER>
